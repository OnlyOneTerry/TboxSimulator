// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#include "event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace EventNS {
constexpr Event::Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventmsg_()
  , eventack_(nullptr){}
struct EventDefaultTypeInternal {
  constexpr EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDefaultTypeInternal _Event_default_instance_;
constexpr EventMsg::EventMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batteryinfo_()
  , lamps_()
  , engineonoff_(nullptr)
  , skfaultinfo_(nullptr)
  , sidestandinfo_(nullptr)
  , seatbucketopenclose_(nullptr)
  , eventitem_(0)

  , gearposition_(0)
{}
struct EventMsgDefaultTypeInternal {
  constexpr EventMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventMsgDefaultTypeInternal() {}
  union {
    EventMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventMsgDefaultTypeInternal _EventMsg_default_instance_;
constexpr EngineOnOff::EngineOnOff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hmiinfo_(nullptr)
  , bluetoothinfo_(nullptr)
  , kl15_(false)
  , power_(0u){}
struct EngineOnOffDefaultTypeInternal {
  constexpr EngineOnOffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EngineOnOffDefaultTypeInternal() {}
  union {
    EngineOnOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EngineOnOffDefaultTypeInternal _EngineOnOff_default_instance_;
constexpr BluetoothInfo::BluetoothInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bluetoothname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bluetoothpwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bluetoothsecretkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bluetoothmac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BluetoothInfoDefaultTypeInternal {
  constexpr BluetoothInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BluetoothInfoDefaultTypeInternal() {}
  union {
    BluetoothInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BluetoothInfoDefaultTypeInternal _BluetoothInfo_default_instance_;
constexpr BatteryInfo::BatteryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : charging_(false)
  , quantity_(0u)
  , range_(0u)
  , temp_(0u)
  , cycle_(0u)
  , remaining_(0u)
  , bmsid_(0u){}
struct BatteryInfoDefaultTypeInternal {
  constexpr BatteryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryInfoDefaultTypeInternal() {}
  union {
    BatteryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryInfoDefaultTypeInternal _BatteryInfo_default_instance_;
constexpr SKFaultInfo::SKFaultInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mcufault_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bmsfault_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SKFaultInfoDefaultTypeInternal {
  constexpr SKFaultInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SKFaultInfoDefaultTypeInternal() {}
  union {
    SKFaultInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SKFaultInfoDefaultTypeInternal _SKFaultInfo_default_instance_;
constexpr SideStandInfo::SideStandInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SideStandInfoDefaultTypeInternal {
  constexpr SideStandInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SideStandInfoDefaultTypeInternal() {}
  union {
    SideStandInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SideStandInfoDefaultTypeInternal _SideStandInfo_default_instance_;
constexpr LampInfo::LampInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lamptype_(0)

  , lampstatus_(0)
{}
struct LampInfoDefaultTypeInternal {
  constexpr LampInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LampInfoDefaultTypeInternal() {}
  union {
    LampInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LampInfoDefaultTypeInternal _LampInfo_default_instance_;
constexpr SeatBucketOpenClose::SeatBucketOpenClose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)
{}
struct SeatBucketOpenCloseDefaultTypeInternal {
  constexpr SeatBucketOpenCloseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SeatBucketOpenCloseDefaultTypeInternal() {}
  union {
    SeatBucketOpenClose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SeatBucketOpenCloseDefaultTypeInternal _SeatBucketOpenClose_default_instance_;
constexpr EventAck::EventAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0u){}
struct EventAckDefaultTypeInternal {
  constexpr EventAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventAckDefaultTypeInternal() {}
  union {
    EventAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventAckDefaultTypeInternal _EventAck_default_instance_;
}  // namespace EventNS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_event_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_event_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_event_2eproto = nullptr;

const uint32_t TableStruct_event_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::Event, eventmsg_),
  PROTOBUF_FIELD_OFFSET(::EventNS::Event, eventack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, eventitem_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, engineonoff_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, gearposition_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, batteryinfo_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, skfaultinfo_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, sidestandinfo_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, lamps_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventMsg, seatbucketopenclose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::EngineOnOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::EngineOnOff, kl15_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EngineOnOff, location_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EngineOnOff, hmiinfo_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EngineOnOff, bluetoothinfo_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EngineOnOff, power_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EngineOnOff, taskid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::BluetoothInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::BluetoothInfo, bluetoothname_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BluetoothInfo, bluetoothpwd_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BluetoothInfo, bluetoothsecretkey_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BluetoothInfo, bluetoothmac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, charging_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, quantity_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, range_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, temp_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, cycle_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, remaining_),
  PROTOBUF_FIELD_OFFSET(::EventNS::BatteryInfo, bmsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::SKFaultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::SKFaultInfo, mcufault_),
  PROTOBUF_FIELD_OFFSET(::EventNS::SKFaultInfo, bmsfault_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::SideStandInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::SideStandInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::LampInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::LampInfo, lamptype_),
  PROTOBUF_FIELD_OFFSET(::EventNS::LampInfo, lampstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::SeatBucketOpenClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::SeatBucketOpenClose, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventNS::EventAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EventNS::EventAck, result_),
  PROTOBUF_FIELD_OFFSET(::EventNS::EventAck, taskid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::EventNS::Event)},
  { 8, -1, -1, sizeof(::EventNS::EventMsg)},
  { 22, -1, -1, sizeof(::EventNS::EngineOnOff)},
  { 34, -1, -1, sizeof(::EventNS::BluetoothInfo)},
  { 44, -1, -1, sizeof(::EventNS::BatteryInfo)},
  { 57, -1, -1, sizeof(::EventNS::SKFaultInfo)},
  { 65, -1, -1, sizeof(::EventNS::SideStandInfo)},
  { 72, -1, -1, sizeof(::EventNS::LampInfo)},
  { 80, -1, -1, sizeof(::EventNS::SeatBucketOpenClose)},
  { 87, -1, -1, sizeof(::EventNS::EventAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_EventMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_EngineOnOff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_BluetoothInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_BatteryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_SKFaultInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_SideStandInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_LampInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_SeatBucketOpenClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EventNS::_EventAck_default_instance_),
};

const char descriptor_table_protodef_event_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013event.proto\022\007EventNS\032\014status.proto\"Q\n\005"
  "Event\022#\n\010eventMsg\030\001 \003(\0132\021.EventNS.EventM"
  "sg\022#\n\010eventAck\030\002 \001(\0132\021.EventNS.EventAck\""
  "\354\002\n\010EventMsg\022%\n\teventItem\030\001 \001(\0162\022.EventN"
  "S.EventItem\022)\n\013engineOnOff\030\002 \001(\0132\024.Event"
  "NS.EngineOnOff\022,\n\014gearPosition\030\003 \001(\0162\026.S"
  "tatusNS.GearPosition\022)\n\013batteryInfo\030\004 \003("
  "\0132\024.EventNS.BatteryInfo\022)\n\013skFaultInfo\030\005"
  " \001(\0132\024.EventNS.SKFaultInfo\022-\n\rsideStandI"
  "nfo\030\006 \001(\0132\026.EventNS.SideStandInfo\022 \n\005lam"
  "ps\030\007 \003(\0132\021.EventNS.LampInfo\0229\n\023seatBucke"
  "tOpenClose\030\010 \001(\0132\034.EventNS.SeatBucketOpe"
  "nClose\"\237\001\n\013EngineOnOff\022\014\n\004kl15\030\001 \001(\010\022\020\n\010"
  "location\030\002 \001(\014\022\"\n\007hmiInfo\030\003 \001(\0132\021.Status"
  "NS.HmiInfo\022-\n\rbluetoothInfo\030\004 \001(\0132\026.Even"
  "tNS.BluetoothInfo\022\r\n\005power\030\005 \001(\r\022\016\n\006task"
  "ID\030\006 \001(\t\"n\n\rBluetoothInfo\022\025\n\rbluetoothNa"
  "me\030\001 \001(\t\022\024\n\014bluetoothPwd\030\002 \001(\t\022\032\n\022blueto"
  "othSecretKey\030\003 \001(\t\022\024\n\014bluetoothMac\030\004 \001(\t"
  "\"\177\n\013BatteryInfo\022\020\n\010charging\030\001 \001(\010\022\020\n\010qua"
  "ntity\030\002 \001(\r\022\r\n\005range\030\003 \001(\r\022\014\n\004temp\030\004 \001(\r"
  "\022\r\n\005cycle\030\005 \001(\r\022\021\n\tremaining\030\006 \001(\r\022\r\n\005bm"
  "sId\030\007 \001(\r\"1\n\013SKFaultInfo\022\020\n\010mcuFault\030\001 \001"
  "(\014\022\020\n\010bmsFault\030\002 \001(\014\"9\n\rSideStandInfo\022(\n"
  "\006status\030\001 \001(\0162\030.EventNS.SideStandStatus\""
  "X\n\010LampInfo\022#\n\010lampType\030\001 \001(\0162\021.EventNS."
  "LampType\022\'\n\nlampStatus\030\002 \001(\0162\023.EventNS.L"
  "ampStatus\"@\n\023SeatBucketOpenClose\022)\n\006stat"
  "us\030\001 \001(\0162\031.EventNS.SeatBucketStatus\"*\n\010E"
  "ventAck\022\016\n\006result\030\001 \001(\r\022\016\n\006taskID\030\002 \001(\t*"
  "\'\n\017SideStandStatus\022\t\n\005LOWER\020\000\022\t\n\005RAISE\020\001"
  "*\201\001\n\010LampType\022\022\n\016LOW_BEAM_LIGHT\020\000\022\023\n\017HIG"
  "H_BEAM_LIGHT\020\001\022\032\n\026DAY_TIME_RUNNING_LIGHT"
  "\020\002\022\027\n\023BACK_POSITION_LIGHT\020\003\022\027\n\023LICENSE_P"
  "LATE_LIGHT\020\004*+\n\nLampStatus\022\007\n\003OFF\020\000\022\006\n\002O"
  "N\020\001\022\014\n\010CHARGING\020\002*\'\n\020SeatBucketStatus\022\010\n"
  "\004OPEN\020\000\022\t\n\005CLOSE\020\001*\246\001\n\tEventItem\022\013\n\007INVA"
  "LID\020\000\022\021\n\rENGINE_ON_OFF\020\001\022\021\n\rGEAR_POSITIO"
  "N\020\002\022\017\n\013BATTERY_QTY\020\003\022\014\n\010SK_FAULT\020\004\022\032\n\026SI"
  "DE_STAND_LOWER_RAISE\020\005\022\017\n\013LAMP_ON_OFF\020\006\022"
  "\032\n\026SEAT_BUCKET_OPEN_CLOSE\020\007B\033\n\rcom.iov.p"
  "rotoB\nEventProtoP\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_event_2eproto_deps[1] = {
  &::descriptor_table_status_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_event_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_event_2eproto = {
  false, false, 1666, descriptor_table_protodef_event_2eproto, "event.proto", 
  &descriptor_table_event_2eproto_once, descriptor_table_event_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_event_2eproto::offsets,
  file_level_metadata_event_2eproto, file_level_enum_descriptors_event_2eproto, file_level_service_descriptors_event_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_event_2eproto_getter() {
  return &descriptor_table_event_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_event_2eproto(&descriptor_table_event_2eproto);
namespace EventNS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SideStandStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[0];
}
bool SideStandStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LampType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[1];
}
bool LampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LampStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[2];
}
bool LampStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeatBucketStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[3];
}
bool SeatBucketStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventItem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_event_2eproto);
  return file_level_enum_descriptors_event_2eproto[4];
}
bool EventItem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Event::_Internal {
 public:
  static const ::EventNS::EventAck& eventack(const Event* msg);
};

const ::EventNS::EventAck&
Event::_Internal::eventack(const Event* msg) {
  return *msg->eventack_;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  eventmsg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      eventmsg_(from.eventmsg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eventack()) {
    eventack_ = new ::EventNS::EventAck(*from.eventack_);
  } else {
    eventack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:EventNS.Event)
}

inline void Event::SharedCtor() {
eventack_ = nullptr;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:EventNS.Event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete eventack_;
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventmsg_.Clear();
  if (GetArenaForAllocation() == nullptr && eventack_ != nullptr) {
    delete eventack_;
  }
  eventack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .EventNS.EventMsg eventMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eventmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .EventNS.EventAck eventAck = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EventNS.EventMsg eventMsg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_eventmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_eventmsg(i), target, stream);
  }

  // .EventNS.EventAck eventAck = 2;
  if (this->_internal_has_eventack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eventack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EventNS.EventMsg eventMsg = 1;
  total_size += 1UL * this->_internal_eventmsg_size();
  for (const auto& msg : this->eventmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .EventNS.EventAck eventAck = 2;
  if (this->_internal_has_eventack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eventack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  eventmsg_.MergeFrom(from.eventmsg_);
  if (from._internal_has_eventack()) {
    _internal_mutable_eventack()->::EventNS::EventAck::MergeFrom(from._internal_eventack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  eventmsg_.InternalSwap(&other->eventmsg_);
  swap(eventack_, other->eventack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[0]);
}

// ===================================================================

class EventMsg::_Internal {
 public:
  static const ::EventNS::EngineOnOff& engineonoff(const EventMsg* msg);
  static const ::EventNS::SKFaultInfo& skfaultinfo(const EventMsg* msg);
  static const ::EventNS::SideStandInfo& sidestandinfo(const EventMsg* msg);
  static const ::EventNS::SeatBucketOpenClose& seatbucketopenclose(const EventMsg* msg);
};

const ::EventNS::EngineOnOff&
EventMsg::_Internal::engineonoff(const EventMsg* msg) {
  return *msg->engineonoff_;
}
const ::EventNS::SKFaultInfo&
EventMsg::_Internal::skfaultinfo(const EventMsg* msg) {
  return *msg->skfaultinfo_;
}
const ::EventNS::SideStandInfo&
EventMsg::_Internal::sidestandinfo(const EventMsg* msg) {
  return *msg->sidestandinfo_;
}
const ::EventNS::SeatBucketOpenClose&
EventMsg::_Internal::seatbucketopenclose(const EventMsg* msg) {
  return *msg->seatbucketopenclose_;
}
EventMsg::EventMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  batteryinfo_(arena),
  lamps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.EventMsg)
}
EventMsg::EventMsg(const EventMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      batteryinfo_(from.batteryinfo_),
      lamps_(from.lamps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_engineonoff()) {
    engineonoff_ = new ::EventNS::EngineOnOff(*from.engineonoff_);
  } else {
    engineonoff_ = nullptr;
  }
  if (from._internal_has_skfaultinfo()) {
    skfaultinfo_ = new ::EventNS::SKFaultInfo(*from.skfaultinfo_);
  } else {
    skfaultinfo_ = nullptr;
  }
  if (from._internal_has_sidestandinfo()) {
    sidestandinfo_ = new ::EventNS::SideStandInfo(*from.sidestandinfo_);
  } else {
    sidestandinfo_ = nullptr;
  }
  if (from._internal_has_seatbucketopenclose()) {
    seatbucketopenclose_ = new ::EventNS::SeatBucketOpenClose(*from.seatbucketopenclose_);
  } else {
    seatbucketopenclose_ = nullptr;
  }
  ::memcpy(&eventitem_, &from.eventitem_,
    static_cast<size_t>(reinterpret_cast<char*>(&gearposition_) -
    reinterpret_cast<char*>(&eventitem_)) + sizeof(gearposition_));
  // @@protoc_insertion_point(copy_constructor:EventNS.EventMsg)
}

inline void EventMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&engineonoff_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gearposition_) -
    reinterpret_cast<char*>(&engineonoff_)) + sizeof(gearposition_));
}

EventMsg::~EventMsg() {
  // @@protoc_insertion_point(destructor:EventNS.EventMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete engineonoff_;
  if (this != internal_default_instance()) delete skfaultinfo_;
  if (this != internal_default_instance()) delete sidestandinfo_;
  if (this != internal_default_instance()) delete seatbucketopenclose_;
}

void EventMsg::ArenaDtor(void* object) {
  EventMsg* _this = reinterpret_cast< EventMsg* >(object);
  (void)_this;
}
void EventMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.EventMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batteryinfo_.Clear();
  lamps_.Clear();
  if (GetArenaForAllocation() == nullptr && engineonoff_ != nullptr) {
    delete engineonoff_;
  }
  engineonoff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && skfaultinfo_ != nullptr) {
    delete skfaultinfo_;
  }
  skfaultinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sidestandinfo_ != nullptr) {
    delete sidestandinfo_;
  }
  sidestandinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && seatbucketopenclose_ != nullptr) {
    delete seatbucketopenclose_;
  }
  seatbucketopenclose_ = nullptr;
  ::memset(&eventitem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gearposition_) -
      reinterpret_cast<char*>(&eventitem_)) + sizeof(gearposition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .EventNS.EventItem eventItem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eventitem(static_cast<::EventNS::EventItem>(val));
        } else
          goto handle_unusual;
        continue;
      // .EventNS.EngineOnOff engineOnOff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_engineonoff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StatusNS.GearPosition gearPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gearposition(static_cast<::StatusNS::GearPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .EventNS.BatteryInfo batteryInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_batteryinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .EventNS.SKFaultInfo skFaultInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_skfaultinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EventNS.SideStandInfo sideStandInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sidestandinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EventNS.LampInfo lamps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lamps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .EventNS.SeatBucketOpenClose seatBucketOpenClose = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_seatbucketopenclose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.EventMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .EventNS.EventItem eventItem = 1;
  if (this->_internal_eventitem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eventitem(), target);
  }

  // .EventNS.EngineOnOff engineOnOff = 2;
  if (this->_internal_has_engineonoff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::engineonoff(this), target, stream);
  }

  // .StatusNS.GearPosition gearPosition = 3;
  if (this->_internal_gearposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gearposition(), target);
  }

  // repeated .EventNS.BatteryInfo batteryInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_batteryinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_batteryinfo(i), target, stream);
  }

  // .EventNS.SKFaultInfo skFaultInfo = 5;
  if (this->_internal_has_skfaultinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::skfaultinfo(this), target, stream);
  }

  // .EventNS.SideStandInfo sideStandInfo = 6;
  if (this->_internal_has_sidestandinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sidestandinfo(this), target, stream);
  }

  // repeated .EventNS.LampInfo lamps = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lamps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_lamps(i), target, stream);
  }

  // .EventNS.SeatBucketOpenClose seatBucketOpenClose = 8;
  if (this->_internal_has_seatbucketopenclose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::seatbucketopenclose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.EventMsg)
  return target;
}

size_t EventMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.EventMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EventNS.BatteryInfo batteryInfo = 4;
  total_size += 1UL * this->_internal_batteryinfo_size();
  for (const auto& msg : this->batteryinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EventNS.LampInfo lamps = 7;
  total_size += 1UL * this->_internal_lamps_size();
  for (const auto& msg : this->lamps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .EventNS.EngineOnOff engineOnOff = 2;
  if (this->_internal_has_engineonoff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *engineonoff_);
  }

  // .EventNS.SKFaultInfo skFaultInfo = 5;
  if (this->_internal_has_skfaultinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skfaultinfo_);
  }

  // .EventNS.SideStandInfo sideStandInfo = 6;
  if (this->_internal_has_sidestandinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sidestandinfo_);
  }

  // .EventNS.SeatBucketOpenClose seatBucketOpenClose = 8;
  if (this->_internal_has_seatbucketopenclose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seatbucketopenclose_);
  }

  // .EventNS.EventItem eventItem = 1;
  if (this->_internal_eventitem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eventitem());
  }

  // .StatusNS.GearPosition gearPosition = 3;
  if (this->_internal_gearposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gearposition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventMsg::GetClassData() const { return &_class_data_; }

void EventMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventMsg *>(to)->MergeFrom(
      static_cast<const EventMsg &>(from));
}


void EventMsg::MergeFrom(const EventMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.EventMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  batteryinfo_.MergeFrom(from.batteryinfo_);
  lamps_.MergeFrom(from.lamps_);
  if (from._internal_has_engineonoff()) {
    _internal_mutable_engineonoff()->::EventNS::EngineOnOff::MergeFrom(from._internal_engineonoff());
  }
  if (from._internal_has_skfaultinfo()) {
    _internal_mutable_skfaultinfo()->::EventNS::SKFaultInfo::MergeFrom(from._internal_skfaultinfo());
  }
  if (from._internal_has_sidestandinfo()) {
    _internal_mutable_sidestandinfo()->::EventNS::SideStandInfo::MergeFrom(from._internal_sidestandinfo());
  }
  if (from._internal_has_seatbucketopenclose()) {
    _internal_mutable_seatbucketopenclose()->::EventNS::SeatBucketOpenClose::MergeFrom(from._internal_seatbucketopenclose());
  }
  if (from._internal_eventitem() != 0) {
    _internal_set_eventitem(from._internal_eventitem());
  }
  if (from._internal_gearposition() != 0) {
    _internal_set_gearposition(from._internal_gearposition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventMsg::CopyFrom(const EventMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.EventMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMsg::IsInitialized() const {
  return true;
}

void EventMsg::InternalSwap(EventMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  batteryinfo_.InternalSwap(&other->batteryinfo_);
  lamps_.InternalSwap(&other->lamps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventMsg, gearposition_)
      + sizeof(EventMsg::gearposition_)
      - PROTOBUF_FIELD_OFFSET(EventMsg, engineonoff_)>(
          reinterpret_cast<char*>(&engineonoff_),
          reinterpret_cast<char*>(&other->engineonoff_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[1]);
}

// ===================================================================

class EngineOnOff::_Internal {
 public:
  static const ::StatusNS::HmiInfo& hmiinfo(const EngineOnOff* msg);
  static const ::EventNS::BluetoothInfo& bluetoothinfo(const EngineOnOff* msg);
};

const ::StatusNS::HmiInfo&
EngineOnOff::_Internal::hmiinfo(const EngineOnOff* msg) {
  return *msg->hmiinfo_;
}
const ::EventNS::BluetoothInfo&
EngineOnOff::_Internal::bluetoothinfo(const EngineOnOff* msg) {
  return *msg->bluetoothinfo_;
}
void EngineOnOff::clear_hmiinfo() {
  if (GetArenaForAllocation() == nullptr && hmiinfo_ != nullptr) {
    delete hmiinfo_;
  }
  hmiinfo_ = nullptr;
}
EngineOnOff::EngineOnOff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.EngineOnOff)
}
EngineOnOff::EngineOnOff(const EngineOnOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hmiinfo()) {
    hmiinfo_ = new ::StatusNS::HmiInfo(*from.hmiinfo_);
  } else {
    hmiinfo_ = nullptr;
  }
  if (from._internal_has_bluetoothinfo()) {
    bluetoothinfo_ = new ::EventNS::BluetoothInfo(*from.bluetoothinfo_);
  } else {
    bluetoothinfo_ = nullptr;
  }
  ::memcpy(&kl15_, &from.kl15_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&kl15_)) + sizeof(power_));
  // @@protoc_insertion_point(copy_constructor:EventNS.EngineOnOff)
}

inline void EngineOnOff::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hmiinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&hmiinfo_)) + sizeof(power_));
}

EngineOnOff::~EngineOnOff() {
  // @@protoc_insertion_point(destructor:EventNS.EngineOnOff)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EngineOnOff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hmiinfo_;
  if (this != internal_default_instance()) delete bluetoothinfo_;
}

void EngineOnOff::ArenaDtor(void* object) {
  EngineOnOff* _this = reinterpret_cast< EngineOnOff* >(object);
  (void)_this;
}
void EngineOnOff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EngineOnOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EngineOnOff::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.EngineOnOff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmpty();
  taskid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && hmiinfo_ != nullptr) {
    delete hmiinfo_;
  }
  hmiinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bluetoothinfo_ != nullptr) {
    delete bluetoothinfo_;
  }
  bluetoothinfo_ = nullptr;
  ::memset(&kl15_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&kl15_)) + sizeof(power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineOnOff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool kl15 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          kl15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StatusNS.HmiInfo hmiInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hmiinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EventNS.BluetoothInfo bluetoothInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bluetoothinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string taskID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EventNS.EngineOnOff.taskID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineOnOff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.EngineOnOff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool kl15 = 1;
  if (this->_internal_kl15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_kl15(), target);
  }

  // bytes location = 2;
  if (!this->_internal_location().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_location(), target);
  }

  // .StatusNS.HmiInfo hmiInfo = 3;
  if (this->_internal_has_hmiinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hmiinfo(this), target, stream);
  }

  // .EventNS.BluetoothInfo bluetoothInfo = 4;
  if (this->_internal_has_bluetoothinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bluetoothinfo(this), target, stream);
  }

  // uint32 power = 5;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_power(), target);
  }

  // string taskID = 6;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventNS.EngineOnOff.taskID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.EngineOnOff)
  return target;
}

size_t EngineOnOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.EngineOnOff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes location = 2;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_location());
  }

  // string taskID = 6;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .StatusNS.HmiInfo hmiInfo = 3;
  if (this->_internal_has_hmiinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hmiinfo_);
  }

  // .EventNS.BluetoothInfo bluetoothInfo = 4;
  if (this->_internal_has_bluetoothinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bluetoothinfo_);
  }

  // bool kl15 = 1;
  if (this->_internal_kl15() != 0) {
    total_size += 1 + 1;
  }

  // uint32 power = 5;
  if (this->_internal_power() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineOnOff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EngineOnOff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineOnOff::GetClassData() const { return &_class_data_; }

void EngineOnOff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EngineOnOff *>(to)->MergeFrom(
      static_cast<const EngineOnOff &>(from));
}


void EngineOnOff::MergeFrom(const EngineOnOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.EngineOnOff)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_has_hmiinfo()) {
    _internal_mutable_hmiinfo()->::StatusNS::HmiInfo::MergeFrom(from._internal_hmiinfo());
  }
  if (from._internal_has_bluetoothinfo()) {
    _internal_mutable_bluetoothinfo()->::EventNS::BluetoothInfo::MergeFrom(from._internal_bluetoothinfo());
  }
  if (from._internal_kl15() != 0) {
    _internal_set_kl15(from._internal_kl15());
  }
  if (from._internal_power() != 0) {
    _internal_set_power(from._internal_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineOnOff::CopyFrom(const EngineOnOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.EngineOnOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineOnOff::IsInitialized() const {
  return true;
}

void EngineOnOff::InternalSwap(EngineOnOff* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineOnOff, power_)
      + sizeof(EngineOnOff::power_)
      - PROTOBUF_FIELD_OFFSET(EngineOnOff, hmiinfo_)>(
          reinterpret_cast<char*>(&hmiinfo_),
          reinterpret_cast<char*>(&other->hmiinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineOnOff::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[2]);
}

// ===================================================================

class BluetoothInfo::_Internal {
 public:
};

BluetoothInfo::BluetoothInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.BluetoothInfo)
}
BluetoothInfo::BluetoothInfo(const BluetoothInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bluetoothname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bluetoothname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluetoothname().empty()) {
    bluetoothname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bluetoothname(), 
      GetArenaForAllocation());
  }
  bluetoothpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bluetoothpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluetoothpwd().empty()) {
    bluetoothpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bluetoothpwd(), 
      GetArenaForAllocation());
  }
  bluetoothsecretkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bluetoothsecretkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluetoothsecretkey().empty()) {
    bluetoothsecretkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bluetoothsecretkey(), 
      GetArenaForAllocation());
  }
  bluetoothmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bluetoothmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluetoothmac().empty()) {
    bluetoothmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bluetoothmac(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:EventNS.BluetoothInfo)
}

inline void BluetoothInfo::SharedCtor() {
bluetoothname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bluetoothname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bluetoothpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bluetoothpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bluetoothsecretkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bluetoothsecretkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bluetoothmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bluetoothmac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BluetoothInfo::~BluetoothInfo() {
  // @@protoc_insertion_point(destructor:EventNS.BluetoothInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BluetoothInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bluetoothname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bluetoothpwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bluetoothsecretkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bluetoothmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothInfo::ArenaDtor(void* object) {
  BluetoothInfo* _this = reinterpret_cast< BluetoothInfo* >(object);
  (void)_this;
}
void BluetoothInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BluetoothInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BluetoothInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.BluetoothInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bluetoothname_.ClearToEmpty();
  bluetoothpwd_.ClearToEmpty();
  bluetoothsecretkey_.ClearToEmpty();
  bluetoothmac_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BluetoothInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bluetoothName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bluetoothname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EventNS.BluetoothInfo.bluetoothName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bluetoothPwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bluetoothpwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EventNS.BluetoothInfo.bluetoothPwd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bluetoothSecretKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bluetoothsecretkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EventNS.BluetoothInfo.bluetoothSecretKey"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bluetoothMac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bluetoothmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EventNS.BluetoothInfo.bluetoothMac"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BluetoothInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.BluetoothInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bluetoothName = 1;
  if (!this->_internal_bluetoothname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bluetoothname().data(), static_cast<int>(this->_internal_bluetoothname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventNS.BluetoothInfo.bluetoothName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bluetoothname(), target);
  }

  // string bluetoothPwd = 2;
  if (!this->_internal_bluetoothpwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bluetoothpwd().data(), static_cast<int>(this->_internal_bluetoothpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventNS.BluetoothInfo.bluetoothPwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bluetoothpwd(), target);
  }

  // string bluetoothSecretKey = 3;
  if (!this->_internal_bluetoothsecretkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bluetoothsecretkey().data(), static_cast<int>(this->_internal_bluetoothsecretkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventNS.BluetoothInfo.bluetoothSecretKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bluetoothsecretkey(), target);
  }

  // string bluetoothMac = 4;
  if (!this->_internal_bluetoothmac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bluetoothmac().data(), static_cast<int>(this->_internal_bluetoothmac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventNS.BluetoothInfo.bluetoothMac");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bluetoothmac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.BluetoothInfo)
  return target;
}

size_t BluetoothInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.BluetoothInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bluetoothName = 1;
  if (!this->_internal_bluetoothname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bluetoothname());
  }

  // string bluetoothPwd = 2;
  if (!this->_internal_bluetoothpwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bluetoothpwd());
  }

  // string bluetoothSecretKey = 3;
  if (!this->_internal_bluetoothsecretkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bluetoothsecretkey());
  }

  // string bluetoothMac = 4;
  if (!this->_internal_bluetoothmac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bluetoothmac());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BluetoothInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BluetoothInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BluetoothInfo::GetClassData() const { return &_class_data_; }

void BluetoothInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BluetoothInfo *>(to)->MergeFrom(
      static_cast<const BluetoothInfo &>(from));
}


void BluetoothInfo::MergeFrom(const BluetoothInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.BluetoothInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bluetoothname().empty()) {
    _internal_set_bluetoothname(from._internal_bluetoothname());
  }
  if (!from._internal_bluetoothpwd().empty()) {
    _internal_set_bluetoothpwd(from._internal_bluetoothpwd());
  }
  if (!from._internal_bluetoothsecretkey().empty()) {
    _internal_set_bluetoothsecretkey(from._internal_bluetoothsecretkey());
  }
  if (!from._internal_bluetoothmac().empty()) {
    _internal_set_bluetoothmac(from._internal_bluetoothmac());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BluetoothInfo::CopyFrom(const BluetoothInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.BluetoothInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothInfo::IsInitialized() const {
  return true;
}

void BluetoothInfo::InternalSwap(BluetoothInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bluetoothname_, lhs_arena,
      &other->bluetoothname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bluetoothpwd_, lhs_arena,
      &other->bluetoothpwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bluetoothsecretkey_, lhs_arena,
      &other->bluetoothsecretkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bluetoothmac_, lhs_arena,
      &other->bluetoothmac_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[3]);
}

// ===================================================================

class BatteryInfo::_Internal {
 public:
};

BatteryInfo::BatteryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.BatteryInfo)
}
BatteryInfo::BatteryInfo(const BatteryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&charging_, &from.charging_,
    static_cast<size_t>(reinterpret_cast<char*>(&bmsid_) -
    reinterpret_cast<char*>(&charging_)) + sizeof(bmsid_));
  // @@protoc_insertion_point(copy_constructor:EventNS.BatteryInfo)
}

inline void BatteryInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&charging_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bmsid_) -
    reinterpret_cast<char*>(&charging_)) + sizeof(bmsid_));
}

BatteryInfo::~BatteryInfo() {
  // @@protoc_insertion_point(destructor:EventNS.BatteryInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatteryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatteryInfo::ArenaDtor(void* object) {
  BatteryInfo* _this = reinterpret_cast< BatteryInfo* >(object);
  (void)_this;
}
void BatteryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatteryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.BatteryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&charging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bmsid_) -
      reinterpret_cast<char*>(&charging_)) + sizeof(bmsid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool charging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          charging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 temp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cycle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remaining = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bmsId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          bmsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.BatteryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool charging = 1;
  if (this->_internal_charging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_charging(), target);
  }

  // uint32 quantity = 2;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // uint32 range = 3;
  if (this->_internal_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_range(), target);
  }

  // uint32 temp = 4;
  if (this->_internal_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_temp(), target);
  }

  // uint32 cycle = 5;
  if (this->_internal_cycle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cycle(), target);
  }

  // uint32 remaining = 6;
  if (this->_internal_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remaining(), target);
  }

  // uint32 bmsId = 7;
  if (this->_internal_bmsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bmsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.BatteryInfo)
  return target;
}

size_t BatteryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.BatteryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool charging = 1;
  if (this->_internal_charging() != 0) {
    total_size += 1 + 1;
  }

  // uint32 quantity = 2;
  if (this->_internal_quantity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
  }

  // uint32 range = 3;
  if (this->_internal_range() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_range());
  }

  // uint32 temp = 4;
  if (this->_internal_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temp());
  }

  // uint32 cycle = 5;
  if (this->_internal_cycle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cycle());
  }

  // uint32 remaining = 6;
  if (this->_internal_remaining() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_remaining());
  }

  // uint32 bmsId = 7;
  if (this->_internal_bmsid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmsid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatteryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryInfo::GetClassData() const { return &_class_data_; }

void BatteryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatteryInfo *>(to)->MergeFrom(
      static_cast<const BatteryInfo &>(from));
}


void BatteryInfo::MergeFrom(const BatteryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.BatteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_charging() != 0) {
    _internal_set_charging(from._internal_charging());
  }
  if (from._internal_quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_range() != 0) {
    _internal_set_range(from._internal_range());
  }
  if (from._internal_temp() != 0) {
    _internal_set_temp(from._internal_temp());
  }
  if (from._internal_cycle() != 0) {
    _internal_set_cycle(from._internal_cycle());
  }
  if (from._internal_remaining() != 0) {
    _internal_set_remaining(from._internal_remaining());
  }
  if (from._internal_bmsid() != 0) {
    _internal_set_bmsid(from._internal_bmsid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryInfo::CopyFrom(const BatteryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.BatteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryInfo::IsInitialized() const {
  return true;
}

void BatteryInfo::InternalSwap(BatteryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryInfo, bmsid_)
      + sizeof(BatteryInfo::bmsid_)
      - PROTOBUF_FIELD_OFFSET(BatteryInfo, charging_)>(
          reinterpret_cast<char*>(&charging_),
          reinterpret_cast<char*>(&other->charging_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[4]);
}

// ===================================================================

class SKFaultInfo::_Internal {
 public:
};

SKFaultInfo::SKFaultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.SKFaultInfo)
}
SKFaultInfo::SKFaultInfo(const SKFaultInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mcufault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mcufault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mcufault().empty()) {
    mcufault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mcufault(), 
      GetArenaForAllocation());
  }
  bmsfault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bmsfault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bmsfault().empty()) {
    bmsfault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bmsfault(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:EventNS.SKFaultInfo)
}

inline void SKFaultInfo::SharedCtor() {
mcufault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mcufault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bmsfault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bmsfault_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SKFaultInfo::~SKFaultInfo() {
  // @@protoc_insertion_point(destructor:EventNS.SKFaultInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SKFaultInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mcufault_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bmsfault_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SKFaultInfo::ArenaDtor(void* object) {
  SKFaultInfo* _this = reinterpret_cast< SKFaultInfo* >(object);
  (void)_this;
}
void SKFaultInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SKFaultInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SKFaultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.SKFaultInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcufault_.ClearToEmpty();
  bmsfault_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SKFaultInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mcuFault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mcufault();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bmsFault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bmsfault();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SKFaultInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.SKFaultInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mcuFault = 1;
  if (!this->_internal_mcufault().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mcufault(), target);
  }

  // bytes bmsFault = 2;
  if (!this->_internal_bmsfault().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bmsfault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.SKFaultInfo)
  return target;
}

size_t SKFaultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.SKFaultInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mcuFault = 1;
  if (!this->_internal_mcufault().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mcufault());
  }

  // bytes bmsFault = 2;
  if (!this->_internal_bmsfault().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bmsfault());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SKFaultInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SKFaultInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SKFaultInfo::GetClassData() const { return &_class_data_; }

void SKFaultInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SKFaultInfo *>(to)->MergeFrom(
      static_cast<const SKFaultInfo &>(from));
}


void SKFaultInfo::MergeFrom(const SKFaultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.SKFaultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mcufault().empty()) {
    _internal_set_mcufault(from._internal_mcufault());
  }
  if (!from._internal_bmsfault().empty()) {
    _internal_set_bmsfault(from._internal_bmsfault());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SKFaultInfo::CopyFrom(const SKFaultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.SKFaultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKFaultInfo::IsInitialized() const {
  return true;
}

void SKFaultInfo::InternalSwap(SKFaultInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mcufault_, lhs_arena,
      &other->mcufault_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bmsfault_, lhs_arena,
      &other->bmsfault_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SKFaultInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[5]);
}

// ===================================================================

class SideStandInfo::_Internal {
 public:
};

SideStandInfo::SideStandInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.SideStandInfo)
}
SideStandInfo::SideStandInfo(const SideStandInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:EventNS.SideStandInfo)
}

inline void SideStandInfo::SharedCtor() {
status_ = 0;
}

SideStandInfo::~SideStandInfo() {
  // @@protoc_insertion_point(destructor:EventNS.SideStandInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SideStandInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SideStandInfo::ArenaDtor(void* object) {
  SideStandInfo* _this = reinterpret_cast< SideStandInfo* >(object);
  (void)_this;
}
void SideStandInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SideStandInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SideStandInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.SideStandInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideStandInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .EventNS.SideStandStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::EventNS::SideStandStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SideStandInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.SideStandInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .EventNS.SideStandStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.SideStandInfo)
  return target;
}

size_t SideStandInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.SideStandInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .EventNS.SideStandStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SideStandInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SideStandInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SideStandInfo::GetClassData() const { return &_class_data_; }

void SideStandInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SideStandInfo *>(to)->MergeFrom(
      static_cast<const SideStandInfo &>(from));
}


void SideStandInfo::MergeFrom(const SideStandInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.SideStandInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SideStandInfo::CopyFrom(const SideStandInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.SideStandInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideStandInfo::IsInitialized() const {
  return true;
}

void SideStandInfo::InternalSwap(SideStandInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideStandInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[6]);
}

// ===================================================================

class LampInfo::_Internal {
 public:
};

LampInfo::LampInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.LampInfo)
}
LampInfo::LampInfo(const LampInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lamptype_, &from.lamptype_,
    static_cast<size_t>(reinterpret_cast<char*>(&lampstatus_) -
    reinterpret_cast<char*>(&lamptype_)) + sizeof(lampstatus_));
  // @@protoc_insertion_point(copy_constructor:EventNS.LampInfo)
}

inline void LampInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lamptype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lampstatus_) -
    reinterpret_cast<char*>(&lamptype_)) + sizeof(lampstatus_));
}

LampInfo::~LampInfo() {
  // @@protoc_insertion_point(destructor:EventNS.LampInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LampInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LampInfo::ArenaDtor(void* object) {
  LampInfo* _this = reinterpret_cast< LampInfo* >(object);
  (void)_this;
}
void LampInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LampInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LampInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.LampInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lamptype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lampstatus_) -
      reinterpret_cast<char*>(&lamptype_)) + sizeof(lampstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LampInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .EventNS.LampType lampType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lamptype(static_cast<::EventNS::LampType>(val));
        } else
          goto handle_unusual;
        continue;
      // .EventNS.LampStatus lampStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lampstatus(static_cast<::EventNS::LampStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LampInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.LampInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .EventNS.LampType lampType = 1;
  if (this->_internal_lamptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lamptype(), target);
  }

  // .EventNS.LampStatus lampStatus = 2;
  if (this->_internal_lampstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lampstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.LampInfo)
  return target;
}

size_t LampInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.LampInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .EventNS.LampType lampType = 1;
  if (this->_internal_lamptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lamptype());
  }

  // .EventNS.LampStatus lampStatus = 2;
  if (this->_internal_lampstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lampstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LampInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LampInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LampInfo::GetClassData() const { return &_class_data_; }

void LampInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LampInfo *>(to)->MergeFrom(
      static_cast<const LampInfo &>(from));
}


void LampInfo::MergeFrom(const LampInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.LampInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lamptype() != 0) {
    _internal_set_lamptype(from._internal_lamptype());
  }
  if (from._internal_lampstatus() != 0) {
    _internal_set_lampstatus(from._internal_lampstatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LampInfo::CopyFrom(const LampInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.LampInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LampInfo::IsInitialized() const {
  return true;
}

void LampInfo::InternalSwap(LampInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LampInfo, lampstatus_)
      + sizeof(LampInfo::lampstatus_)
      - PROTOBUF_FIELD_OFFSET(LampInfo, lamptype_)>(
          reinterpret_cast<char*>(&lamptype_),
          reinterpret_cast<char*>(&other->lamptype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LampInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[7]);
}

// ===================================================================

class SeatBucketOpenClose::_Internal {
 public:
};

SeatBucketOpenClose::SeatBucketOpenClose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.SeatBucketOpenClose)
}
SeatBucketOpenClose::SeatBucketOpenClose(const SeatBucketOpenClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:EventNS.SeatBucketOpenClose)
}

inline void SeatBucketOpenClose::SharedCtor() {
status_ = 0;
}

SeatBucketOpenClose::~SeatBucketOpenClose() {
  // @@protoc_insertion_point(destructor:EventNS.SeatBucketOpenClose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SeatBucketOpenClose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SeatBucketOpenClose::ArenaDtor(void* object) {
  SeatBucketOpenClose* _this = reinterpret_cast< SeatBucketOpenClose* >(object);
  (void)_this;
}
void SeatBucketOpenClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeatBucketOpenClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SeatBucketOpenClose::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.SeatBucketOpenClose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeatBucketOpenClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .EventNS.SeatBucketStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::EventNS::SeatBucketStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SeatBucketOpenClose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.SeatBucketOpenClose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .EventNS.SeatBucketStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.SeatBucketOpenClose)
  return target;
}

size_t SeatBucketOpenClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.SeatBucketOpenClose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .EventNS.SeatBucketStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeatBucketOpenClose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SeatBucketOpenClose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeatBucketOpenClose::GetClassData() const { return &_class_data_; }

void SeatBucketOpenClose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SeatBucketOpenClose *>(to)->MergeFrom(
      static_cast<const SeatBucketOpenClose &>(from));
}


void SeatBucketOpenClose::MergeFrom(const SeatBucketOpenClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.SeatBucketOpenClose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeatBucketOpenClose::CopyFrom(const SeatBucketOpenClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.SeatBucketOpenClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatBucketOpenClose::IsInitialized() const {
  return true;
}

void SeatBucketOpenClose::InternalSwap(SeatBucketOpenClose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeatBucketOpenClose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[8]);
}

// ===================================================================

class EventAck::_Internal {
 public:
};

EventAck::EventAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EventNS.EventAck)
}
EventAck::EventAck(const EventAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:EventNS.EventAck)
}

inline void EventAck::SharedCtor() {
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = 0u;
}

EventAck::~EventAck() {
  // @@protoc_insertion_point(destructor:EventNS.EventAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventAck::ArenaDtor(void* object) {
  EventAck* _this = reinterpret_cast< EventAck* >(object);
  (void)_this;
}
void EventAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventAck::Clear() {
// @@protoc_insertion_point(message_clear_start:EventNS.EventAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmpty();
  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string taskID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EventNS.EventAck.taskID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventNS.EventAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // string taskID = 2;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventNS.EventAck.taskID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventNS.EventAck)
  return target;
}

size_t EventAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventNS.EventAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskID = 2;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventAck::GetClassData() const { return &_class_data_; }

void EventAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventAck *>(to)->MergeFrom(
      static_cast<const EventAck &>(from));
}


void EventAck::MergeFrom(const EventAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventNS.EventAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventAck::CopyFrom(const EventAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventNS.EventAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAck::IsInitialized() const {
  return true;
}

void EventAck::InternalSwap(EventAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_event_2eproto_getter, &descriptor_table_event_2eproto_once,
      file_level_metadata_event_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace EventNS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EventNS::Event* Arena::CreateMaybeMessage< ::EventNS::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::EventMsg* Arena::CreateMaybeMessage< ::EventNS::EventMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::EventMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::EngineOnOff* Arena::CreateMaybeMessage< ::EventNS::EngineOnOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::EngineOnOff >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::BluetoothInfo* Arena::CreateMaybeMessage< ::EventNS::BluetoothInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::BluetoothInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::BatteryInfo* Arena::CreateMaybeMessage< ::EventNS::BatteryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::BatteryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::SKFaultInfo* Arena::CreateMaybeMessage< ::EventNS::SKFaultInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::SKFaultInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::SideStandInfo* Arena::CreateMaybeMessage< ::EventNS::SideStandInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::SideStandInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::LampInfo* Arena::CreateMaybeMessage< ::EventNS::LampInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::LampInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::SeatBucketOpenClose* Arena::CreateMaybeMessage< ::EventNS::SeatBucketOpenClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::SeatBucketOpenClose >(arena);
}
template<> PROTOBUF_NOINLINE ::EventNS::EventAck* Arena::CreateMaybeMessage< ::EventNS::EventAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EventNS::EventAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
