// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "status.pb.h"
#include "diagnose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_2eproto;
namespace ControlNS {
class APN;
struct APNDefaultTypeInternal;
extern APNDefaultTypeInternal _APN_default_instance_;
class Control;
struct ControlDefaultTypeInternal;
extern ControlDefaultTypeInternal _Control_default_instance_;
class ControlAPNNamePara;
struct ControlAPNNameParaDefaultTypeInternal;
extern ControlAPNNameParaDefaultTypeInternal _ControlAPNNamePara_default_instance_;
class ControlClearFencePara;
struct ControlClearFenceParaDefaultTypeInternal;
extern ControlClearFenceParaDefaultTypeInternal _ControlClearFencePara_default_instance_;
class ControlEnginePara;
struct ControlEngineParaDefaultTypeInternal;
extern ControlEngineParaDefaultTypeInternal _ControlEnginePara_default_instance_;
class ControlEngineResponse;
struct ControlEngineResponseDefaultTypeInternal;
extern ControlEngineResponseDefaultTypeInternal _ControlEngineResponse_default_instance_;
class ControlFindCarPara;
struct ControlFindCarParaDefaultTypeInternal;
extern ControlFindCarParaDefaultTypeInternal _ControlFindCarPara_default_instance_;
class ControlFindCarResponse;
struct ControlFindCarResponseDefaultTypeInternal;
extern ControlFindCarResponseDefaultTypeInternal _ControlFindCarResponse_default_instance_;
class ControlGearReportResponse;
struct ControlGearReportResponseDefaultTypeInternal;
extern ControlGearReportResponseDefaultTypeInternal _ControlGearReportResponse_default_instance_;
class ControlGetAPNNameResponse;
struct ControlGetAPNNameResponseDefaultTypeInternal;
extern ControlGetAPNNameResponseDefaultTypeInternal _ControlGetAPNNameResponse_default_instance_;
class ControlGetECUVersionPara;
struct ControlGetECUVersionParaDefaultTypeInternal;
extern ControlGetECUVersionParaDefaultTypeInternal _ControlGetECUVersionPara_default_instance_;
class ControlGetECUVersionResponse;
struct ControlGetECUVersionResponseDefaultTypeInternal;
extern ControlGetECUVersionResponseDefaultTypeInternal _ControlGetECUVersionResponse_default_instance_;
class ControlGetPositionPara;
struct ControlGetPositionParaDefaultTypeInternal;
extern ControlGetPositionParaDefaultTypeInternal _ControlGetPositionPara_default_instance_;
class ControlGetPositionResponse;
struct ControlGetPositionResponseDefaultTypeInternal;
extern ControlGetPositionResponseDefaultTypeInternal _ControlGetPositionResponse_default_instance_;
class ControlGetSignalIntensityPara;
struct ControlGetSignalIntensityParaDefaultTypeInternal;
extern ControlGetSignalIntensityParaDefaultTypeInternal _ControlGetSignalIntensityPara_default_instance_;
class ControlGetSignalIntensityResponse;
struct ControlGetSignalIntensityResponseDefaultTypeInternal;
extern ControlGetSignalIntensityResponseDefaultTypeInternal _ControlGetSignalIntensityResponse_default_instance_;
class ControlGetTPMSPara;
struct ControlGetTPMSParaDefaultTypeInternal;
extern ControlGetTPMSParaDefaultTypeInternal _ControlGetTPMSPara_default_instance_;
class ControlGetTPMSResponse;
struct ControlGetTPMSResponseDefaultTypeInternal;
extern ControlGetTPMSResponseDefaultTypeInternal _ControlGetTPMSResponse_default_instance_;
class ControlHeatHandleBarPara;
struct ControlHeatHandleBarParaDefaultTypeInternal;
extern ControlHeatHandleBarParaDefaultTypeInternal _ControlHeatHandleBarPara_default_instance_;
class ControlHeatHandleBarResponse;
struct ControlHeatHandleBarResponseDefaultTypeInternal;
extern ControlHeatHandleBarResponseDefaultTypeInternal _ControlHeatHandleBarResponse_default_instance_;
class ControlHeatReservePara;
struct ControlHeatReserveParaDefaultTypeInternal;
extern ControlHeatReserveParaDefaultTypeInternal _ControlHeatReservePara_default_instance_;
class ControlHeatReserveResponse;
struct ControlHeatReserveResponseDefaultTypeInternal;
extern ControlHeatReserveResponseDefaultTypeInternal _ControlHeatReserveResponse_default_instance_;
class ControlHeatSeatPara;
struct ControlHeatSeatParaDefaultTypeInternal;
extern ControlHeatSeatParaDefaultTypeInternal _ControlHeatSeatPara_default_instance_;
class ControlHeatSeatResponse;
struct ControlHeatSeatResponseDefaultTypeInternal;
extern ControlHeatSeatResponseDefaultTypeInternal _ControlHeatSeatResponse_default_instance_;
class ControlResponse;
struct ControlResponseDefaultTypeInternal;
extern ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
class ControlSetAPNNameResponse;
struct ControlSetAPNNameResponseDefaultTypeInternal;
extern ControlSetAPNNameResponseDefaultTypeInternal _ControlSetAPNNameResponse_default_instance_;
class ControlSetFenceResponse;
struct ControlSetFenceResponseDefaultTypeInternal;
extern ControlSetFenceResponseDefaultTypeInternal _ControlSetFenceResponse_default_instance_;
class ControlSetFrequencyPara;
struct ControlSetFrequencyParaDefaultTypeInternal;
extern ControlSetFrequencyParaDefaultTypeInternal _ControlSetFrequencyPara_default_instance_;
class ControlSetFrequencyResponse;
struct ControlSetFrequencyResponseDefaultTypeInternal;
extern ControlSetFrequencyResponseDefaultTypeInternal _ControlSetFrequencyResponse_default_instance_;
class ControlSetPolygonFencePara;
struct ControlSetPolygonFenceParaDefaultTypeInternal;
extern ControlSetPolygonFenceParaDefaultTypeInternal _ControlSetPolygonFencePara_default_instance_;
class ControlSetRoundFencePara;
struct ControlSetRoundFenceParaDefaultTypeInternal;
extern ControlSetRoundFenceParaDefaultTypeInternal _ControlSetRoundFencePara_default_instance_;
class ControlSetSentinelModePara;
struct ControlSetSentinelModeParaDefaultTypeInternal;
extern ControlSetSentinelModeParaDefaultTypeInternal _ControlSetSentinelModePara_default_instance_;
class ControlSetSentinelModeResponse;
struct ControlSetSentinelModeResponseDefaultTypeInternal;
extern ControlSetSentinelModeResponseDefaultTypeInternal _ControlSetSentinelModeResponse_default_instance_;
class ControlTakeParkingPhotoPara;
struct ControlTakeParkingPhotoParaDefaultTypeInternal;
extern ControlTakeParkingPhotoParaDefaultTypeInternal _ControlTakeParkingPhotoPara_default_instance_;
class ControlTakeParkingPhotoResponse;
struct ControlTakeParkingPhotoResponseDefaultTypeInternal;
extern ControlTakeParkingPhotoResponseDefaultTypeInternal _ControlTakeParkingPhotoResponse_default_instance_;
class ECUVersion;
struct ECUVersionDefaultTypeInternal;
extern ECUVersionDefaultTypeInternal _ECUVersion_default_instance_;
class Parameters;
struct ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace ControlNS
PROTOBUF_NAMESPACE_OPEN
template<> ::ControlNS::APN* Arena::CreateMaybeMessage<::ControlNS::APN>(Arena*);
template<> ::ControlNS::Control* Arena::CreateMaybeMessage<::ControlNS::Control>(Arena*);
template<> ::ControlNS::ControlAPNNamePara* Arena::CreateMaybeMessage<::ControlNS::ControlAPNNamePara>(Arena*);
template<> ::ControlNS::ControlClearFencePara* Arena::CreateMaybeMessage<::ControlNS::ControlClearFencePara>(Arena*);
template<> ::ControlNS::ControlEnginePara* Arena::CreateMaybeMessage<::ControlNS::ControlEnginePara>(Arena*);
template<> ::ControlNS::ControlEngineResponse* Arena::CreateMaybeMessage<::ControlNS::ControlEngineResponse>(Arena*);
template<> ::ControlNS::ControlFindCarPara* Arena::CreateMaybeMessage<::ControlNS::ControlFindCarPara>(Arena*);
template<> ::ControlNS::ControlFindCarResponse* Arena::CreateMaybeMessage<::ControlNS::ControlFindCarResponse>(Arena*);
template<> ::ControlNS::ControlGearReportResponse* Arena::CreateMaybeMessage<::ControlNS::ControlGearReportResponse>(Arena*);
template<> ::ControlNS::ControlGetAPNNameResponse* Arena::CreateMaybeMessage<::ControlNS::ControlGetAPNNameResponse>(Arena*);
template<> ::ControlNS::ControlGetECUVersionPara* Arena::CreateMaybeMessage<::ControlNS::ControlGetECUVersionPara>(Arena*);
template<> ::ControlNS::ControlGetECUVersionResponse* Arena::CreateMaybeMessage<::ControlNS::ControlGetECUVersionResponse>(Arena*);
template<> ::ControlNS::ControlGetPositionPara* Arena::CreateMaybeMessage<::ControlNS::ControlGetPositionPara>(Arena*);
template<> ::ControlNS::ControlGetPositionResponse* Arena::CreateMaybeMessage<::ControlNS::ControlGetPositionResponse>(Arena*);
template<> ::ControlNS::ControlGetSignalIntensityPara* Arena::CreateMaybeMessage<::ControlNS::ControlGetSignalIntensityPara>(Arena*);
template<> ::ControlNS::ControlGetSignalIntensityResponse* Arena::CreateMaybeMessage<::ControlNS::ControlGetSignalIntensityResponse>(Arena*);
template<> ::ControlNS::ControlGetTPMSPara* Arena::CreateMaybeMessage<::ControlNS::ControlGetTPMSPara>(Arena*);
template<> ::ControlNS::ControlGetTPMSResponse* Arena::CreateMaybeMessage<::ControlNS::ControlGetTPMSResponse>(Arena*);
template<> ::ControlNS::ControlHeatHandleBarPara* Arena::CreateMaybeMessage<::ControlNS::ControlHeatHandleBarPara>(Arena*);
template<> ::ControlNS::ControlHeatHandleBarResponse* Arena::CreateMaybeMessage<::ControlNS::ControlHeatHandleBarResponse>(Arena*);
template<> ::ControlNS::ControlHeatReservePara* Arena::CreateMaybeMessage<::ControlNS::ControlHeatReservePara>(Arena*);
template<> ::ControlNS::ControlHeatReserveResponse* Arena::CreateMaybeMessage<::ControlNS::ControlHeatReserveResponse>(Arena*);
template<> ::ControlNS::ControlHeatSeatPara* Arena::CreateMaybeMessage<::ControlNS::ControlHeatSeatPara>(Arena*);
template<> ::ControlNS::ControlHeatSeatResponse* Arena::CreateMaybeMessage<::ControlNS::ControlHeatSeatResponse>(Arena*);
template<> ::ControlNS::ControlResponse* Arena::CreateMaybeMessage<::ControlNS::ControlResponse>(Arena*);
template<> ::ControlNS::ControlSetAPNNameResponse* Arena::CreateMaybeMessage<::ControlNS::ControlSetAPNNameResponse>(Arena*);
template<> ::ControlNS::ControlSetFenceResponse* Arena::CreateMaybeMessage<::ControlNS::ControlSetFenceResponse>(Arena*);
template<> ::ControlNS::ControlSetFrequencyPara* Arena::CreateMaybeMessage<::ControlNS::ControlSetFrequencyPara>(Arena*);
template<> ::ControlNS::ControlSetFrequencyResponse* Arena::CreateMaybeMessage<::ControlNS::ControlSetFrequencyResponse>(Arena*);
template<> ::ControlNS::ControlSetPolygonFencePara* Arena::CreateMaybeMessage<::ControlNS::ControlSetPolygonFencePara>(Arena*);
template<> ::ControlNS::ControlSetRoundFencePara* Arena::CreateMaybeMessage<::ControlNS::ControlSetRoundFencePara>(Arena*);
template<> ::ControlNS::ControlSetSentinelModePara* Arena::CreateMaybeMessage<::ControlNS::ControlSetSentinelModePara>(Arena*);
template<> ::ControlNS::ControlSetSentinelModeResponse* Arena::CreateMaybeMessage<::ControlNS::ControlSetSentinelModeResponse>(Arena*);
template<> ::ControlNS::ControlTakeParkingPhotoPara* Arena::CreateMaybeMessage<::ControlNS::ControlTakeParkingPhotoPara>(Arena*);
template<> ::ControlNS::ControlTakeParkingPhotoResponse* Arena::CreateMaybeMessage<::ControlNS::ControlTakeParkingPhotoResponse>(Arena*);
template<> ::ControlNS::ECUVersion* Arena::CreateMaybeMessage<::ControlNS::ECUVersion>(Arena*);
template<> ::ControlNS::Parameters* Arena::CreateMaybeMessage<::ControlNS::Parameters>(Arena*);
template<> ::ControlNS::Point* Arena::CreateMaybeMessage<::ControlNS::Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ControlNS {

enum ControlHeatHandleBarPara_HandleType : int {
  ControlHeatHandleBarPara_HandleType_ALL = 0,
  ControlHeatHandleBarPara_HandleType_LEFT = 1,
  ControlHeatHandleBarPara_HandleType_RIGHT = 2,
  ControlHeatHandleBarPara_HandleType_ControlHeatHandleBarPara_HandleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlHeatHandleBarPara_HandleType_ControlHeatHandleBarPara_HandleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlHeatHandleBarPara_HandleType_IsValid(int value);
constexpr ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara_HandleType_HandleType_MIN = ControlHeatHandleBarPara_HandleType_ALL;
constexpr ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara_HandleType_HandleType_MAX = ControlHeatHandleBarPara_HandleType_RIGHT;
constexpr int ControlHeatHandleBarPara_HandleType_HandleType_ARRAYSIZE = ControlHeatHandleBarPara_HandleType_HandleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlHeatHandleBarPara_HandleType_descriptor();
template<typename T>
inline const std::string& ControlHeatHandleBarPara_HandleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlHeatHandleBarPara_HandleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlHeatHandleBarPara_HandleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlHeatHandleBarPara_HandleType_descriptor(), enum_t_value);
}
inline bool ControlHeatHandleBarPara_HandleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlHeatHandleBarPara_HandleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlHeatHandleBarPara_HandleType>(
    ControlHeatHandleBarPara_HandleType_descriptor(), name, value);
}
enum ControlCommand : int {
  IN_VALID = 0,
  CONTROL_ENGINE_COMMAND = 1,
  CONTROL_FIND_CAR_COMMAND = 2,
  ENABLE_GEAR_REPORT = 3,
  CONTROL_GET_POSITION = 4,
  CONTROL_GET_TIER_PRESSURE = 5,
  CONTROL_TAKE_PARKING_PHOTO = 6,
  CONTROL_SET_ROUND_FENCE = 7,
  CONTROL_SET_POLYGON_FENCE = 8,
  CONTROL_CLEAR_FENCE = 9,
  CONTROL_HEAT_SEAT = 10,
  CONTROL_HEAT_HANDLEBAR = 11,
  CONTROL_HEAT_RESERVE = 12,
  CONTROL_GET_SIGNAL_INTENSITY = 13,
  CONTROL_GET_APN_NAME = 14,
  CONTROL_SET_FREQUENCY = 15,
  CONTROL_SET_APN_NAME = 16,
  CONTROL_SET_SENTINEL_MODE = 17,
  CONTROL_GET_ECU_VERSION = 18,
  ControlCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlCommand_IsValid(int value);
constexpr ControlCommand ControlCommand_MIN = IN_VALID;
constexpr ControlCommand ControlCommand_MAX = CONTROL_GET_ECU_VERSION;
constexpr int ControlCommand_ARRAYSIZE = ControlCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlCommand_descriptor();
template<typename T>
inline const std::string& ControlCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlCommand_descriptor(), enum_t_value);
}
inline bool ControlCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlCommand>(
    ControlCommand_descriptor(), name, value);
}
enum EngineOpt : int {
  START = 0,
  STOP = 1,
  EngineOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EngineOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EngineOpt_IsValid(int value);
constexpr EngineOpt EngineOpt_MIN = START;
constexpr EngineOpt EngineOpt_MAX = STOP;
constexpr int EngineOpt_ARRAYSIZE = EngineOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineOpt_descriptor();
template<typename T>
inline const std::string& EngineOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EngineOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EngineOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EngineOpt_descriptor(), enum_t_value);
}
inline bool EngineOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EngineOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EngineOpt>(
    EngineOpt_descriptor(), name, value);
}
enum FindCarOpt : int {
  LIGHT = 0,
  HORN = 1,
  LIGHT_HORN = 2,
  FindCarOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FindCarOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FindCarOpt_IsValid(int value);
constexpr FindCarOpt FindCarOpt_MIN = LIGHT;
constexpr FindCarOpt FindCarOpt_MAX = LIGHT_HORN;
constexpr int FindCarOpt_ARRAYSIZE = FindCarOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindCarOpt_descriptor();
template<typename T>
inline const std::string& FindCarOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FindCarOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FindCarOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FindCarOpt_descriptor(), enum_t_value);
}
inline bool FindCarOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FindCarOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FindCarOpt>(
    FindCarOpt_descriptor(), name, value);
}
enum CameraOpt : int {
  ALL = 0,
  FRONT = 1,
  REAR = 2,
  LEFT = 3,
  RIGHT = 4,
  CameraOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CameraOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CameraOpt_IsValid(int value);
constexpr CameraOpt CameraOpt_MIN = ALL;
constexpr CameraOpt CameraOpt_MAX = RIGHT;
constexpr int CameraOpt_ARRAYSIZE = CameraOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraOpt_descriptor();
template<typename T>
inline const std::string& CameraOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraOpt_descriptor(), enum_t_value);
}
inline bool CameraOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraOpt>(
    CameraOpt_descriptor(), name, value);
}
enum SWITCH : int {
  OFF = 0,
  ON = 1,
  SWITCH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SWITCH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SWITCH_IsValid(int value);
constexpr SWITCH SWITCH_MIN = OFF;
constexpr SWITCH SWITCH_MAX = ON;
constexpr int SWITCH_ARRAYSIZE = SWITCH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SWITCH_descriptor();
template<typename T>
inline const std::string& SWITCH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SWITCH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SWITCH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SWITCH_descriptor(), enum_t_value);
}
inline bool SWITCH_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SWITCH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SWITCH>(
    SWITCH_descriptor(), name, value);
}
// ===================================================================

class Control final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.Control) */ {
 public:
  inline Control() : Control(nullptr) {}
  ~Control() override;
  explicit constexpr Control(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Control(const Control& from);
  Control(Control&& from) noexcept
    : Control() {
    *this = ::std::move(from);
  }

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Control& operator=(Control&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Control& default_instance() {
    return *internal_default_instance();
  }
  static inline const Control* internal_default_instance() {
    return reinterpret_cast<const Control*>(
               &_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Control& a, Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Control* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Control* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Control>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Control& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Control& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Control* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.Control";
  }
  protected:
  explicit Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIDFieldNumber = 1,
    kControlResponseFieldNumber = 4,
    kParaFieldNumber = 6,
    kCommandFieldNumber = 2,
    kControlCommandFieldNumber = 3,
    kParaTypeFieldNumber = 5,
  };
  // string taskID = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .ControlNS.ControlResponse controlResponse = 4;
  bool has_controlresponse() const;
  private:
  bool _internal_has_controlresponse() const;
  public:
  void clear_controlresponse();
  const ::ControlNS::ControlResponse& controlresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlResponse* release_controlresponse();
  ::ControlNS::ControlResponse* mutable_controlresponse();
  void set_allocated_controlresponse(::ControlNS::ControlResponse* controlresponse);
  private:
  const ::ControlNS::ControlResponse& _internal_controlresponse() const;
  ::ControlNS::ControlResponse* _internal_mutable_controlresponse();
  public:
  void unsafe_arena_set_allocated_controlresponse(
      ::ControlNS::ControlResponse* controlresponse);
  ::ControlNS::ControlResponse* unsafe_arena_release_controlresponse();

  // .ControlNS.Parameters para = 6;
  bool has_para() const;
  private:
  bool _internal_has_para() const;
  public:
  void clear_para();
  const ::ControlNS::Parameters& para() const;
  PROTOBUF_NODISCARD ::ControlNS::Parameters* release_para();
  ::ControlNS::Parameters* mutable_para();
  void set_allocated_para(::ControlNS::Parameters* para);
  private:
  const ::ControlNS::Parameters& _internal_para() const;
  ::ControlNS::Parameters* _internal_mutable_para();
  public:
  void unsafe_arena_set_allocated_para(
      ::ControlNS::Parameters* para);
  ::ControlNS::Parameters* unsafe_arena_release_para();

  // uint32 command = 2;
  void clear_command();
  uint32_t command() const;
  void set_command(uint32_t value);
  private:
  uint32_t _internal_command() const;
  void _internal_set_command(uint32_t value);
  public:

  // .ControlNS.ControlCommand controlCommand = 3;
  void clear_controlcommand();
  ::ControlNS::ControlCommand controlcommand() const;
  void set_controlcommand(::ControlNS::ControlCommand value);
  private:
  ::ControlNS::ControlCommand _internal_controlcommand() const;
  void _internal_set_controlcommand(::ControlNS::ControlCommand value);
  public:

  // uint32 paraType = 5;
  void clear_paratype();
  uint32_t paratype() const;
  void set_paratype(uint32_t value);
  private:
  uint32_t _internal_paratype() const;
  void _internal_set_paratype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.Control)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::ControlNS::ControlResponse* controlresponse_;
  ::ControlNS::Parameters* para_;
  uint32_t command_;
  int controlcommand_;
  uint32_t paratype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlResponse) */ {
 public:
  inline ControlResponse() : ControlResponse(nullptr) {}
  ~ControlResponse() override;
  explicit constexpr ControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlResponse(const ControlResponse& from);
  ControlResponse(ControlResponse&& from) noexcept
    : ControlResponse() {
    *this = ::std::move(from);
  }

  inline ControlResponse& operator=(const ControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlResponse& operator=(ControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlResponse* internal_default_instance() {
    return reinterpret_cast<const ControlResponse*>(
               &_ControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlResponse& a, ControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlResponse";
  }
  protected:
  explicit ControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlEngineResponseFieldNumber = 1,
    kControlFindCarResponseFieldNumber = 2,
    kControlGearReportResponseFieldNumber = 3,
    kControlGetPositionResponseFieldNumber = 4,
    kControlGetTPMSResponseFieldNumber = 5,
    kControlTakeParkingPhotoResponseFieldNumber = 6,
    kControlSetRoundFenceResponseFieldNumber = 7,
    kControlHeatSeatResponseFieldNumber = 8,
    kControlHeatHandleBarResponseFieldNumber = 9,
    kControlHeatReserveResponseFieldNumber = 10,
    kControlGetSignalIntensityResponseFieldNumber = 11,
    kControlGetAPNNameResponseFieldNumber = 12,
    kControlSetFrequencyResponseFieldNumber = 13,
    kControlSetAPNNameResponseFieldNumber = 14,
    kControlSetSentinelModeResponseFieldNumber = 15,
    kControlGetECUVersionResponseFieldNumber = 16,
  };
  // .ControlNS.ControlEngineResponse controlEngineResponse = 1;
  bool has_controlengineresponse() const;
  private:
  bool _internal_has_controlengineresponse() const;
  public:
  void clear_controlengineresponse();
  const ::ControlNS::ControlEngineResponse& controlengineresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlEngineResponse* release_controlengineresponse();
  ::ControlNS::ControlEngineResponse* mutable_controlengineresponse();
  void set_allocated_controlengineresponse(::ControlNS::ControlEngineResponse* controlengineresponse);
  private:
  const ::ControlNS::ControlEngineResponse& _internal_controlengineresponse() const;
  ::ControlNS::ControlEngineResponse* _internal_mutable_controlengineresponse();
  public:
  void unsafe_arena_set_allocated_controlengineresponse(
      ::ControlNS::ControlEngineResponse* controlengineresponse);
  ::ControlNS::ControlEngineResponse* unsafe_arena_release_controlengineresponse();

  // .ControlNS.ControlFindCarResponse controlFindCarResponse = 2;
  bool has_controlfindcarresponse() const;
  private:
  bool _internal_has_controlfindcarresponse() const;
  public:
  void clear_controlfindcarresponse();
  const ::ControlNS::ControlFindCarResponse& controlfindcarresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlFindCarResponse* release_controlfindcarresponse();
  ::ControlNS::ControlFindCarResponse* mutable_controlfindcarresponse();
  void set_allocated_controlfindcarresponse(::ControlNS::ControlFindCarResponse* controlfindcarresponse);
  private:
  const ::ControlNS::ControlFindCarResponse& _internal_controlfindcarresponse() const;
  ::ControlNS::ControlFindCarResponse* _internal_mutable_controlfindcarresponse();
  public:
  void unsafe_arena_set_allocated_controlfindcarresponse(
      ::ControlNS::ControlFindCarResponse* controlfindcarresponse);
  ::ControlNS::ControlFindCarResponse* unsafe_arena_release_controlfindcarresponse();

  // .ControlNS.ControlGearReportResponse controlGearReportResponse = 3;
  bool has_controlgearreportresponse() const;
  private:
  bool _internal_has_controlgearreportresponse() const;
  public:
  void clear_controlgearreportresponse();
  const ::ControlNS::ControlGearReportResponse& controlgearreportresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGearReportResponse* release_controlgearreportresponse();
  ::ControlNS::ControlGearReportResponse* mutable_controlgearreportresponse();
  void set_allocated_controlgearreportresponse(::ControlNS::ControlGearReportResponse* controlgearreportresponse);
  private:
  const ::ControlNS::ControlGearReportResponse& _internal_controlgearreportresponse() const;
  ::ControlNS::ControlGearReportResponse* _internal_mutable_controlgearreportresponse();
  public:
  void unsafe_arena_set_allocated_controlgearreportresponse(
      ::ControlNS::ControlGearReportResponse* controlgearreportresponse);
  ::ControlNS::ControlGearReportResponse* unsafe_arena_release_controlgearreportresponse();

  // .ControlNS.ControlGetPositionResponse controlGetPositionResponse = 4;
  bool has_controlgetpositionresponse() const;
  private:
  bool _internal_has_controlgetpositionresponse() const;
  public:
  void clear_controlgetpositionresponse();
  const ::ControlNS::ControlGetPositionResponse& controlgetpositionresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetPositionResponse* release_controlgetpositionresponse();
  ::ControlNS::ControlGetPositionResponse* mutable_controlgetpositionresponse();
  void set_allocated_controlgetpositionresponse(::ControlNS::ControlGetPositionResponse* controlgetpositionresponse);
  private:
  const ::ControlNS::ControlGetPositionResponse& _internal_controlgetpositionresponse() const;
  ::ControlNS::ControlGetPositionResponse* _internal_mutable_controlgetpositionresponse();
  public:
  void unsafe_arena_set_allocated_controlgetpositionresponse(
      ::ControlNS::ControlGetPositionResponse* controlgetpositionresponse);
  ::ControlNS::ControlGetPositionResponse* unsafe_arena_release_controlgetpositionresponse();

  // .ControlNS.ControlGetTPMSResponse controlGetTPMSResponse = 5;
  bool has_controlgettpmsresponse() const;
  private:
  bool _internal_has_controlgettpmsresponse() const;
  public:
  void clear_controlgettpmsresponse();
  const ::ControlNS::ControlGetTPMSResponse& controlgettpmsresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetTPMSResponse* release_controlgettpmsresponse();
  ::ControlNS::ControlGetTPMSResponse* mutable_controlgettpmsresponse();
  void set_allocated_controlgettpmsresponse(::ControlNS::ControlGetTPMSResponse* controlgettpmsresponse);
  private:
  const ::ControlNS::ControlGetTPMSResponse& _internal_controlgettpmsresponse() const;
  ::ControlNS::ControlGetTPMSResponse* _internal_mutable_controlgettpmsresponse();
  public:
  void unsafe_arena_set_allocated_controlgettpmsresponse(
      ::ControlNS::ControlGetTPMSResponse* controlgettpmsresponse);
  ::ControlNS::ControlGetTPMSResponse* unsafe_arena_release_controlgettpmsresponse();

  // .ControlNS.ControlTakeParkingPhotoResponse controlTakeParkingPhotoResponse = 6;
  bool has_controltakeparkingphotoresponse() const;
  private:
  bool _internal_has_controltakeparkingphotoresponse() const;
  public:
  void clear_controltakeparkingphotoresponse();
  const ::ControlNS::ControlTakeParkingPhotoResponse& controltakeparkingphotoresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlTakeParkingPhotoResponse* release_controltakeparkingphotoresponse();
  ::ControlNS::ControlTakeParkingPhotoResponse* mutable_controltakeparkingphotoresponse();
  void set_allocated_controltakeparkingphotoresponse(::ControlNS::ControlTakeParkingPhotoResponse* controltakeparkingphotoresponse);
  private:
  const ::ControlNS::ControlTakeParkingPhotoResponse& _internal_controltakeparkingphotoresponse() const;
  ::ControlNS::ControlTakeParkingPhotoResponse* _internal_mutable_controltakeparkingphotoresponse();
  public:
  void unsafe_arena_set_allocated_controltakeparkingphotoresponse(
      ::ControlNS::ControlTakeParkingPhotoResponse* controltakeparkingphotoresponse);
  ::ControlNS::ControlTakeParkingPhotoResponse* unsafe_arena_release_controltakeparkingphotoresponse();

  // .ControlNS.ControlSetFenceResponse controlSetRoundFenceResponse = 7;
  bool has_controlsetroundfenceresponse() const;
  private:
  bool _internal_has_controlsetroundfenceresponse() const;
  public:
  void clear_controlsetroundfenceresponse();
  const ::ControlNS::ControlSetFenceResponse& controlsetroundfenceresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetFenceResponse* release_controlsetroundfenceresponse();
  ::ControlNS::ControlSetFenceResponse* mutable_controlsetroundfenceresponse();
  void set_allocated_controlsetroundfenceresponse(::ControlNS::ControlSetFenceResponse* controlsetroundfenceresponse);
  private:
  const ::ControlNS::ControlSetFenceResponse& _internal_controlsetroundfenceresponse() const;
  ::ControlNS::ControlSetFenceResponse* _internal_mutable_controlsetroundfenceresponse();
  public:
  void unsafe_arena_set_allocated_controlsetroundfenceresponse(
      ::ControlNS::ControlSetFenceResponse* controlsetroundfenceresponse);
  ::ControlNS::ControlSetFenceResponse* unsafe_arena_release_controlsetroundfenceresponse();

  // .ControlNS.ControlHeatSeatResponse controlHeatSeatResponse = 8;
  bool has_controlheatseatresponse() const;
  private:
  bool _internal_has_controlheatseatresponse() const;
  public:
  void clear_controlheatseatresponse();
  const ::ControlNS::ControlHeatSeatResponse& controlheatseatresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatSeatResponse* release_controlheatseatresponse();
  ::ControlNS::ControlHeatSeatResponse* mutable_controlheatseatresponse();
  void set_allocated_controlheatseatresponse(::ControlNS::ControlHeatSeatResponse* controlheatseatresponse);
  private:
  const ::ControlNS::ControlHeatSeatResponse& _internal_controlheatseatresponse() const;
  ::ControlNS::ControlHeatSeatResponse* _internal_mutable_controlheatseatresponse();
  public:
  void unsafe_arena_set_allocated_controlheatseatresponse(
      ::ControlNS::ControlHeatSeatResponse* controlheatseatresponse);
  ::ControlNS::ControlHeatSeatResponse* unsafe_arena_release_controlheatseatresponse();

  // .ControlNS.ControlHeatHandleBarResponse controlHeatHandleBarResponse = 9;
  bool has_controlheathandlebarresponse() const;
  private:
  bool _internal_has_controlheathandlebarresponse() const;
  public:
  void clear_controlheathandlebarresponse();
  const ::ControlNS::ControlHeatHandleBarResponse& controlheathandlebarresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatHandleBarResponse* release_controlheathandlebarresponse();
  ::ControlNS::ControlHeatHandleBarResponse* mutable_controlheathandlebarresponse();
  void set_allocated_controlheathandlebarresponse(::ControlNS::ControlHeatHandleBarResponse* controlheathandlebarresponse);
  private:
  const ::ControlNS::ControlHeatHandleBarResponse& _internal_controlheathandlebarresponse() const;
  ::ControlNS::ControlHeatHandleBarResponse* _internal_mutable_controlheathandlebarresponse();
  public:
  void unsafe_arena_set_allocated_controlheathandlebarresponse(
      ::ControlNS::ControlHeatHandleBarResponse* controlheathandlebarresponse);
  ::ControlNS::ControlHeatHandleBarResponse* unsafe_arena_release_controlheathandlebarresponse();

  // .ControlNS.ControlHeatReserveResponse controlHeatReserveResponse = 10;
  bool has_controlheatreserveresponse() const;
  private:
  bool _internal_has_controlheatreserveresponse() const;
  public:
  void clear_controlheatreserveresponse();
  const ::ControlNS::ControlHeatReserveResponse& controlheatreserveresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatReserveResponse* release_controlheatreserveresponse();
  ::ControlNS::ControlHeatReserveResponse* mutable_controlheatreserveresponse();
  void set_allocated_controlheatreserveresponse(::ControlNS::ControlHeatReserveResponse* controlheatreserveresponse);
  private:
  const ::ControlNS::ControlHeatReserveResponse& _internal_controlheatreserveresponse() const;
  ::ControlNS::ControlHeatReserveResponse* _internal_mutable_controlheatreserveresponse();
  public:
  void unsafe_arena_set_allocated_controlheatreserveresponse(
      ::ControlNS::ControlHeatReserveResponse* controlheatreserveresponse);
  ::ControlNS::ControlHeatReserveResponse* unsafe_arena_release_controlheatreserveresponse();

  // .ControlNS.ControlGetSignalIntensityResponse controlGetSignalIntensityResponse = 11;
  bool has_controlgetsignalintensityresponse() const;
  private:
  bool _internal_has_controlgetsignalintensityresponse() const;
  public:
  void clear_controlgetsignalintensityresponse();
  const ::ControlNS::ControlGetSignalIntensityResponse& controlgetsignalintensityresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetSignalIntensityResponse* release_controlgetsignalintensityresponse();
  ::ControlNS::ControlGetSignalIntensityResponse* mutable_controlgetsignalintensityresponse();
  void set_allocated_controlgetsignalintensityresponse(::ControlNS::ControlGetSignalIntensityResponse* controlgetsignalintensityresponse);
  private:
  const ::ControlNS::ControlGetSignalIntensityResponse& _internal_controlgetsignalintensityresponse() const;
  ::ControlNS::ControlGetSignalIntensityResponse* _internal_mutable_controlgetsignalintensityresponse();
  public:
  void unsafe_arena_set_allocated_controlgetsignalintensityresponse(
      ::ControlNS::ControlGetSignalIntensityResponse* controlgetsignalintensityresponse);
  ::ControlNS::ControlGetSignalIntensityResponse* unsafe_arena_release_controlgetsignalintensityresponse();

  // .ControlNS.ControlGetAPNNameResponse controlGetAPNNameResponse = 12;
  bool has_controlgetapnnameresponse() const;
  private:
  bool _internal_has_controlgetapnnameresponse() const;
  public:
  void clear_controlgetapnnameresponse();
  const ::ControlNS::ControlGetAPNNameResponse& controlgetapnnameresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetAPNNameResponse* release_controlgetapnnameresponse();
  ::ControlNS::ControlGetAPNNameResponse* mutable_controlgetapnnameresponse();
  void set_allocated_controlgetapnnameresponse(::ControlNS::ControlGetAPNNameResponse* controlgetapnnameresponse);
  private:
  const ::ControlNS::ControlGetAPNNameResponse& _internal_controlgetapnnameresponse() const;
  ::ControlNS::ControlGetAPNNameResponse* _internal_mutable_controlgetapnnameresponse();
  public:
  void unsafe_arena_set_allocated_controlgetapnnameresponse(
      ::ControlNS::ControlGetAPNNameResponse* controlgetapnnameresponse);
  ::ControlNS::ControlGetAPNNameResponse* unsafe_arena_release_controlgetapnnameresponse();

  // .ControlNS.ControlSetFrequencyResponse controlSetFrequencyResponse = 13;
  bool has_controlsetfrequencyresponse() const;
  private:
  bool _internal_has_controlsetfrequencyresponse() const;
  public:
  void clear_controlsetfrequencyresponse();
  const ::ControlNS::ControlSetFrequencyResponse& controlsetfrequencyresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetFrequencyResponse* release_controlsetfrequencyresponse();
  ::ControlNS::ControlSetFrequencyResponse* mutable_controlsetfrequencyresponse();
  void set_allocated_controlsetfrequencyresponse(::ControlNS::ControlSetFrequencyResponse* controlsetfrequencyresponse);
  private:
  const ::ControlNS::ControlSetFrequencyResponse& _internal_controlsetfrequencyresponse() const;
  ::ControlNS::ControlSetFrequencyResponse* _internal_mutable_controlsetfrequencyresponse();
  public:
  void unsafe_arena_set_allocated_controlsetfrequencyresponse(
      ::ControlNS::ControlSetFrequencyResponse* controlsetfrequencyresponse);
  ::ControlNS::ControlSetFrequencyResponse* unsafe_arena_release_controlsetfrequencyresponse();

  // .ControlNS.ControlSetAPNNameResponse controlSetAPNNameResponse = 14;
  bool has_controlsetapnnameresponse() const;
  private:
  bool _internal_has_controlsetapnnameresponse() const;
  public:
  void clear_controlsetapnnameresponse();
  const ::ControlNS::ControlSetAPNNameResponse& controlsetapnnameresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetAPNNameResponse* release_controlsetapnnameresponse();
  ::ControlNS::ControlSetAPNNameResponse* mutable_controlsetapnnameresponse();
  void set_allocated_controlsetapnnameresponse(::ControlNS::ControlSetAPNNameResponse* controlsetapnnameresponse);
  private:
  const ::ControlNS::ControlSetAPNNameResponse& _internal_controlsetapnnameresponse() const;
  ::ControlNS::ControlSetAPNNameResponse* _internal_mutable_controlsetapnnameresponse();
  public:
  void unsafe_arena_set_allocated_controlsetapnnameresponse(
      ::ControlNS::ControlSetAPNNameResponse* controlsetapnnameresponse);
  ::ControlNS::ControlSetAPNNameResponse* unsafe_arena_release_controlsetapnnameresponse();

  // .ControlNS.ControlSetSentinelModeResponse controlSetSentinelModeResponse = 15;
  bool has_controlsetsentinelmoderesponse() const;
  private:
  bool _internal_has_controlsetsentinelmoderesponse() const;
  public:
  void clear_controlsetsentinelmoderesponse();
  const ::ControlNS::ControlSetSentinelModeResponse& controlsetsentinelmoderesponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetSentinelModeResponse* release_controlsetsentinelmoderesponse();
  ::ControlNS::ControlSetSentinelModeResponse* mutable_controlsetsentinelmoderesponse();
  void set_allocated_controlsetsentinelmoderesponse(::ControlNS::ControlSetSentinelModeResponse* controlsetsentinelmoderesponse);
  private:
  const ::ControlNS::ControlSetSentinelModeResponse& _internal_controlsetsentinelmoderesponse() const;
  ::ControlNS::ControlSetSentinelModeResponse* _internal_mutable_controlsetsentinelmoderesponse();
  public:
  void unsafe_arena_set_allocated_controlsetsentinelmoderesponse(
      ::ControlNS::ControlSetSentinelModeResponse* controlsetsentinelmoderesponse);
  ::ControlNS::ControlSetSentinelModeResponse* unsafe_arena_release_controlsetsentinelmoderesponse();

  // .ControlNS.ControlGetECUVersionResponse controlGetECUVersionResponse = 16;
  bool has_controlgetecuversionresponse() const;
  private:
  bool _internal_has_controlgetecuversionresponse() const;
  public:
  void clear_controlgetecuversionresponse();
  const ::ControlNS::ControlGetECUVersionResponse& controlgetecuversionresponse() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetECUVersionResponse* release_controlgetecuversionresponse();
  ::ControlNS::ControlGetECUVersionResponse* mutable_controlgetecuversionresponse();
  void set_allocated_controlgetecuversionresponse(::ControlNS::ControlGetECUVersionResponse* controlgetecuversionresponse);
  private:
  const ::ControlNS::ControlGetECUVersionResponse& _internal_controlgetecuversionresponse() const;
  ::ControlNS::ControlGetECUVersionResponse* _internal_mutable_controlgetecuversionresponse();
  public:
  void unsafe_arena_set_allocated_controlgetecuversionresponse(
      ::ControlNS::ControlGetECUVersionResponse* controlgetecuversionresponse);
  ::ControlNS::ControlGetECUVersionResponse* unsafe_arena_release_controlgetecuversionresponse();

  // @@protoc_insertion_point(class_scope:ControlNS.ControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ControlNS::ControlEngineResponse* controlengineresponse_;
  ::ControlNS::ControlFindCarResponse* controlfindcarresponse_;
  ::ControlNS::ControlGearReportResponse* controlgearreportresponse_;
  ::ControlNS::ControlGetPositionResponse* controlgetpositionresponse_;
  ::ControlNS::ControlGetTPMSResponse* controlgettpmsresponse_;
  ::ControlNS::ControlTakeParkingPhotoResponse* controltakeparkingphotoresponse_;
  ::ControlNS::ControlSetFenceResponse* controlsetroundfenceresponse_;
  ::ControlNS::ControlHeatSeatResponse* controlheatseatresponse_;
  ::ControlNS::ControlHeatHandleBarResponse* controlheathandlebarresponse_;
  ::ControlNS::ControlHeatReserveResponse* controlheatreserveresponse_;
  ::ControlNS::ControlGetSignalIntensityResponse* controlgetsignalintensityresponse_;
  ::ControlNS::ControlGetAPNNameResponse* controlgetapnnameresponse_;
  ::ControlNS::ControlSetFrequencyResponse* controlsetfrequencyresponse_;
  ::ControlNS::ControlSetAPNNameResponse* controlsetapnnameresponse_;
  ::ControlNS::ControlSetSentinelModeResponse* controlsetsentinelmoderesponse_;
  ::ControlNS::ControlGetECUVersionResponse* controlgetecuversionresponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class Parameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.Parameters) */ {
 public:
  inline Parameters() : Parameters(nullptr) {}
  ~Parameters() override;
  explicit constexpr Parameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameters(const Parameters& from);
  Parameters(Parameters&& from) noexcept
    : Parameters() {
    *this = ::std::move(from);
  }

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameters& operator=(Parameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Parameters& a, Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Parameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Parameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Parameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.Parameters";
  }
  protected:
  explicit Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlEngineParaFieldNumber = 1,
    kControlFindCarParaFieldNumber = 2,
    kControlGetPositionParaFieldNumber = 3,
    kControlGetTMPSParaFieldNumber = 4,
    kControlTakeParkingPhotoParaFieldNumber = 5,
    kControlSetRoundFenceParaFieldNumber = 6,
    kControlSetPolygonFenceParaFieldNumber = 7,
    kControlHeatSeatParaFieldNumber = 8,
    kControlHeatHandleBarParaFieldNumber = 9,
    kControlHeatReserveParaFieldNumber = 10,
    kControlGetSignalIntensityParaFieldNumber = 11,
    kControlAPNNameParaFieldNumber = 12,
    kControlSetFrequencyParaFieldNumber = 13,
    kControlClearFenceParaFieldNumber = 14,
    kControlSetSentinelModeParaFieldNumber = 15,
    kControlGetECUVersionParaFieldNumber = 16,
  };
  // .ControlNS.ControlEnginePara controlEnginePara = 1;
  bool has_controlenginepara() const;
  private:
  bool _internal_has_controlenginepara() const;
  public:
  void clear_controlenginepara();
  const ::ControlNS::ControlEnginePara& controlenginepara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlEnginePara* release_controlenginepara();
  ::ControlNS::ControlEnginePara* mutable_controlenginepara();
  void set_allocated_controlenginepara(::ControlNS::ControlEnginePara* controlenginepara);
  private:
  const ::ControlNS::ControlEnginePara& _internal_controlenginepara() const;
  ::ControlNS::ControlEnginePara* _internal_mutable_controlenginepara();
  public:
  void unsafe_arena_set_allocated_controlenginepara(
      ::ControlNS::ControlEnginePara* controlenginepara);
  ::ControlNS::ControlEnginePara* unsafe_arena_release_controlenginepara();

  // .ControlNS.ControlFindCarPara controlFindCarPara = 2;
  bool has_controlfindcarpara() const;
  private:
  bool _internal_has_controlfindcarpara() const;
  public:
  void clear_controlfindcarpara();
  const ::ControlNS::ControlFindCarPara& controlfindcarpara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlFindCarPara* release_controlfindcarpara();
  ::ControlNS::ControlFindCarPara* mutable_controlfindcarpara();
  void set_allocated_controlfindcarpara(::ControlNS::ControlFindCarPara* controlfindcarpara);
  private:
  const ::ControlNS::ControlFindCarPara& _internal_controlfindcarpara() const;
  ::ControlNS::ControlFindCarPara* _internal_mutable_controlfindcarpara();
  public:
  void unsafe_arena_set_allocated_controlfindcarpara(
      ::ControlNS::ControlFindCarPara* controlfindcarpara);
  ::ControlNS::ControlFindCarPara* unsafe_arena_release_controlfindcarpara();

  // .ControlNS.ControlGetPositionPara controlGetPositionPara = 3;
  bool has_controlgetpositionpara() const;
  private:
  bool _internal_has_controlgetpositionpara() const;
  public:
  void clear_controlgetpositionpara();
  const ::ControlNS::ControlGetPositionPara& controlgetpositionpara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetPositionPara* release_controlgetpositionpara();
  ::ControlNS::ControlGetPositionPara* mutable_controlgetpositionpara();
  void set_allocated_controlgetpositionpara(::ControlNS::ControlGetPositionPara* controlgetpositionpara);
  private:
  const ::ControlNS::ControlGetPositionPara& _internal_controlgetpositionpara() const;
  ::ControlNS::ControlGetPositionPara* _internal_mutable_controlgetpositionpara();
  public:
  void unsafe_arena_set_allocated_controlgetpositionpara(
      ::ControlNS::ControlGetPositionPara* controlgetpositionpara);
  ::ControlNS::ControlGetPositionPara* unsafe_arena_release_controlgetpositionpara();

  // .ControlNS.ControlGetTPMSPara controlGetTMPSPara = 4;
  bool has_controlgettmpspara() const;
  private:
  bool _internal_has_controlgettmpspara() const;
  public:
  void clear_controlgettmpspara();
  const ::ControlNS::ControlGetTPMSPara& controlgettmpspara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetTPMSPara* release_controlgettmpspara();
  ::ControlNS::ControlGetTPMSPara* mutable_controlgettmpspara();
  void set_allocated_controlgettmpspara(::ControlNS::ControlGetTPMSPara* controlgettmpspara);
  private:
  const ::ControlNS::ControlGetTPMSPara& _internal_controlgettmpspara() const;
  ::ControlNS::ControlGetTPMSPara* _internal_mutable_controlgettmpspara();
  public:
  void unsafe_arena_set_allocated_controlgettmpspara(
      ::ControlNS::ControlGetTPMSPara* controlgettmpspara);
  ::ControlNS::ControlGetTPMSPara* unsafe_arena_release_controlgettmpspara();

  // .ControlNS.ControlTakeParkingPhotoPara controlTakeParkingPhotoPara = 5;
  bool has_controltakeparkingphotopara() const;
  private:
  bool _internal_has_controltakeparkingphotopara() const;
  public:
  void clear_controltakeparkingphotopara();
  const ::ControlNS::ControlTakeParkingPhotoPara& controltakeparkingphotopara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlTakeParkingPhotoPara* release_controltakeparkingphotopara();
  ::ControlNS::ControlTakeParkingPhotoPara* mutable_controltakeparkingphotopara();
  void set_allocated_controltakeparkingphotopara(::ControlNS::ControlTakeParkingPhotoPara* controltakeparkingphotopara);
  private:
  const ::ControlNS::ControlTakeParkingPhotoPara& _internal_controltakeparkingphotopara() const;
  ::ControlNS::ControlTakeParkingPhotoPara* _internal_mutable_controltakeparkingphotopara();
  public:
  void unsafe_arena_set_allocated_controltakeparkingphotopara(
      ::ControlNS::ControlTakeParkingPhotoPara* controltakeparkingphotopara);
  ::ControlNS::ControlTakeParkingPhotoPara* unsafe_arena_release_controltakeparkingphotopara();

  // .ControlNS.ControlSetRoundFencePara controlSetRoundFencePara = 6;
  bool has_controlsetroundfencepara() const;
  private:
  bool _internal_has_controlsetroundfencepara() const;
  public:
  void clear_controlsetroundfencepara();
  const ::ControlNS::ControlSetRoundFencePara& controlsetroundfencepara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetRoundFencePara* release_controlsetroundfencepara();
  ::ControlNS::ControlSetRoundFencePara* mutable_controlsetroundfencepara();
  void set_allocated_controlsetroundfencepara(::ControlNS::ControlSetRoundFencePara* controlsetroundfencepara);
  private:
  const ::ControlNS::ControlSetRoundFencePara& _internal_controlsetroundfencepara() const;
  ::ControlNS::ControlSetRoundFencePara* _internal_mutable_controlsetroundfencepara();
  public:
  void unsafe_arena_set_allocated_controlsetroundfencepara(
      ::ControlNS::ControlSetRoundFencePara* controlsetroundfencepara);
  ::ControlNS::ControlSetRoundFencePara* unsafe_arena_release_controlsetroundfencepara();

  // .ControlNS.ControlSetPolygonFencePara controlSetPolygonFencePara = 7;
  bool has_controlsetpolygonfencepara() const;
  private:
  bool _internal_has_controlsetpolygonfencepara() const;
  public:
  void clear_controlsetpolygonfencepara();
  const ::ControlNS::ControlSetPolygonFencePara& controlsetpolygonfencepara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetPolygonFencePara* release_controlsetpolygonfencepara();
  ::ControlNS::ControlSetPolygonFencePara* mutable_controlsetpolygonfencepara();
  void set_allocated_controlsetpolygonfencepara(::ControlNS::ControlSetPolygonFencePara* controlsetpolygonfencepara);
  private:
  const ::ControlNS::ControlSetPolygonFencePara& _internal_controlsetpolygonfencepara() const;
  ::ControlNS::ControlSetPolygonFencePara* _internal_mutable_controlsetpolygonfencepara();
  public:
  void unsafe_arena_set_allocated_controlsetpolygonfencepara(
      ::ControlNS::ControlSetPolygonFencePara* controlsetpolygonfencepara);
  ::ControlNS::ControlSetPolygonFencePara* unsafe_arena_release_controlsetpolygonfencepara();

  // .ControlNS.ControlHeatSeatPara controlHeatSeatPara = 8;
  bool has_controlheatseatpara() const;
  private:
  bool _internal_has_controlheatseatpara() const;
  public:
  void clear_controlheatseatpara();
  const ::ControlNS::ControlHeatSeatPara& controlheatseatpara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatSeatPara* release_controlheatseatpara();
  ::ControlNS::ControlHeatSeatPara* mutable_controlheatseatpara();
  void set_allocated_controlheatseatpara(::ControlNS::ControlHeatSeatPara* controlheatseatpara);
  private:
  const ::ControlNS::ControlHeatSeatPara& _internal_controlheatseatpara() const;
  ::ControlNS::ControlHeatSeatPara* _internal_mutable_controlheatseatpara();
  public:
  void unsafe_arena_set_allocated_controlheatseatpara(
      ::ControlNS::ControlHeatSeatPara* controlheatseatpara);
  ::ControlNS::ControlHeatSeatPara* unsafe_arena_release_controlheatseatpara();

  // .ControlNS.ControlHeatHandleBarPara controlHeatHandleBarPara = 9;
  bool has_controlheathandlebarpara() const;
  private:
  bool _internal_has_controlheathandlebarpara() const;
  public:
  void clear_controlheathandlebarpara();
  const ::ControlNS::ControlHeatHandleBarPara& controlheathandlebarpara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatHandleBarPara* release_controlheathandlebarpara();
  ::ControlNS::ControlHeatHandleBarPara* mutable_controlheathandlebarpara();
  void set_allocated_controlheathandlebarpara(::ControlNS::ControlHeatHandleBarPara* controlheathandlebarpara);
  private:
  const ::ControlNS::ControlHeatHandleBarPara& _internal_controlheathandlebarpara() const;
  ::ControlNS::ControlHeatHandleBarPara* _internal_mutable_controlheathandlebarpara();
  public:
  void unsafe_arena_set_allocated_controlheathandlebarpara(
      ::ControlNS::ControlHeatHandleBarPara* controlheathandlebarpara);
  ::ControlNS::ControlHeatHandleBarPara* unsafe_arena_release_controlheathandlebarpara();

  // .ControlNS.ControlHeatReservePara controlHeatReservePara = 10;
  bool has_controlheatreservepara() const;
  private:
  bool _internal_has_controlheatreservepara() const;
  public:
  void clear_controlheatreservepara();
  const ::ControlNS::ControlHeatReservePara& controlheatreservepara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatReservePara* release_controlheatreservepara();
  ::ControlNS::ControlHeatReservePara* mutable_controlheatreservepara();
  void set_allocated_controlheatreservepara(::ControlNS::ControlHeatReservePara* controlheatreservepara);
  private:
  const ::ControlNS::ControlHeatReservePara& _internal_controlheatreservepara() const;
  ::ControlNS::ControlHeatReservePara* _internal_mutable_controlheatreservepara();
  public:
  void unsafe_arena_set_allocated_controlheatreservepara(
      ::ControlNS::ControlHeatReservePara* controlheatreservepara);
  ::ControlNS::ControlHeatReservePara* unsafe_arena_release_controlheatreservepara();

  // .ControlNS.ControlGetSignalIntensityPara controlGetSignalIntensityPara = 11;
  bool has_controlgetsignalintensitypara() const;
  private:
  bool _internal_has_controlgetsignalintensitypara() const;
  public:
  void clear_controlgetsignalintensitypara();
  const ::ControlNS::ControlGetSignalIntensityPara& controlgetsignalintensitypara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetSignalIntensityPara* release_controlgetsignalintensitypara();
  ::ControlNS::ControlGetSignalIntensityPara* mutable_controlgetsignalintensitypara();
  void set_allocated_controlgetsignalintensitypara(::ControlNS::ControlGetSignalIntensityPara* controlgetsignalintensitypara);
  private:
  const ::ControlNS::ControlGetSignalIntensityPara& _internal_controlgetsignalintensitypara() const;
  ::ControlNS::ControlGetSignalIntensityPara* _internal_mutable_controlgetsignalintensitypara();
  public:
  void unsafe_arena_set_allocated_controlgetsignalintensitypara(
      ::ControlNS::ControlGetSignalIntensityPara* controlgetsignalintensitypara);
  ::ControlNS::ControlGetSignalIntensityPara* unsafe_arena_release_controlgetsignalintensitypara();

  // .ControlNS.ControlAPNNamePara controlAPNNamePara = 12;
  bool has_controlapnnamepara() const;
  private:
  bool _internal_has_controlapnnamepara() const;
  public:
  void clear_controlapnnamepara();
  const ::ControlNS::ControlAPNNamePara& controlapnnamepara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlAPNNamePara* release_controlapnnamepara();
  ::ControlNS::ControlAPNNamePara* mutable_controlapnnamepara();
  void set_allocated_controlapnnamepara(::ControlNS::ControlAPNNamePara* controlapnnamepara);
  private:
  const ::ControlNS::ControlAPNNamePara& _internal_controlapnnamepara() const;
  ::ControlNS::ControlAPNNamePara* _internal_mutable_controlapnnamepara();
  public:
  void unsafe_arena_set_allocated_controlapnnamepara(
      ::ControlNS::ControlAPNNamePara* controlapnnamepara);
  ::ControlNS::ControlAPNNamePara* unsafe_arena_release_controlapnnamepara();

  // .ControlNS.ControlSetFrequencyPara controlSetFrequencyPara = 13;
  bool has_controlsetfrequencypara() const;
  private:
  bool _internal_has_controlsetfrequencypara() const;
  public:
  void clear_controlsetfrequencypara();
  const ::ControlNS::ControlSetFrequencyPara& controlsetfrequencypara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetFrequencyPara* release_controlsetfrequencypara();
  ::ControlNS::ControlSetFrequencyPara* mutable_controlsetfrequencypara();
  void set_allocated_controlsetfrequencypara(::ControlNS::ControlSetFrequencyPara* controlsetfrequencypara);
  private:
  const ::ControlNS::ControlSetFrequencyPara& _internal_controlsetfrequencypara() const;
  ::ControlNS::ControlSetFrequencyPara* _internal_mutable_controlsetfrequencypara();
  public:
  void unsafe_arena_set_allocated_controlsetfrequencypara(
      ::ControlNS::ControlSetFrequencyPara* controlsetfrequencypara);
  ::ControlNS::ControlSetFrequencyPara* unsafe_arena_release_controlsetfrequencypara();

  // .ControlNS.ControlClearFencePara controlClearFencePara = 14;
  bool has_controlclearfencepara() const;
  private:
  bool _internal_has_controlclearfencepara() const;
  public:
  void clear_controlclearfencepara();
  const ::ControlNS::ControlClearFencePara& controlclearfencepara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlClearFencePara* release_controlclearfencepara();
  ::ControlNS::ControlClearFencePara* mutable_controlclearfencepara();
  void set_allocated_controlclearfencepara(::ControlNS::ControlClearFencePara* controlclearfencepara);
  private:
  const ::ControlNS::ControlClearFencePara& _internal_controlclearfencepara() const;
  ::ControlNS::ControlClearFencePara* _internal_mutable_controlclearfencepara();
  public:
  void unsafe_arena_set_allocated_controlclearfencepara(
      ::ControlNS::ControlClearFencePara* controlclearfencepara);
  ::ControlNS::ControlClearFencePara* unsafe_arena_release_controlclearfencepara();

  // .ControlNS.ControlSetSentinelModePara controlSetSentinelModePara = 15;
  bool has_controlsetsentinelmodepara() const;
  private:
  bool _internal_has_controlsetsentinelmodepara() const;
  public:
  void clear_controlsetsentinelmodepara();
  const ::ControlNS::ControlSetSentinelModePara& controlsetsentinelmodepara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlSetSentinelModePara* release_controlsetsentinelmodepara();
  ::ControlNS::ControlSetSentinelModePara* mutable_controlsetsentinelmodepara();
  void set_allocated_controlsetsentinelmodepara(::ControlNS::ControlSetSentinelModePara* controlsetsentinelmodepara);
  private:
  const ::ControlNS::ControlSetSentinelModePara& _internal_controlsetsentinelmodepara() const;
  ::ControlNS::ControlSetSentinelModePara* _internal_mutable_controlsetsentinelmodepara();
  public:
  void unsafe_arena_set_allocated_controlsetsentinelmodepara(
      ::ControlNS::ControlSetSentinelModePara* controlsetsentinelmodepara);
  ::ControlNS::ControlSetSentinelModePara* unsafe_arena_release_controlsetsentinelmodepara();

  // .ControlNS.ControlGetECUVersionPara controlGetECUVersionPara = 16;
  bool has_controlgetecuversionpara() const;
  private:
  bool _internal_has_controlgetecuversionpara() const;
  public:
  void clear_controlgetecuversionpara();
  const ::ControlNS::ControlGetECUVersionPara& controlgetecuversionpara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlGetECUVersionPara* release_controlgetecuversionpara();
  ::ControlNS::ControlGetECUVersionPara* mutable_controlgetecuversionpara();
  void set_allocated_controlgetecuversionpara(::ControlNS::ControlGetECUVersionPara* controlgetecuversionpara);
  private:
  const ::ControlNS::ControlGetECUVersionPara& _internal_controlgetecuversionpara() const;
  ::ControlNS::ControlGetECUVersionPara* _internal_mutable_controlgetecuversionpara();
  public:
  void unsafe_arena_set_allocated_controlgetecuversionpara(
      ::ControlNS::ControlGetECUVersionPara* controlgetecuversionpara);
  ::ControlNS::ControlGetECUVersionPara* unsafe_arena_release_controlgetecuversionpara();

  // @@protoc_insertion_point(class_scope:ControlNS.Parameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ControlNS::ControlEnginePara* controlenginepara_;
  ::ControlNS::ControlFindCarPara* controlfindcarpara_;
  ::ControlNS::ControlGetPositionPara* controlgetpositionpara_;
  ::ControlNS::ControlGetTPMSPara* controlgettmpspara_;
  ::ControlNS::ControlTakeParkingPhotoPara* controltakeparkingphotopara_;
  ::ControlNS::ControlSetRoundFencePara* controlsetroundfencepara_;
  ::ControlNS::ControlSetPolygonFencePara* controlsetpolygonfencepara_;
  ::ControlNS::ControlHeatSeatPara* controlheatseatpara_;
  ::ControlNS::ControlHeatHandleBarPara* controlheathandlebarpara_;
  ::ControlNS::ControlHeatReservePara* controlheatreservepara_;
  ::ControlNS::ControlGetSignalIntensityPara* controlgetsignalintensitypara_;
  ::ControlNS::ControlAPNNamePara* controlapnnamepara_;
  ::ControlNS::ControlSetFrequencyPara* controlsetfrequencypara_;
  ::ControlNS::ControlClearFencePara* controlclearfencepara_;
  ::ControlNS::ControlSetSentinelModePara* controlsetsentinelmodepara_;
  ::ControlNS::ControlGetECUVersionPara* controlgetecuversionpara_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlEngineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlEngineResponse) */ {
 public:
  inline ControlEngineResponse() : ControlEngineResponse(nullptr) {}
  ~ControlEngineResponse() override;
  explicit constexpr ControlEngineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlEngineResponse(const ControlEngineResponse& from);
  ControlEngineResponse(ControlEngineResponse&& from) noexcept
    : ControlEngineResponse() {
    *this = ::std::move(from);
  }

  inline ControlEngineResponse& operator=(const ControlEngineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlEngineResponse& operator=(ControlEngineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlEngineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlEngineResponse* internal_default_instance() {
    return reinterpret_cast<const ControlEngineResponse*>(
               &_ControlEngineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ControlEngineResponse& a, ControlEngineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlEngineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlEngineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlEngineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlEngineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlEngineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlEngineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlEngineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlEngineResponse";
  }
  protected:
  explicit ControlEngineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlEngineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlEnginePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlEnginePara) */ {
 public:
  inline ControlEnginePara() : ControlEnginePara(nullptr) {}
  ~ControlEnginePara() override;
  explicit constexpr ControlEnginePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlEnginePara(const ControlEnginePara& from);
  ControlEnginePara(ControlEnginePara&& from) noexcept
    : ControlEnginePara() {
    *this = ::std::move(from);
  }

  inline ControlEnginePara& operator=(const ControlEnginePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlEnginePara& operator=(ControlEnginePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlEnginePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlEnginePara* internal_default_instance() {
    return reinterpret_cast<const ControlEnginePara*>(
               &_ControlEnginePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ControlEnginePara& a, ControlEnginePara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlEnginePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlEnginePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlEnginePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlEnginePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlEnginePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlEnginePara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlEnginePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlEnginePara";
  }
  protected:
  explicit ControlEnginePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnginStartFieldNumber = 1,
  };
  // .ControlNS.EngineOpt enginStart = 1;
  void clear_enginstart();
  ::ControlNS::EngineOpt enginstart() const;
  void set_enginstart(::ControlNS::EngineOpt value);
  private:
  ::ControlNS::EngineOpt _internal_enginstart() const;
  void _internal_set_enginstart(::ControlNS::EngineOpt value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlEnginePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int enginstart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetPositionResponse) */ {
 public:
  inline ControlGetPositionResponse() : ControlGetPositionResponse(nullptr) {}
  ~ControlGetPositionResponse() override;
  explicit constexpr ControlGetPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetPositionResponse(const ControlGetPositionResponse& from);
  ControlGetPositionResponse(ControlGetPositionResponse&& from) noexcept
    : ControlGetPositionResponse() {
    *this = ::std::move(from);
  }

  inline ControlGetPositionResponse& operator=(const ControlGetPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetPositionResponse& operator=(ControlGetPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetPositionResponse* internal_default_instance() {
    return reinterpret_cast<const ControlGetPositionResponse*>(
               &_ControlGetPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ControlGetPositionResponse& a, ControlGetPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetPositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetPositionResponse";
  }
  protected:
  explicit ControlGetPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlFindCarResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlFindCarResponse) */ {
 public:
  inline ControlFindCarResponse() : ControlFindCarResponse(nullptr) {}
  ~ControlFindCarResponse() override;
  explicit constexpr ControlFindCarResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlFindCarResponse(const ControlFindCarResponse& from);
  ControlFindCarResponse(ControlFindCarResponse&& from) noexcept
    : ControlFindCarResponse() {
    *this = ::std::move(from);
  }

  inline ControlFindCarResponse& operator=(const ControlFindCarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlFindCarResponse& operator=(ControlFindCarResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlFindCarResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlFindCarResponse* internal_default_instance() {
    return reinterpret_cast<const ControlFindCarResponse*>(
               &_ControlFindCarResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ControlFindCarResponse& a, ControlFindCarResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlFindCarResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlFindCarResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlFindCarResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlFindCarResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlFindCarResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlFindCarResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlFindCarResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlFindCarResponse";
  }
  protected:
  explicit ControlFindCarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlFindCarResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlFindCarPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlFindCarPara) */ {
 public:
  inline ControlFindCarPara() : ControlFindCarPara(nullptr) {}
  ~ControlFindCarPara() override;
  explicit constexpr ControlFindCarPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlFindCarPara(const ControlFindCarPara& from);
  ControlFindCarPara(ControlFindCarPara&& from) noexcept
    : ControlFindCarPara() {
    *this = ::std::move(from);
  }

  inline ControlFindCarPara& operator=(const ControlFindCarPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlFindCarPara& operator=(ControlFindCarPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlFindCarPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlFindCarPara* internal_default_instance() {
    return reinterpret_cast<const ControlFindCarPara*>(
               &_ControlFindCarPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ControlFindCarPara& a, ControlFindCarPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlFindCarPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlFindCarPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlFindCarPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlFindCarPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlFindCarPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlFindCarPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlFindCarPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlFindCarPara";
  }
  protected:
  explicit ControlFindCarPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFindCarOptFieldNumber = 1,
  };
  // .ControlNS.FindCarOpt findCarOpt = 1;
  void clear_findcaropt();
  ::ControlNS::FindCarOpt findcaropt() const;
  void set_findcaropt(::ControlNS::FindCarOpt value);
  private:
  ::ControlNS::FindCarOpt _internal_findcaropt() const;
  void _internal_set_findcaropt(::ControlNS::FindCarOpt value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlFindCarPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int findcaropt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGearReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGearReportResponse) */ {
 public:
  inline ControlGearReportResponse() : ControlGearReportResponse(nullptr) {}
  ~ControlGearReportResponse() override;
  explicit constexpr ControlGearReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGearReportResponse(const ControlGearReportResponse& from);
  ControlGearReportResponse(ControlGearReportResponse&& from) noexcept
    : ControlGearReportResponse() {
    *this = ::std::move(from);
  }

  inline ControlGearReportResponse& operator=(const ControlGearReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGearReportResponse& operator=(ControlGearReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGearReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGearReportResponse* internal_default_instance() {
    return reinterpret_cast<const ControlGearReportResponse*>(
               &_ControlGearReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ControlGearReportResponse& a, ControlGearReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGearReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGearReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGearReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGearReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGearReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGearReportResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGearReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGearReportResponse";
  }
  protected:
  explicit ControlGearReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGearReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetPositionPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetPositionPara) */ {
 public:
  inline ControlGetPositionPara() : ControlGetPositionPara(nullptr) {}
  ~ControlGetPositionPara() override;
  explicit constexpr ControlGetPositionPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetPositionPara(const ControlGetPositionPara& from);
  ControlGetPositionPara(ControlGetPositionPara&& from) noexcept
    : ControlGetPositionPara() {
    *this = ::std::move(from);
  }

  inline ControlGetPositionPara& operator=(const ControlGetPositionPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetPositionPara& operator=(ControlGetPositionPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetPositionPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetPositionPara* internal_default_instance() {
    return reinterpret_cast<const ControlGetPositionPara*>(
               &_ControlGetPositionPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ControlGetPositionPara& a, ControlGetPositionPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetPositionPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetPositionPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetPositionPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetPositionPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetPositionPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetPositionPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetPositionPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetPositionPara";
  }
  protected:
  explicit ControlGetPositionPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
  };
  // bytes location = 1;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetPositionPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetTPMSResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetTPMSResponse) */ {
 public:
  inline ControlGetTPMSResponse() : ControlGetTPMSResponse(nullptr) {}
  ~ControlGetTPMSResponse() override;
  explicit constexpr ControlGetTPMSResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetTPMSResponse(const ControlGetTPMSResponse& from);
  ControlGetTPMSResponse(ControlGetTPMSResponse&& from) noexcept
    : ControlGetTPMSResponse() {
    *this = ::std::move(from);
  }

  inline ControlGetTPMSResponse& operator=(const ControlGetTPMSResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetTPMSResponse& operator=(ControlGetTPMSResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetTPMSResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetTPMSResponse* internal_default_instance() {
    return reinterpret_cast<const ControlGetTPMSResponse*>(
               &_ControlGetTPMSResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ControlGetTPMSResponse& a, ControlGetTPMSResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetTPMSResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetTPMSResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetTPMSResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetTPMSResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetTPMSResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetTPMSResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetTPMSResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetTPMSResponse";
  }
  protected:
  explicit ControlGetTPMSResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetTPMSResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetTPMSPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetTPMSPara) */ {
 public:
  inline ControlGetTPMSPara() : ControlGetTPMSPara(nullptr) {}
  ~ControlGetTPMSPara() override;
  explicit constexpr ControlGetTPMSPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetTPMSPara(const ControlGetTPMSPara& from);
  ControlGetTPMSPara(ControlGetTPMSPara&& from) noexcept
    : ControlGetTPMSPara() {
    *this = ::std::move(from);
  }

  inline ControlGetTPMSPara& operator=(const ControlGetTPMSPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetTPMSPara& operator=(ControlGetTPMSPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetTPMSPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetTPMSPara* internal_default_instance() {
    return reinterpret_cast<const ControlGetTPMSPara*>(
               &_ControlGetTPMSPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ControlGetTPMSPara& a, ControlGetTPMSPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetTPMSPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetTPMSPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetTPMSPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetTPMSPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetTPMSPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetTPMSPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetTPMSPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetTPMSPara";
  }
  protected:
  explicit ControlGetTPMSPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTpmsInfoFieldNumber = 1,
  };
  // .StatusNS.TpmsInfo tpmsInfo = 1;
  bool has_tpmsinfo() const;
  private:
  bool _internal_has_tpmsinfo() const;
  public:
  void clear_tpmsinfo();
  const ::StatusNS::TpmsInfo& tpmsinfo() const;
  PROTOBUF_NODISCARD ::StatusNS::TpmsInfo* release_tpmsinfo();
  ::StatusNS::TpmsInfo* mutable_tpmsinfo();
  void set_allocated_tpmsinfo(::StatusNS::TpmsInfo* tpmsinfo);
  private:
  const ::StatusNS::TpmsInfo& _internal_tpmsinfo() const;
  ::StatusNS::TpmsInfo* _internal_mutable_tpmsinfo();
  public:
  void unsafe_arena_set_allocated_tpmsinfo(
      ::StatusNS::TpmsInfo* tpmsinfo);
  ::StatusNS::TpmsInfo* unsafe_arena_release_tpmsinfo();

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetTPMSPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::StatusNS::TpmsInfo* tpmsinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlTakeParkingPhotoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlTakeParkingPhotoResponse) */ {
 public:
  inline ControlTakeParkingPhotoResponse() : ControlTakeParkingPhotoResponse(nullptr) {}
  ~ControlTakeParkingPhotoResponse() override;
  explicit constexpr ControlTakeParkingPhotoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlTakeParkingPhotoResponse(const ControlTakeParkingPhotoResponse& from);
  ControlTakeParkingPhotoResponse(ControlTakeParkingPhotoResponse&& from) noexcept
    : ControlTakeParkingPhotoResponse() {
    *this = ::std::move(from);
  }

  inline ControlTakeParkingPhotoResponse& operator=(const ControlTakeParkingPhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlTakeParkingPhotoResponse& operator=(ControlTakeParkingPhotoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlTakeParkingPhotoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlTakeParkingPhotoResponse* internal_default_instance() {
    return reinterpret_cast<const ControlTakeParkingPhotoResponse*>(
               &_ControlTakeParkingPhotoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ControlTakeParkingPhotoResponse& a, ControlTakeParkingPhotoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlTakeParkingPhotoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlTakeParkingPhotoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlTakeParkingPhotoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlTakeParkingPhotoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlTakeParkingPhotoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlTakeParkingPhotoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlTakeParkingPhotoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlTakeParkingPhotoResponse";
  }
  protected:
  explicit ControlTakeParkingPhotoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlTakeParkingPhotoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlTakeParkingPhotoPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlTakeParkingPhotoPara) */ {
 public:
  inline ControlTakeParkingPhotoPara() : ControlTakeParkingPhotoPara(nullptr) {}
  ~ControlTakeParkingPhotoPara() override;
  explicit constexpr ControlTakeParkingPhotoPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlTakeParkingPhotoPara(const ControlTakeParkingPhotoPara& from);
  ControlTakeParkingPhotoPara(ControlTakeParkingPhotoPara&& from) noexcept
    : ControlTakeParkingPhotoPara() {
    *this = ::std::move(from);
  }

  inline ControlTakeParkingPhotoPara& operator=(const ControlTakeParkingPhotoPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlTakeParkingPhotoPara& operator=(ControlTakeParkingPhotoPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlTakeParkingPhotoPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlTakeParkingPhotoPara* internal_default_instance() {
    return reinterpret_cast<const ControlTakeParkingPhotoPara*>(
               &_ControlTakeParkingPhotoPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ControlTakeParkingPhotoPara& a, ControlTakeParkingPhotoPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlTakeParkingPhotoPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlTakeParkingPhotoPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlTakeParkingPhotoPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlTakeParkingPhotoPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlTakeParkingPhotoPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlTakeParkingPhotoPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlTakeParkingPhotoPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlTakeParkingPhotoPara";
  }
  protected:
  explicit ControlTakeParkingPhotoPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraOptFieldNumber = 1,
  };
  // .ControlNS.CameraOpt cameraOpt = 1;
  void clear_cameraopt();
  ::ControlNS::CameraOpt cameraopt() const;
  void set_cameraopt(::ControlNS::CameraOpt value);
  private:
  ::ControlNS::CameraOpt _internal_cameraopt() const;
  void _internal_set_cameraopt(::ControlNS::CameraOpt value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlTakeParkingPhotoPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int cameraopt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetFenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetFenceResponse) */ {
 public:
  inline ControlSetFenceResponse() : ControlSetFenceResponse(nullptr) {}
  ~ControlSetFenceResponse() override;
  explicit constexpr ControlSetFenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetFenceResponse(const ControlSetFenceResponse& from);
  ControlSetFenceResponse(ControlSetFenceResponse&& from) noexcept
    : ControlSetFenceResponse() {
    *this = ::std::move(from);
  }

  inline ControlSetFenceResponse& operator=(const ControlSetFenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetFenceResponse& operator=(ControlSetFenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetFenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetFenceResponse* internal_default_instance() {
    return reinterpret_cast<const ControlSetFenceResponse*>(
               &_ControlSetFenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ControlSetFenceResponse& a, ControlSetFenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetFenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetFenceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetFenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetFenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetFenceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetFenceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetFenceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetFenceResponse";
  }
  protected:
  explicit ControlSetFenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetFenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetRoundFencePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetRoundFencePara) */ {
 public:
  inline ControlSetRoundFencePara() : ControlSetRoundFencePara(nullptr) {}
  ~ControlSetRoundFencePara() override;
  explicit constexpr ControlSetRoundFencePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetRoundFencePara(const ControlSetRoundFencePara& from);
  ControlSetRoundFencePara(ControlSetRoundFencePara&& from) noexcept
    : ControlSetRoundFencePara() {
    *this = ::std::move(from);
  }

  inline ControlSetRoundFencePara& operator=(const ControlSetRoundFencePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetRoundFencePara& operator=(ControlSetRoundFencePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetRoundFencePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetRoundFencePara* internal_default_instance() {
    return reinterpret_cast<const ControlSetRoundFencePara*>(
               &_ControlSetRoundFencePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ControlSetRoundFencePara& a, ControlSetRoundFencePara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetRoundFencePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetRoundFencePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetRoundFencePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetRoundFencePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetRoundFencePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetRoundFencePara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetRoundFencePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetRoundFencePara";
  }
  protected:
  explicit ControlSetRoundFencePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFenceIDFieldNumber = 7,
    kCenterFieldNumber = 1,
    kStartFieldNumber = 3,
    kRadiusFieldNumber = 2,
    kSpeedFieldNumber = 5,
    kEndFieldNumber = 4,
    kDirectionFieldNumber = 6,
  };
  // string fenceID = 7;
  void clear_fenceid();
  const std::string& fenceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fenceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fenceid();
  PROTOBUF_NODISCARD std::string* release_fenceid();
  void set_allocated_fenceid(std::string* fenceid);
  private:
  const std::string& _internal_fenceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fenceid(const std::string& value);
  std::string* _internal_mutable_fenceid();
  public:

  // .ControlNS.Point center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::ControlNS::Point& center() const;
  PROTOBUF_NODISCARD ::ControlNS::Point* release_center();
  ::ControlNS::Point* mutable_center();
  void set_allocated_center(::ControlNS::Point* center);
  private:
  const ::ControlNS::Point& _internal_center() const;
  ::ControlNS::Point* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::ControlNS::Point* center);
  ::ControlNS::Point* unsafe_arena_release_center();

  // uint64 start = 3;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // uint32 radius = 2;
  void clear_radius();
  uint32_t radius() const;
  void set_radius(uint32_t value);
  private:
  uint32_t _internal_radius() const;
  void _internal_set_radius(uint32_t value);
  public:

  // uint32 speed = 5;
  void clear_speed();
  uint32_t speed() const;
  void set_speed(uint32_t value);
  private:
  uint32_t _internal_speed() const;
  void _internal_set_speed(uint32_t value);
  public:

  // uint64 end = 4;
  void clear_end();
  uint64_t end() const;
  void set_end(uint64_t value);
  private:
  uint64_t _internal_end() const;
  void _internal_set_end(uint64_t value);
  public:

  // uint32 direction = 6;
  void clear_direction();
  uint32_t direction() const;
  void set_direction(uint32_t value);
  private:
  uint32_t _internal_direction() const;
  void _internal_set_direction(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetRoundFencePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fenceid_;
  ::ControlNS::Point* center_;
  uint64_t start_;
  uint32_t radius_;
  uint32_t speed_;
  uint64_t end_;
  uint32_t direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetPolygonFencePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetPolygonFencePara) */ {
 public:
  inline ControlSetPolygonFencePara() : ControlSetPolygonFencePara(nullptr) {}
  ~ControlSetPolygonFencePara() override;
  explicit constexpr ControlSetPolygonFencePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetPolygonFencePara(const ControlSetPolygonFencePara& from);
  ControlSetPolygonFencePara(ControlSetPolygonFencePara&& from) noexcept
    : ControlSetPolygonFencePara() {
    *this = ::std::move(from);
  }

  inline ControlSetPolygonFencePara& operator=(const ControlSetPolygonFencePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetPolygonFencePara& operator=(ControlSetPolygonFencePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetPolygonFencePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetPolygonFencePara* internal_default_instance() {
    return reinterpret_cast<const ControlSetPolygonFencePara*>(
               &_ControlSetPolygonFencePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ControlSetPolygonFencePara& a, ControlSetPolygonFencePara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetPolygonFencePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetPolygonFencePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetPolygonFencePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetPolygonFencePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetPolygonFencePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetPolygonFencePara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetPolygonFencePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetPolygonFencePara";
  }
  protected:
  explicit ControlSetPolygonFencePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kFenceIDFieldNumber = 6,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kDirectionFieldNumber = 5,
  };
  // repeated .ControlNS.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::ControlNS::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::Point >*
      mutable_points();
  private:
  const ::ControlNS::Point& _internal_points(int index) const;
  ::ControlNS::Point* _internal_add_points();
  public:
  const ::ControlNS::Point& points(int index) const;
  ::ControlNS::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::Point >&
      points() const;

  // string fenceID = 6;
  void clear_fenceid();
  const std::string& fenceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fenceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fenceid();
  PROTOBUF_NODISCARD std::string* release_fenceid();
  void set_allocated_fenceid(std::string* fenceid);
  private:
  const std::string& _internal_fenceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fenceid(const std::string& value);
  std::string* _internal_mutable_fenceid();
  public:

  // uint64 start = 2;
  void clear_start();
  uint64_t start() const;
  void set_start(uint64_t value);
  private:
  uint64_t _internal_start() const;
  void _internal_set_start(uint64_t value);
  public:

  // uint64 end = 3;
  void clear_end();
  uint64_t end() const;
  void set_end(uint64_t value);
  private:
  uint64_t _internal_end() const;
  void _internal_set_end(uint64_t value);
  public:

  // uint32 speed = 4;
  void clear_speed();
  uint32_t speed() const;
  void set_speed(uint32_t value);
  private:
  uint32_t _internal_speed() const;
  void _internal_set_speed(uint32_t value);
  public:

  // uint32 direction = 5;
  void clear_direction();
  uint32_t direction() const;
  void set_direction(uint32_t value);
  private:
  uint32_t _internal_direction() const;
  void _internal_set_direction(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetPolygonFencePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fenceid_;
  uint64_t start_;
  uint64_t end_;
  uint32_t speed_;
  uint32_t direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlClearFencePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlClearFencePara) */ {
 public:
  inline ControlClearFencePara() : ControlClearFencePara(nullptr) {}
  ~ControlClearFencePara() override;
  explicit constexpr ControlClearFencePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlClearFencePara(const ControlClearFencePara& from);
  ControlClearFencePara(ControlClearFencePara&& from) noexcept
    : ControlClearFencePara() {
    *this = ::std::move(from);
  }

  inline ControlClearFencePara& operator=(const ControlClearFencePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlClearFencePara& operator=(ControlClearFencePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlClearFencePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlClearFencePara* internal_default_instance() {
    return reinterpret_cast<const ControlClearFencePara*>(
               &_ControlClearFencePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ControlClearFencePara& a, ControlClearFencePara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlClearFencePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlClearFencePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlClearFencePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlClearFencePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlClearFencePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlClearFencePara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlClearFencePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlClearFencePara";
  }
  protected:
  explicit ControlClearFencePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFenceIDFieldNumber = 1,
  };
  // string fenceID = 1;
  void clear_fenceid();
  const std::string& fenceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fenceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fenceid();
  PROTOBUF_NODISCARD std::string* release_fenceid();
  void set_allocated_fenceid(std::string* fenceid);
  private:
  const std::string& _internal_fenceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fenceid(const std::string& value);
  std::string* _internal_mutable_fenceid();
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlClearFencePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fenceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kHemisphereFieldNumber = 3,
  };
  // uint32 latitude = 1;
  void clear_latitude();
  uint32_t latitude() const;
  void set_latitude(uint32_t value);
  private:
  uint32_t _internal_latitude() const;
  void _internal_set_latitude(uint32_t value);
  public:

  // uint32 longitude = 2;
  void clear_longitude();
  uint32_t longitude() const;
  void set_longitude(uint32_t value);
  private:
  uint32_t _internal_longitude() const;
  void _internal_set_longitude(uint32_t value);
  public:

  // int32 hemisphere = 3;
  void clear_hemisphere();
  int32_t hemisphere() const;
  void set_hemisphere(int32_t value);
  private:
  int32_t _internal_hemisphere() const;
  void _internal_set_hemisphere(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t latitude_;
  uint32_t longitude_;
  int32_t hemisphere_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlHeatSeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlHeatSeatResponse) */ {
 public:
  inline ControlHeatSeatResponse() : ControlHeatSeatResponse(nullptr) {}
  ~ControlHeatSeatResponse() override;
  explicit constexpr ControlHeatSeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlHeatSeatResponse(const ControlHeatSeatResponse& from);
  ControlHeatSeatResponse(ControlHeatSeatResponse&& from) noexcept
    : ControlHeatSeatResponse() {
    *this = ::std::move(from);
  }

  inline ControlHeatSeatResponse& operator=(const ControlHeatSeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlHeatSeatResponse& operator=(ControlHeatSeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlHeatSeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlHeatSeatResponse* internal_default_instance() {
    return reinterpret_cast<const ControlHeatSeatResponse*>(
               &_ControlHeatSeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ControlHeatSeatResponse& a, ControlHeatSeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlHeatSeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlHeatSeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlHeatSeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlHeatSeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlHeatSeatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlHeatSeatResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlHeatSeatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlHeatSeatResponse";
  }
  protected:
  explicit ControlHeatSeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlHeatSeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlHeatHandleBarResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlHeatHandleBarResponse) */ {
 public:
  inline ControlHeatHandleBarResponse() : ControlHeatHandleBarResponse(nullptr) {}
  ~ControlHeatHandleBarResponse() override;
  explicit constexpr ControlHeatHandleBarResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlHeatHandleBarResponse(const ControlHeatHandleBarResponse& from);
  ControlHeatHandleBarResponse(ControlHeatHandleBarResponse&& from) noexcept
    : ControlHeatHandleBarResponse() {
    *this = ::std::move(from);
  }

  inline ControlHeatHandleBarResponse& operator=(const ControlHeatHandleBarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlHeatHandleBarResponse& operator=(ControlHeatHandleBarResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlHeatHandleBarResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlHeatHandleBarResponse* internal_default_instance() {
    return reinterpret_cast<const ControlHeatHandleBarResponse*>(
               &_ControlHeatHandleBarResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ControlHeatHandleBarResponse& a, ControlHeatHandleBarResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlHeatHandleBarResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlHeatHandleBarResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlHeatHandleBarResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlHeatHandleBarResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlHeatHandleBarResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlHeatHandleBarResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlHeatHandleBarResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlHeatHandleBarResponse";
  }
  protected:
  explicit ControlHeatHandleBarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlHeatHandleBarResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlHeatSeatPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlHeatSeatPara) */ {
 public:
  inline ControlHeatSeatPara() : ControlHeatSeatPara(nullptr) {}
  ~ControlHeatSeatPara() override;
  explicit constexpr ControlHeatSeatPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlHeatSeatPara(const ControlHeatSeatPara& from);
  ControlHeatSeatPara(ControlHeatSeatPara&& from) noexcept
    : ControlHeatSeatPara() {
    *this = ::std::move(from);
  }

  inline ControlHeatSeatPara& operator=(const ControlHeatSeatPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlHeatSeatPara& operator=(ControlHeatSeatPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlHeatSeatPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlHeatSeatPara* internal_default_instance() {
    return reinterpret_cast<const ControlHeatSeatPara*>(
               &_ControlHeatSeatPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ControlHeatSeatPara& a, ControlHeatSeatPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlHeatSeatPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlHeatSeatPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlHeatSeatPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlHeatSeatPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlHeatSeatPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlHeatSeatPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlHeatSeatPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlHeatSeatPara";
  }
  protected:
  explicit ControlHeatSeatPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // .ControlNS.SWITCH switch = 1;
  void clear_switch_();
  ::ControlNS::SWITCH switch_() const;
  void set_switch_(::ControlNS::SWITCH value);
  private:
  ::ControlNS::SWITCH _internal_switch_() const;
  void _internal_set_switch_(::ControlNS::SWITCH value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlHeatSeatPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int switch__;
  uint32_t level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlHeatHandleBarPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlHeatHandleBarPara) */ {
 public:
  inline ControlHeatHandleBarPara() : ControlHeatHandleBarPara(nullptr) {}
  ~ControlHeatHandleBarPara() override;
  explicit constexpr ControlHeatHandleBarPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlHeatHandleBarPara(const ControlHeatHandleBarPara& from);
  ControlHeatHandleBarPara(ControlHeatHandleBarPara&& from) noexcept
    : ControlHeatHandleBarPara() {
    *this = ::std::move(from);
  }

  inline ControlHeatHandleBarPara& operator=(const ControlHeatHandleBarPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlHeatHandleBarPara& operator=(ControlHeatHandleBarPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlHeatHandleBarPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlHeatHandleBarPara* internal_default_instance() {
    return reinterpret_cast<const ControlHeatHandleBarPara*>(
               &_ControlHeatHandleBarPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ControlHeatHandleBarPara& a, ControlHeatHandleBarPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlHeatHandleBarPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlHeatHandleBarPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlHeatHandleBarPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlHeatHandleBarPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlHeatHandleBarPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlHeatHandleBarPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlHeatHandleBarPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlHeatHandleBarPara";
  }
  protected:
  explicit ControlHeatHandleBarPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlHeatHandleBarPara_HandleType HandleType;
  static constexpr HandleType ALL =
    ControlHeatHandleBarPara_HandleType_ALL;
  static constexpr HandleType LEFT =
    ControlHeatHandleBarPara_HandleType_LEFT;
  static constexpr HandleType RIGHT =
    ControlHeatHandleBarPara_HandleType_RIGHT;
  static inline bool HandleType_IsValid(int value) {
    return ControlHeatHandleBarPara_HandleType_IsValid(value);
  }
  static constexpr HandleType HandleType_MIN =
    ControlHeatHandleBarPara_HandleType_HandleType_MIN;
  static constexpr HandleType HandleType_MAX =
    ControlHeatHandleBarPara_HandleType_HandleType_MAX;
  static constexpr int HandleType_ARRAYSIZE =
    ControlHeatHandleBarPara_HandleType_HandleType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HandleType_descriptor() {
    return ControlHeatHandleBarPara_HandleType_descriptor();
  }
  template<typename T>
  static inline const std::string& HandleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HandleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HandleType_Name.");
    return ControlHeatHandleBarPara_HandleType_Name(enum_t_value);
  }
  static inline bool HandleType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HandleType* value) {
    return ControlHeatHandleBarPara_HandleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // .ControlNS.SWITCH switch = 1;
  void clear_switch_();
  ::ControlNS::SWITCH switch_() const;
  void set_switch_(::ControlNS::SWITCH value);
  private:
  ::ControlNS::SWITCH _internal_switch_() const;
  void _internal_set_switch_(::ControlNS::SWITCH value);
  public:

  // .ControlNS.ControlHeatHandleBarPara.HandleType type = 2;
  void clear_type();
  ::ControlNS::ControlHeatHandleBarPara_HandleType type() const;
  void set_type(::ControlNS::ControlHeatHandleBarPara_HandleType value);
  private:
  ::ControlNS::ControlHeatHandleBarPara_HandleType _internal_type() const;
  void _internal_set_type(::ControlNS::ControlHeatHandleBarPara_HandleType value);
  public:

  // uint32 level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlHeatHandleBarPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int switch__;
  int type_;
  uint32_t level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlHeatReserveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlHeatReserveResponse) */ {
 public:
  inline ControlHeatReserveResponse() : ControlHeatReserveResponse(nullptr) {}
  ~ControlHeatReserveResponse() override;
  explicit constexpr ControlHeatReserveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlHeatReserveResponse(const ControlHeatReserveResponse& from);
  ControlHeatReserveResponse(ControlHeatReserveResponse&& from) noexcept
    : ControlHeatReserveResponse() {
    *this = ::std::move(from);
  }

  inline ControlHeatReserveResponse& operator=(const ControlHeatReserveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlHeatReserveResponse& operator=(ControlHeatReserveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlHeatReserveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlHeatReserveResponse* internal_default_instance() {
    return reinterpret_cast<const ControlHeatReserveResponse*>(
               &_ControlHeatReserveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ControlHeatReserveResponse& a, ControlHeatReserveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlHeatReserveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlHeatReserveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlHeatReserveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlHeatReserveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlHeatReserveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlHeatReserveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlHeatReserveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlHeatReserveResponse";
  }
  protected:
  explicit ControlHeatReserveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlHeatReserveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlHeatReservePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlHeatReservePara) */ {
 public:
  inline ControlHeatReservePara() : ControlHeatReservePara(nullptr) {}
  ~ControlHeatReservePara() override;
  explicit constexpr ControlHeatReservePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlHeatReservePara(const ControlHeatReservePara& from);
  ControlHeatReservePara(ControlHeatReservePara&& from) noexcept
    : ControlHeatReservePara() {
    *this = ::std::move(from);
  }

  inline ControlHeatReservePara& operator=(const ControlHeatReservePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlHeatReservePara& operator=(ControlHeatReservePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlHeatReservePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlHeatReservePara* internal_default_instance() {
    return reinterpret_cast<const ControlHeatReservePara*>(
               &_ControlHeatReservePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ControlHeatReservePara& a, ControlHeatReservePara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlHeatReservePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlHeatReservePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlHeatReservePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlHeatReservePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlHeatReservePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlHeatReservePara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlHeatReservePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlHeatReservePara";
  }
  protected:
  explicit ControlHeatReservePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeatSeatParaFieldNumber = 3,
    kHeatHandleBarParaFieldNumber = 4,
    kAppointmentFieldNumber = 1,
    kReservationFieldNumber = 2,
  };
  // .ControlNS.ControlHeatSeatPara heatSeatPara = 3;
  bool has_heatseatpara() const;
  private:
  bool _internal_has_heatseatpara() const;
  public:
  void clear_heatseatpara();
  const ::ControlNS::ControlHeatSeatPara& heatseatpara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatSeatPara* release_heatseatpara();
  ::ControlNS::ControlHeatSeatPara* mutable_heatseatpara();
  void set_allocated_heatseatpara(::ControlNS::ControlHeatSeatPara* heatseatpara);
  private:
  const ::ControlNS::ControlHeatSeatPara& _internal_heatseatpara() const;
  ::ControlNS::ControlHeatSeatPara* _internal_mutable_heatseatpara();
  public:
  void unsafe_arena_set_allocated_heatseatpara(
      ::ControlNS::ControlHeatSeatPara* heatseatpara);
  ::ControlNS::ControlHeatSeatPara* unsafe_arena_release_heatseatpara();

  // .ControlNS.ControlHeatHandleBarPara heatHandleBarPara = 4;
  bool has_heathandlebarpara() const;
  private:
  bool _internal_has_heathandlebarpara() const;
  public:
  void clear_heathandlebarpara();
  const ::ControlNS::ControlHeatHandleBarPara& heathandlebarpara() const;
  PROTOBUF_NODISCARD ::ControlNS::ControlHeatHandleBarPara* release_heathandlebarpara();
  ::ControlNS::ControlHeatHandleBarPara* mutable_heathandlebarpara();
  void set_allocated_heathandlebarpara(::ControlNS::ControlHeatHandleBarPara* heathandlebarpara);
  private:
  const ::ControlNS::ControlHeatHandleBarPara& _internal_heathandlebarpara() const;
  ::ControlNS::ControlHeatHandleBarPara* _internal_mutable_heathandlebarpara();
  public:
  void unsafe_arena_set_allocated_heathandlebarpara(
      ::ControlNS::ControlHeatHandleBarPara* heathandlebarpara);
  ::ControlNS::ControlHeatHandleBarPara* unsafe_arena_release_heathandlebarpara();

  // uint64 appointment = 1;
  void clear_appointment();
  uint64_t appointment() const;
  void set_appointment(uint64_t value);
  private:
  uint64_t _internal_appointment() const;
  void _internal_set_appointment(uint64_t value);
  public:

  // .ControlNS.ControlCommand reservation = 2;
  void clear_reservation();
  ::ControlNS::ControlCommand reservation() const;
  void set_reservation(::ControlNS::ControlCommand value);
  private:
  ::ControlNS::ControlCommand _internal_reservation() const;
  void _internal_set_reservation(::ControlNS::ControlCommand value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlHeatReservePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ControlNS::ControlHeatSeatPara* heatseatpara_;
  ::ControlNS::ControlHeatHandleBarPara* heathandlebarpara_;
  uint64_t appointment_;
  int reservation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetSignalIntensityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetSignalIntensityResponse) */ {
 public:
  inline ControlGetSignalIntensityResponse() : ControlGetSignalIntensityResponse(nullptr) {}
  ~ControlGetSignalIntensityResponse() override;
  explicit constexpr ControlGetSignalIntensityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetSignalIntensityResponse(const ControlGetSignalIntensityResponse& from);
  ControlGetSignalIntensityResponse(ControlGetSignalIntensityResponse&& from) noexcept
    : ControlGetSignalIntensityResponse() {
    *this = ::std::move(from);
  }

  inline ControlGetSignalIntensityResponse& operator=(const ControlGetSignalIntensityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetSignalIntensityResponse& operator=(ControlGetSignalIntensityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetSignalIntensityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetSignalIntensityResponse* internal_default_instance() {
    return reinterpret_cast<const ControlGetSignalIntensityResponse*>(
               &_ControlGetSignalIntensityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ControlGetSignalIntensityResponse& a, ControlGetSignalIntensityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetSignalIntensityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetSignalIntensityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetSignalIntensityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetSignalIntensityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetSignalIntensityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetSignalIntensityResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetSignalIntensityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetSignalIntensityResponse";
  }
  protected:
  explicit ControlGetSignalIntensityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetSignalIntensityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetSignalIntensityPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetSignalIntensityPara) */ {
 public:
  inline ControlGetSignalIntensityPara() : ControlGetSignalIntensityPara(nullptr) {}
  ~ControlGetSignalIntensityPara() override;
  explicit constexpr ControlGetSignalIntensityPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetSignalIntensityPara(const ControlGetSignalIntensityPara& from);
  ControlGetSignalIntensityPara(ControlGetSignalIntensityPara&& from) noexcept
    : ControlGetSignalIntensityPara() {
    *this = ::std::move(from);
  }

  inline ControlGetSignalIntensityPara& operator=(const ControlGetSignalIntensityPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetSignalIntensityPara& operator=(ControlGetSignalIntensityPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetSignalIntensityPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetSignalIntensityPara* internal_default_instance() {
    return reinterpret_cast<const ControlGetSignalIntensityPara*>(
               &_ControlGetSignalIntensityPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ControlGetSignalIntensityPara& a, ControlGetSignalIntensityPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetSignalIntensityPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetSignalIntensityPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetSignalIntensityPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetSignalIntensityPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetSignalIntensityPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetSignalIntensityPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetSignalIntensityPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetSignalIntensityPara";
  }
  protected:
  explicit ControlGetSignalIntensityPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalIntensityFieldNumber = 1,
  };
  // uint32 signalIntensity = 1;
  void clear_signalintensity();
  uint32_t signalintensity() const;
  void set_signalintensity(uint32_t value);
  private:
  uint32_t _internal_signalintensity() const;
  void _internal_set_signalintensity(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetSignalIntensityPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t signalintensity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetAPNNameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetAPNNameResponse) */ {
 public:
  inline ControlGetAPNNameResponse() : ControlGetAPNNameResponse(nullptr) {}
  ~ControlGetAPNNameResponse() override;
  explicit constexpr ControlGetAPNNameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetAPNNameResponse(const ControlGetAPNNameResponse& from);
  ControlGetAPNNameResponse(ControlGetAPNNameResponse&& from) noexcept
    : ControlGetAPNNameResponse() {
    *this = ::std::move(from);
  }

  inline ControlGetAPNNameResponse& operator=(const ControlGetAPNNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetAPNNameResponse& operator=(ControlGetAPNNameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetAPNNameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetAPNNameResponse* internal_default_instance() {
    return reinterpret_cast<const ControlGetAPNNameResponse*>(
               &_ControlGetAPNNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ControlGetAPNNameResponse& a, ControlGetAPNNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetAPNNameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetAPNNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetAPNNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetAPNNameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetAPNNameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetAPNNameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetAPNNameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetAPNNameResponse";
  }
  protected:
  explicit ControlGetAPNNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetAPNNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetAPNNameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetAPNNameResponse) */ {
 public:
  inline ControlSetAPNNameResponse() : ControlSetAPNNameResponse(nullptr) {}
  ~ControlSetAPNNameResponse() override;
  explicit constexpr ControlSetAPNNameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetAPNNameResponse(const ControlSetAPNNameResponse& from);
  ControlSetAPNNameResponse(ControlSetAPNNameResponse&& from) noexcept
    : ControlSetAPNNameResponse() {
    *this = ::std::move(from);
  }

  inline ControlSetAPNNameResponse& operator=(const ControlSetAPNNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetAPNNameResponse& operator=(ControlSetAPNNameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetAPNNameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetAPNNameResponse* internal_default_instance() {
    return reinterpret_cast<const ControlSetAPNNameResponse*>(
               &_ControlSetAPNNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ControlSetAPNNameResponse& a, ControlSetAPNNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetAPNNameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetAPNNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetAPNNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetAPNNameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetAPNNameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetAPNNameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetAPNNameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetAPNNameResponse";
  }
  protected:
  explicit ControlSetAPNNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetAPNNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class APN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.APN) */ {
 public:
  inline APN() : APN(nullptr) {}
  ~APN() override;
  explicit constexpr APN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APN(const APN& from);
  APN(APN&& from) noexcept
    : APN() {
    *this = ::std::move(from);
  }

  inline APN& operator=(const APN& from) {
    CopyFrom(from);
    return *this;
  }
  inline APN& operator=(APN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APN& default_instance() {
    return *internal_default_instance();
  }
  static inline const APN* internal_default_instance() {
    return reinterpret_cast<const APN*>(
               &_APN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(APN& a, APN& b) {
    a.Swap(&b);
  }
  inline void Swap(APN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  APN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<APN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const APN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const APN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.APN";
  }
  protected:
  explicit APN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApnFieldNumber = 2,
    kChannelFieldNumber = 1,
  };
  // string apn = 2;
  void clear_apn();
  const std::string& apn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apn();
  PROTOBUF_NODISCARD std::string* release_apn();
  void set_allocated_apn(std::string* apn);
  private:
  const std::string& _internal_apn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apn(const std::string& value);
  std::string* _internal_mutable_apn();
  public:

  // uint32 channel = 1;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.APN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apn_;
  uint32_t channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlAPNNamePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlAPNNamePara) */ {
 public:
  inline ControlAPNNamePara() : ControlAPNNamePara(nullptr) {}
  ~ControlAPNNamePara() override;
  explicit constexpr ControlAPNNamePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlAPNNamePara(const ControlAPNNamePara& from);
  ControlAPNNamePara(ControlAPNNamePara&& from) noexcept
    : ControlAPNNamePara() {
    *this = ::std::move(from);
  }

  inline ControlAPNNamePara& operator=(const ControlAPNNamePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlAPNNamePara& operator=(ControlAPNNamePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlAPNNamePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlAPNNamePara* internal_default_instance() {
    return reinterpret_cast<const ControlAPNNamePara*>(
               &_ControlAPNNamePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ControlAPNNamePara& a, ControlAPNNamePara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlAPNNamePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlAPNNamePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlAPNNamePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlAPNNamePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlAPNNamePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlAPNNamePara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlAPNNamePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlAPNNamePara";
  }
  protected:
  explicit ControlAPNNamePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated .ControlNS.APN names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  ::ControlNS::APN* mutable_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::APN >*
      mutable_names();
  private:
  const ::ControlNS::APN& _internal_names(int index) const;
  ::ControlNS::APN* _internal_add_names();
  public:
  const ::ControlNS::APN& names(int index) const;
  ::ControlNS::APN* add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::APN >&
      names() const;

  // @@protoc_insertion_point(class_scope:ControlNS.ControlAPNNamePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::APN > names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetFrequencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetFrequencyResponse) */ {
 public:
  inline ControlSetFrequencyResponse() : ControlSetFrequencyResponse(nullptr) {}
  ~ControlSetFrequencyResponse() override;
  explicit constexpr ControlSetFrequencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetFrequencyResponse(const ControlSetFrequencyResponse& from);
  ControlSetFrequencyResponse(ControlSetFrequencyResponse&& from) noexcept
    : ControlSetFrequencyResponse() {
    *this = ::std::move(from);
  }

  inline ControlSetFrequencyResponse& operator=(const ControlSetFrequencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetFrequencyResponse& operator=(ControlSetFrequencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetFrequencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetFrequencyResponse* internal_default_instance() {
    return reinterpret_cast<const ControlSetFrequencyResponse*>(
               &_ControlSetFrequencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ControlSetFrequencyResponse& a, ControlSetFrequencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetFrequencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetFrequencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetFrequencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetFrequencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetFrequencyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetFrequencyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetFrequencyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetFrequencyResponse";
  }
  protected:
  explicit ControlSetFrequencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetFrequencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetFrequencyPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetFrequencyPara) */ {
 public:
  inline ControlSetFrequencyPara() : ControlSetFrequencyPara(nullptr) {}
  ~ControlSetFrequencyPara() override;
  explicit constexpr ControlSetFrequencyPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetFrequencyPara(const ControlSetFrequencyPara& from);
  ControlSetFrequencyPara(ControlSetFrequencyPara&& from) noexcept
    : ControlSetFrequencyPara() {
    *this = ::std::move(from);
  }

  inline ControlSetFrequencyPara& operator=(const ControlSetFrequencyPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetFrequencyPara& operator=(ControlSetFrequencyPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetFrequencyPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetFrequencyPara* internal_default_instance() {
    return reinterpret_cast<const ControlSetFrequencyPara*>(
               &_ControlSetFrequencyPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ControlSetFrequencyPara& a, ControlSetFrequencyPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetFrequencyPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetFrequencyPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetFrequencyPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetFrequencyPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetFrequencyPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetFrequencyPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetFrequencyPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetFrequencyPara";
  }
  protected:
  explicit ControlSetFrequencyPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyFieldNumber = 1,
  };
  // uint32 frequency = 1;
  void clear_frequency();
  uint32_t frequency() const;
  void set_frequency(uint32_t value);
  private:
  uint32_t _internal_frequency() const;
  void _internal_set_frequency(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetFrequencyPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetSentinelModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetSentinelModeResponse) */ {
 public:
  inline ControlSetSentinelModeResponse() : ControlSetSentinelModeResponse(nullptr) {}
  ~ControlSetSentinelModeResponse() override;
  explicit constexpr ControlSetSentinelModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetSentinelModeResponse(const ControlSetSentinelModeResponse& from);
  ControlSetSentinelModeResponse(ControlSetSentinelModeResponse&& from) noexcept
    : ControlSetSentinelModeResponse() {
    *this = ::std::move(from);
  }

  inline ControlSetSentinelModeResponse& operator=(const ControlSetSentinelModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetSentinelModeResponse& operator=(ControlSetSentinelModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetSentinelModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetSentinelModeResponse* internal_default_instance() {
    return reinterpret_cast<const ControlSetSentinelModeResponse*>(
               &_ControlSetSentinelModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ControlSetSentinelModeResponse& a, ControlSetSentinelModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetSentinelModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetSentinelModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetSentinelModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetSentinelModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetSentinelModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetSentinelModeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetSentinelModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetSentinelModeResponse";
  }
  protected:
  explicit ControlSetSentinelModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetSentinelModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlSetSentinelModePara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlSetSentinelModePara) */ {
 public:
  inline ControlSetSentinelModePara() : ControlSetSentinelModePara(nullptr) {}
  ~ControlSetSentinelModePara() override;
  explicit constexpr ControlSetSentinelModePara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlSetSentinelModePara(const ControlSetSentinelModePara& from);
  ControlSetSentinelModePara(ControlSetSentinelModePara&& from) noexcept
    : ControlSetSentinelModePara() {
    *this = ::std::move(from);
  }

  inline ControlSetSentinelModePara& operator=(const ControlSetSentinelModePara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSetSentinelModePara& operator=(ControlSetSentinelModePara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlSetSentinelModePara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlSetSentinelModePara* internal_default_instance() {
    return reinterpret_cast<const ControlSetSentinelModePara*>(
               &_ControlSetSentinelModePara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ControlSetSentinelModePara& a, ControlSetSentinelModePara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSetSentinelModePara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlSetSentinelModePara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlSetSentinelModePara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlSetSentinelModePara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlSetSentinelModePara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlSetSentinelModePara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSetSentinelModePara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlSetSentinelModePara";
  }
  protected:
  explicit ControlSetSentinelModePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchFieldNumber = 1,
  };
  // .ControlNS.SWITCH switch = 1;
  void clear_switch_();
  ::ControlNS::SWITCH switch_() const;
  void set_switch_(::ControlNS::SWITCH value);
  private:
  ::ControlNS::SWITCH _internal_switch_() const;
  void _internal_set_switch_(::ControlNS::SWITCH value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlSetSentinelModePara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int switch__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetECUVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetECUVersionResponse) */ {
 public:
  inline ControlGetECUVersionResponse() : ControlGetECUVersionResponse(nullptr) {}
  ~ControlGetECUVersionResponse() override;
  explicit constexpr ControlGetECUVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetECUVersionResponse(const ControlGetECUVersionResponse& from);
  ControlGetECUVersionResponse(ControlGetECUVersionResponse&& from) noexcept
    : ControlGetECUVersionResponse() {
    *this = ::std::move(from);
  }

  inline ControlGetECUVersionResponse& operator=(const ControlGetECUVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetECUVersionResponse& operator=(ControlGetECUVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetECUVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetECUVersionResponse* internal_default_instance() {
    return reinterpret_cast<const ControlGetECUVersionResponse*>(
               &_ControlGetECUVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ControlGetECUVersionResponse& a, ControlGetECUVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetECUVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetECUVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetECUVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetECUVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetECUVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetECUVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetECUVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetECUVersionResponse";
  }
  protected:
  explicit ControlGetECUVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetECUVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ECUVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ECUVersion) */ {
 public:
  inline ECUVersion() : ECUVersion(nullptr) {}
  ~ECUVersion() override;
  explicit constexpr ECUVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECUVersion(const ECUVersion& from);
  ECUVersion(ECUVersion&& from) noexcept
    : ECUVersion() {
    *this = ::std::move(from);
  }

  inline ECUVersion& operator=(const ECUVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECUVersion& operator=(ECUVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECUVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECUVersion* internal_default_instance() {
    return reinterpret_cast<const ECUVersion*>(
               &_ECUVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ECUVersion& a, ECUVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ECUVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECUVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECUVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECUVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECUVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECUVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECUVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ECUVersion";
  }
  protected:
  explicit ECUVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareFieldNumber = 2,
    kSoftwareFieldNumber = 3,
    kProtocolFieldNumber = 4,
    kManufacturerFieldNumber = 5,
    kEcuFieldNumber = 1,
  };
  // string firmware = 2;
  void clear_firmware();
  const std::string& firmware() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firmware(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firmware();
  PROTOBUF_NODISCARD std::string* release_firmware();
  void set_allocated_firmware(std::string* firmware);
  private:
  const std::string& _internal_firmware() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firmware(const std::string& value);
  std::string* _internal_mutable_firmware();
  public:

  // string software = 3;
  void clear_software();
  const std::string& software() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_software(ArgT0&& arg0, ArgT... args);
  std::string* mutable_software();
  PROTOBUF_NODISCARD std::string* release_software();
  void set_allocated_software(std::string* software);
  private:
  const std::string& _internal_software() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_software(const std::string& value);
  std::string* _internal_mutable_software();
  public:

  // string protocol = 4;
  void clear_protocol();
  const std::string& protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string manufacturer = 5;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer();
  PROTOBUF_NODISCARD std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // .DiagnoseNS.Ecus ecu = 1;
  void clear_ecu();
  ::DiagnoseNS::Ecus ecu() const;
  void set_ecu(::DiagnoseNS::Ecus value);
  private:
  ::DiagnoseNS::Ecus _internal_ecu() const;
  void _internal_set_ecu(::DiagnoseNS::Ecus value);
  public:

  // @@protoc_insertion_point(class_scope:ControlNS.ECUVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr software_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  int ecu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// -------------------------------------------------------------------

class ControlGetECUVersionPara final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlNS.ControlGetECUVersionPara) */ {
 public:
  inline ControlGetECUVersionPara() : ControlGetECUVersionPara(nullptr) {}
  ~ControlGetECUVersionPara() override;
  explicit constexpr ControlGetECUVersionPara(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlGetECUVersionPara(const ControlGetECUVersionPara& from);
  ControlGetECUVersionPara(ControlGetECUVersionPara&& from) noexcept
    : ControlGetECUVersionPara() {
    *this = ::std::move(from);
  }

  inline ControlGetECUVersionPara& operator=(const ControlGetECUVersionPara& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGetECUVersionPara& operator=(ControlGetECUVersionPara&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGetECUVersionPara& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGetECUVersionPara* internal_default_instance() {
    return reinterpret_cast<const ControlGetECUVersionPara*>(
               &_ControlGetECUVersionPara_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ControlGetECUVersionPara& a, ControlGetECUVersionPara& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGetECUVersionPara* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGetECUVersionPara* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGetECUVersionPara* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGetECUVersionPara>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlGetECUVersionPara& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlGetECUVersionPara& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGetECUVersionPara* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlNS.ControlGetECUVersionPara";
  }
  protected:
  explicit ControlGetECUVersionPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .ControlNS.ECUVersion info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::ControlNS::ECUVersion* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::ECUVersion >*
      mutable_info();
  private:
  const ::ControlNS::ECUVersion& _internal_info(int index) const;
  ::ControlNS::ECUVersion* _internal_add_info();
  public:
  const ::ControlNS::ECUVersion& info(int index) const;
  ::ControlNS::ECUVersion* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::ECUVersion >&
      info() const;

  // @@protoc_insertion_point(class_scope:ControlNS.ControlGetECUVersionPara)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::ECUVersion > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Control

// string taskID = 1;
inline void Control::clear_taskid() {
  taskid_.ClearToEmpty();
}
inline const std::string& Control::taskid() const {
  // @@protoc_insertion_point(field_get:ControlNS.Control.taskID)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Control::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.Control.taskID)
}
inline std::string* Control::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:ControlNS.Control.taskID)
  return _s;
}
inline const std::string& Control::_internal_taskid() const {
  return taskid_.Get();
}
inline void Control::_internal_set_taskid(const std::string& value) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Control::_internal_mutable_taskid() {
  
  return taskid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Control::release_taskid() {
  // @@protoc_insertion_point(field_release:ControlNS.Control.taskID)
  return taskid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Control::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (taskid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Control.taskID)
}

// uint32 command = 2;
inline void Control::clear_command() {
  command_ = 0u;
}
inline uint32_t Control::_internal_command() const {
  return command_;
}
inline uint32_t Control::command() const {
  // @@protoc_insertion_point(field_get:ControlNS.Control.command)
  return _internal_command();
}
inline void Control::_internal_set_command(uint32_t value) {
  
  command_ = value;
}
inline void Control::set_command(uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ControlNS.Control.command)
}

// .ControlNS.ControlCommand controlCommand = 3;
inline void Control::clear_controlcommand() {
  controlcommand_ = 0;
}
inline ::ControlNS::ControlCommand Control::_internal_controlcommand() const {
  return static_cast< ::ControlNS::ControlCommand >(controlcommand_);
}
inline ::ControlNS::ControlCommand Control::controlcommand() const {
  // @@protoc_insertion_point(field_get:ControlNS.Control.controlCommand)
  return _internal_controlcommand();
}
inline void Control::_internal_set_controlcommand(::ControlNS::ControlCommand value) {
  
  controlcommand_ = value;
}
inline void Control::set_controlcommand(::ControlNS::ControlCommand value) {
  _internal_set_controlcommand(value);
  // @@protoc_insertion_point(field_set:ControlNS.Control.controlCommand)
}

// .ControlNS.ControlResponse controlResponse = 4;
inline bool Control::_internal_has_controlresponse() const {
  return this != internal_default_instance() && controlresponse_ != nullptr;
}
inline bool Control::has_controlresponse() const {
  return _internal_has_controlresponse();
}
inline void Control::clear_controlresponse() {
  if (GetArenaForAllocation() == nullptr && controlresponse_ != nullptr) {
    delete controlresponse_;
  }
  controlresponse_ = nullptr;
}
inline const ::ControlNS::ControlResponse& Control::_internal_controlresponse() const {
  const ::ControlNS::ControlResponse* p = controlresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlResponse&>(
      ::ControlNS::_ControlResponse_default_instance_);
}
inline const ::ControlNS::ControlResponse& Control::controlresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.Control.controlResponse)
  return _internal_controlresponse();
}
inline void Control::unsafe_arena_set_allocated_controlresponse(
    ::ControlNS::ControlResponse* controlresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlresponse_);
  }
  controlresponse_ = controlresponse;
  if (controlresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Control.controlResponse)
}
inline ::ControlNS::ControlResponse* Control::release_controlresponse() {
  
  ::ControlNS::ControlResponse* temp = controlresponse_;
  controlresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlResponse* Control::unsafe_arena_release_controlresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.Control.controlResponse)
  
  ::ControlNS::ControlResponse* temp = controlresponse_;
  controlresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlResponse* Control::_internal_mutable_controlresponse() {
  
  if (controlresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlResponse>(GetArenaForAllocation());
    controlresponse_ = p;
  }
  return controlresponse_;
}
inline ::ControlNS::ControlResponse* Control::mutable_controlresponse() {
  ::ControlNS::ControlResponse* _msg = _internal_mutable_controlresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.Control.controlResponse)
  return _msg;
}
inline void Control::set_allocated_controlresponse(::ControlNS::ControlResponse* controlresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlresponse_;
  }
  if (controlresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlResponse>::GetOwningArena(controlresponse);
    if (message_arena != submessage_arena) {
      controlresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlresponse_ = controlresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Control.controlResponse)
}

// uint32 paraType = 5;
inline void Control::clear_paratype() {
  paratype_ = 0u;
}
inline uint32_t Control::_internal_paratype() const {
  return paratype_;
}
inline uint32_t Control::paratype() const {
  // @@protoc_insertion_point(field_get:ControlNS.Control.paraType)
  return _internal_paratype();
}
inline void Control::_internal_set_paratype(uint32_t value) {
  
  paratype_ = value;
}
inline void Control::set_paratype(uint32_t value) {
  _internal_set_paratype(value);
  // @@protoc_insertion_point(field_set:ControlNS.Control.paraType)
}

// .ControlNS.Parameters para = 6;
inline bool Control::_internal_has_para() const {
  return this != internal_default_instance() && para_ != nullptr;
}
inline bool Control::has_para() const {
  return _internal_has_para();
}
inline void Control::clear_para() {
  if (GetArenaForAllocation() == nullptr && para_ != nullptr) {
    delete para_;
  }
  para_ = nullptr;
}
inline const ::ControlNS::Parameters& Control::_internal_para() const {
  const ::ControlNS::Parameters* p = para_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::Parameters&>(
      ::ControlNS::_Parameters_default_instance_);
}
inline const ::ControlNS::Parameters& Control::para() const {
  // @@protoc_insertion_point(field_get:ControlNS.Control.para)
  return _internal_para();
}
inline void Control::unsafe_arena_set_allocated_para(
    ::ControlNS::Parameters* para) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(para_);
  }
  para_ = para;
  if (para) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Control.para)
}
inline ::ControlNS::Parameters* Control::release_para() {
  
  ::ControlNS::Parameters* temp = para_;
  para_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::Parameters* Control::unsafe_arena_release_para() {
  // @@protoc_insertion_point(field_release:ControlNS.Control.para)
  
  ::ControlNS::Parameters* temp = para_;
  para_ = nullptr;
  return temp;
}
inline ::ControlNS::Parameters* Control::_internal_mutable_para() {
  
  if (para_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::Parameters>(GetArenaForAllocation());
    para_ = p;
  }
  return para_;
}
inline ::ControlNS::Parameters* Control::mutable_para() {
  ::ControlNS::Parameters* _msg = _internal_mutable_para();
  // @@protoc_insertion_point(field_mutable:ControlNS.Control.para)
  return _msg;
}
inline void Control::set_allocated_para(::ControlNS::Parameters* para) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete para_;
  }
  if (para) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::Parameters>::GetOwningArena(para);
    if (message_arena != submessage_arena) {
      para = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, para, submessage_arena);
    }
    
  } else {
    
  }
  para_ = para;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Control.para)
}

// -------------------------------------------------------------------

// ControlResponse

// .ControlNS.ControlEngineResponse controlEngineResponse = 1;
inline bool ControlResponse::_internal_has_controlengineresponse() const {
  return this != internal_default_instance() && controlengineresponse_ != nullptr;
}
inline bool ControlResponse::has_controlengineresponse() const {
  return _internal_has_controlengineresponse();
}
inline void ControlResponse::clear_controlengineresponse() {
  if (GetArenaForAllocation() == nullptr && controlengineresponse_ != nullptr) {
    delete controlengineresponse_;
  }
  controlengineresponse_ = nullptr;
}
inline const ::ControlNS::ControlEngineResponse& ControlResponse::_internal_controlengineresponse() const {
  const ::ControlNS::ControlEngineResponse* p = controlengineresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlEngineResponse&>(
      ::ControlNS::_ControlEngineResponse_default_instance_);
}
inline const ::ControlNS::ControlEngineResponse& ControlResponse::controlengineresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlEngineResponse)
  return _internal_controlengineresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlengineresponse(
    ::ControlNS::ControlEngineResponse* controlengineresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlengineresponse_);
  }
  controlengineresponse_ = controlengineresponse;
  if (controlengineresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlEngineResponse)
}
inline ::ControlNS::ControlEngineResponse* ControlResponse::release_controlengineresponse() {
  
  ::ControlNS::ControlEngineResponse* temp = controlengineresponse_;
  controlengineresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlEngineResponse* ControlResponse::unsafe_arena_release_controlengineresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlEngineResponse)
  
  ::ControlNS::ControlEngineResponse* temp = controlengineresponse_;
  controlengineresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlEngineResponse* ControlResponse::_internal_mutable_controlengineresponse() {
  
  if (controlengineresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlEngineResponse>(GetArenaForAllocation());
    controlengineresponse_ = p;
  }
  return controlengineresponse_;
}
inline ::ControlNS::ControlEngineResponse* ControlResponse::mutable_controlengineresponse() {
  ::ControlNS::ControlEngineResponse* _msg = _internal_mutable_controlengineresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlEngineResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlengineresponse(::ControlNS::ControlEngineResponse* controlengineresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlengineresponse_;
  }
  if (controlengineresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlEngineResponse>::GetOwningArena(controlengineresponse);
    if (message_arena != submessage_arena) {
      controlengineresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlengineresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlengineresponse_ = controlengineresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlEngineResponse)
}

// .ControlNS.ControlFindCarResponse controlFindCarResponse = 2;
inline bool ControlResponse::_internal_has_controlfindcarresponse() const {
  return this != internal_default_instance() && controlfindcarresponse_ != nullptr;
}
inline bool ControlResponse::has_controlfindcarresponse() const {
  return _internal_has_controlfindcarresponse();
}
inline void ControlResponse::clear_controlfindcarresponse() {
  if (GetArenaForAllocation() == nullptr && controlfindcarresponse_ != nullptr) {
    delete controlfindcarresponse_;
  }
  controlfindcarresponse_ = nullptr;
}
inline const ::ControlNS::ControlFindCarResponse& ControlResponse::_internal_controlfindcarresponse() const {
  const ::ControlNS::ControlFindCarResponse* p = controlfindcarresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlFindCarResponse&>(
      ::ControlNS::_ControlFindCarResponse_default_instance_);
}
inline const ::ControlNS::ControlFindCarResponse& ControlResponse::controlfindcarresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlFindCarResponse)
  return _internal_controlfindcarresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlfindcarresponse(
    ::ControlNS::ControlFindCarResponse* controlfindcarresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfindcarresponse_);
  }
  controlfindcarresponse_ = controlfindcarresponse;
  if (controlfindcarresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlFindCarResponse)
}
inline ::ControlNS::ControlFindCarResponse* ControlResponse::release_controlfindcarresponse() {
  
  ::ControlNS::ControlFindCarResponse* temp = controlfindcarresponse_;
  controlfindcarresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlFindCarResponse* ControlResponse::unsafe_arena_release_controlfindcarresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlFindCarResponse)
  
  ::ControlNS::ControlFindCarResponse* temp = controlfindcarresponse_;
  controlfindcarresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlFindCarResponse* ControlResponse::_internal_mutable_controlfindcarresponse() {
  
  if (controlfindcarresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlFindCarResponse>(GetArenaForAllocation());
    controlfindcarresponse_ = p;
  }
  return controlfindcarresponse_;
}
inline ::ControlNS::ControlFindCarResponse* ControlResponse::mutable_controlfindcarresponse() {
  ::ControlNS::ControlFindCarResponse* _msg = _internal_mutable_controlfindcarresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlFindCarResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlfindcarresponse(::ControlNS::ControlFindCarResponse* controlfindcarresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlfindcarresponse_;
  }
  if (controlfindcarresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlFindCarResponse>::GetOwningArena(controlfindcarresponse);
    if (message_arena != submessage_arena) {
      controlfindcarresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlfindcarresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlfindcarresponse_ = controlfindcarresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlFindCarResponse)
}

// .ControlNS.ControlGearReportResponse controlGearReportResponse = 3;
inline bool ControlResponse::_internal_has_controlgearreportresponse() const {
  return this != internal_default_instance() && controlgearreportresponse_ != nullptr;
}
inline bool ControlResponse::has_controlgearreportresponse() const {
  return _internal_has_controlgearreportresponse();
}
inline void ControlResponse::clear_controlgearreportresponse() {
  if (GetArenaForAllocation() == nullptr && controlgearreportresponse_ != nullptr) {
    delete controlgearreportresponse_;
  }
  controlgearreportresponse_ = nullptr;
}
inline const ::ControlNS::ControlGearReportResponse& ControlResponse::_internal_controlgearreportresponse() const {
  const ::ControlNS::ControlGearReportResponse* p = controlgearreportresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGearReportResponse&>(
      ::ControlNS::_ControlGearReportResponse_default_instance_);
}
inline const ::ControlNS::ControlGearReportResponse& ControlResponse::controlgearreportresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlGearReportResponse)
  return _internal_controlgearreportresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlgearreportresponse(
    ::ControlNS::ControlGearReportResponse* controlgearreportresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgearreportresponse_);
  }
  controlgearreportresponse_ = controlgearreportresponse;
  if (controlgearreportresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlGearReportResponse)
}
inline ::ControlNS::ControlGearReportResponse* ControlResponse::release_controlgearreportresponse() {
  
  ::ControlNS::ControlGearReportResponse* temp = controlgearreportresponse_;
  controlgearreportresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGearReportResponse* ControlResponse::unsafe_arena_release_controlgearreportresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlGearReportResponse)
  
  ::ControlNS::ControlGearReportResponse* temp = controlgearreportresponse_;
  controlgearreportresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGearReportResponse* ControlResponse::_internal_mutable_controlgearreportresponse() {
  
  if (controlgearreportresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGearReportResponse>(GetArenaForAllocation());
    controlgearreportresponse_ = p;
  }
  return controlgearreportresponse_;
}
inline ::ControlNS::ControlGearReportResponse* ControlResponse::mutable_controlgearreportresponse() {
  ::ControlNS::ControlGearReportResponse* _msg = _internal_mutable_controlgearreportresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlGearReportResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlgearreportresponse(::ControlNS::ControlGearReportResponse* controlgearreportresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgearreportresponse_;
  }
  if (controlgearreportresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGearReportResponse>::GetOwningArena(controlgearreportresponse);
    if (message_arena != submessage_arena) {
      controlgearreportresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgearreportresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlgearreportresponse_ = controlgearreportresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlGearReportResponse)
}

// .ControlNS.ControlGetPositionResponse controlGetPositionResponse = 4;
inline bool ControlResponse::_internal_has_controlgetpositionresponse() const {
  return this != internal_default_instance() && controlgetpositionresponse_ != nullptr;
}
inline bool ControlResponse::has_controlgetpositionresponse() const {
  return _internal_has_controlgetpositionresponse();
}
inline void ControlResponse::clear_controlgetpositionresponse() {
  if (GetArenaForAllocation() == nullptr && controlgetpositionresponse_ != nullptr) {
    delete controlgetpositionresponse_;
  }
  controlgetpositionresponse_ = nullptr;
}
inline const ::ControlNS::ControlGetPositionResponse& ControlResponse::_internal_controlgetpositionresponse() const {
  const ::ControlNS::ControlGetPositionResponse* p = controlgetpositionresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetPositionResponse&>(
      ::ControlNS::_ControlGetPositionResponse_default_instance_);
}
inline const ::ControlNS::ControlGetPositionResponse& ControlResponse::controlgetpositionresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlGetPositionResponse)
  return _internal_controlgetpositionresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlgetpositionresponse(
    ::ControlNS::ControlGetPositionResponse* controlgetpositionresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgetpositionresponse_);
  }
  controlgetpositionresponse_ = controlgetpositionresponse;
  if (controlgetpositionresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlGetPositionResponse)
}
inline ::ControlNS::ControlGetPositionResponse* ControlResponse::release_controlgetpositionresponse() {
  
  ::ControlNS::ControlGetPositionResponse* temp = controlgetpositionresponse_;
  controlgetpositionresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetPositionResponse* ControlResponse::unsafe_arena_release_controlgetpositionresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlGetPositionResponse)
  
  ::ControlNS::ControlGetPositionResponse* temp = controlgetpositionresponse_;
  controlgetpositionresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetPositionResponse* ControlResponse::_internal_mutable_controlgetpositionresponse() {
  
  if (controlgetpositionresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetPositionResponse>(GetArenaForAllocation());
    controlgetpositionresponse_ = p;
  }
  return controlgetpositionresponse_;
}
inline ::ControlNS::ControlGetPositionResponse* ControlResponse::mutable_controlgetpositionresponse() {
  ::ControlNS::ControlGetPositionResponse* _msg = _internal_mutable_controlgetpositionresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlGetPositionResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlgetpositionresponse(::ControlNS::ControlGetPositionResponse* controlgetpositionresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgetpositionresponse_;
  }
  if (controlgetpositionresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetPositionResponse>::GetOwningArena(controlgetpositionresponse);
    if (message_arena != submessage_arena) {
      controlgetpositionresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgetpositionresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlgetpositionresponse_ = controlgetpositionresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlGetPositionResponse)
}

// .ControlNS.ControlGetTPMSResponse controlGetTPMSResponse = 5;
inline bool ControlResponse::_internal_has_controlgettpmsresponse() const {
  return this != internal_default_instance() && controlgettpmsresponse_ != nullptr;
}
inline bool ControlResponse::has_controlgettpmsresponse() const {
  return _internal_has_controlgettpmsresponse();
}
inline void ControlResponse::clear_controlgettpmsresponse() {
  if (GetArenaForAllocation() == nullptr && controlgettpmsresponse_ != nullptr) {
    delete controlgettpmsresponse_;
  }
  controlgettpmsresponse_ = nullptr;
}
inline const ::ControlNS::ControlGetTPMSResponse& ControlResponse::_internal_controlgettpmsresponse() const {
  const ::ControlNS::ControlGetTPMSResponse* p = controlgettpmsresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetTPMSResponse&>(
      ::ControlNS::_ControlGetTPMSResponse_default_instance_);
}
inline const ::ControlNS::ControlGetTPMSResponse& ControlResponse::controlgettpmsresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlGetTPMSResponse)
  return _internal_controlgettpmsresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlgettpmsresponse(
    ::ControlNS::ControlGetTPMSResponse* controlgettpmsresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgettpmsresponse_);
  }
  controlgettpmsresponse_ = controlgettpmsresponse;
  if (controlgettpmsresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlGetTPMSResponse)
}
inline ::ControlNS::ControlGetTPMSResponse* ControlResponse::release_controlgettpmsresponse() {
  
  ::ControlNS::ControlGetTPMSResponse* temp = controlgettpmsresponse_;
  controlgettpmsresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetTPMSResponse* ControlResponse::unsafe_arena_release_controlgettpmsresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlGetTPMSResponse)
  
  ::ControlNS::ControlGetTPMSResponse* temp = controlgettpmsresponse_;
  controlgettpmsresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetTPMSResponse* ControlResponse::_internal_mutable_controlgettpmsresponse() {
  
  if (controlgettpmsresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetTPMSResponse>(GetArenaForAllocation());
    controlgettpmsresponse_ = p;
  }
  return controlgettpmsresponse_;
}
inline ::ControlNS::ControlGetTPMSResponse* ControlResponse::mutable_controlgettpmsresponse() {
  ::ControlNS::ControlGetTPMSResponse* _msg = _internal_mutable_controlgettpmsresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlGetTPMSResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlgettpmsresponse(::ControlNS::ControlGetTPMSResponse* controlgettpmsresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgettpmsresponse_;
  }
  if (controlgettpmsresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetTPMSResponse>::GetOwningArena(controlgettpmsresponse);
    if (message_arena != submessage_arena) {
      controlgettpmsresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgettpmsresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlgettpmsresponse_ = controlgettpmsresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlGetTPMSResponse)
}

// .ControlNS.ControlTakeParkingPhotoResponse controlTakeParkingPhotoResponse = 6;
inline bool ControlResponse::_internal_has_controltakeparkingphotoresponse() const {
  return this != internal_default_instance() && controltakeparkingphotoresponse_ != nullptr;
}
inline bool ControlResponse::has_controltakeparkingphotoresponse() const {
  return _internal_has_controltakeparkingphotoresponse();
}
inline void ControlResponse::clear_controltakeparkingphotoresponse() {
  if (GetArenaForAllocation() == nullptr && controltakeparkingphotoresponse_ != nullptr) {
    delete controltakeparkingphotoresponse_;
  }
  controltakeparkingphotoresponse_ = nullptr;
}
inline const ::ControlNS::ControlTakeParkingPhotoResponse& ControlResponse::_internal_controltakeparkingphotoresponse() const {
  const ::ControlNS::ControlTakeParkingPhotoResponse* p = controltakeparkingphotoresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlTakeParkingPhotoResponse&>(
      ::ControlNS::_ControlTakeParkingPhotoResponse_default_instance_);
}
inline const ::ControlNS::ControlTakeParkingPhotoResponse& ControlResponse::controltakeparkingphotoresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlTakeParkingPhotoResponse)
  return _internal_controltakeparkingphotoresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controltakeparkingphotoresponse(
    ::ControlNS::ControlTakeParkingPhotoResponse* controltakeparkingphotoresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controltakeparkingphotoresponse_);
  }
  controltakeparkingphotoresponse_ = controltakeparkingphotoresponse;
  if (controltakeparkingphotoresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlTakeParkingPhotoResponse)
}
inline ::ControlNS::ControlTakeParkingPhotoResponse* ControlResponse::release_controltakeparkingphotoresponse() {
  
  ::ControlNS::ControlTakeParkingPhotoResponse* temp = controltakeparkingphotoresponse_;
  controltakeparkingphotoresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlTakeParkingPhotoResponse* ControlResponse::unsafe_arena_release_controltakeparkingphotoresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlTakeParkingPhotoResponse)
  
  ::ControlNS::ControlTakeParkingPhotoResponse* temp = controltakeparkingphotoresponse_;
  controltakeparkingphotoresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlTakeParkingPhotoResponse* ControlResponse::_internal_mutable_controltakeparkingphotoresponse() {
  
  if (controltakeparkingphotoresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlTakeParkingPhotoResponse>(GetArenaForAllocation());
    controltakeparkingphotoresponse_ = p;
  }
  return controltakeparkingphotoresponse_;
}
inline ::ControlNS::ControlTakeParkingPhotoResponse* ControlResponse::mutable_controltakeparkingphotoresponse() {
  ::ControlNS::ControlTakeParkingPhotoResponse* _msg = _internal_mutable_controltakeparkingphotoresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlTakeParkingPhotoResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controltakeparkingphotoresponse(::ControlNS::ControlTakeParkingPhotoResponse* controltakeparkingphotoresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controltakeparkingphotoresponse_;
  }
  if (controltakeparkingphotoresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlTakeParkingPhotoResponse>::GetOwningArena(controltakeparkingphotoresponse);
    if (message_arena != submessage_arena) {
      controltakeparkingphotoresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controltakeparkingphotoresponse, submessage_arena);
    }
    
  } else {
    
  }
  controltakeparkingphotoresponse_ = controltakeparkingphotoresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlTakeParkingPhotoResponse)
}

// .ControlNS.ControlSetFenceResponse controlSetRoundFenceResponse = 7;
inline bool ControlResponse::_internal_has_controlsetroundfenceresponse() const {
  return this != internal_default_instance() && controlsetroundfenceresponse_ != nullptr;
}
inline bool ControlResponse::has_controlsetroundfenceresponse() const {
  return _internal_has_controlsetroundfenceresponse();
}
inline void ControlResponse::clear_controlsetroundfenceresponse() {
  if (GetArenaForAllocation() == nullptr && controlsetroundfenceresponse_ != nullptr) {
    delete controlsetroundfenceresponse_;
  }
  controlsetroundfenceresponse_ = nullptr;
}
inline const ::ControlNS::ControlSetFenceResponse& ControlResponse::_internal_controlsetroundfenceresponse() const {
  const ::ControlNS::ControlSetFenceResponse* p = controlsetroundfenceresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetFenceResponse&>(
      ::ControlNS::_ControlSetFenceResponse_default_instance_);
}
inline const ::ControlNS::ControlSetFenceResponse& ControlResponse::controlsetroundfenceresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlSetRoundFenceResponse)
  return _internal_controlsetroundfenceresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlsetroundfenceresponse(
    ::ControlNS::ControlSetFenceResponse* controlsetroundfenceresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetroundfenceresponse_);
  }
  controlsetroundfenceresponse_ = controlsetroundfenceresponse;
  if (controlsetroundfenceresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlSetRoundFenceResponse)
}
inline ::ControlNS::ControlSetFenceResponse* ControlResponse::release_controlsetroundfenceresponse() {
  
  ::ControlNS::ControlSetFenceResponse* temp = controlsetroundfenceresponse_;
  controlsetroundfenceresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetFenceResponse* ControlResponse::unsafe_arena_release_controlsetroundfenceresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlSetRoundFenceResponse)
  
  ::ControlNS::ControlSetFenceResponse* temp = controlsetroundfenceresponse_;
  controlsetroundfenceresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetFenceResponse* ControlResponse::_internal_mutable_controlsetroundfenceresponse() {
  
  if (controlsetroundfenceresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetFenceResponse>(GetArenaForAllocation());
    controlsetroundfenceresponse_ = p;
  }
  return controlsetroundfenceresponse_;
}
inline ::ControlNS::ControlSetFenceResponse* ControlResponse::mutable_controlsetroundfenceresponse() {
  ::ControlNS::ControlSetFenceResponse* _msg = _internal_mutable_controlsetroundfenceresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlSetRoundFenceResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlsetroundfenceresponse(::ControlNS::ControlSetFenceResponse* controlsetroundfenceresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetroundfenceresponse_;
  }
  if (controlsetroundfenceresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetFenceResponse>::GetOwningArena(controlsetroundfenceresponse);
    if (message_arena != submessage_arena) {
      controlsetroundfenceresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetroundfenceresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlsetroundfenceresponse_ = controlsetroundfenceresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlSetRoundFenceResponse)
}

// .ControlNS.ControlHeatSeatResponse controlHeatSeatResponse = 8;
inline bool ControlResponse::_internal_has_controlheatseatresponse() const {
  return this != internal_default_instance() && controlheatseatresponse_ != nullptr;
}
inline bool ControlResponse::has_controlheatseatresponse() const {
  return _internal_has_controlheatseatresponse();
}
inline void ControlResponse::clear_controlheatseatresponse() {
  if (GetArenaForAllocation() == nullptr && controlheatseatresponse_ != nullptr) {
    delete controlheatseatresponse_;
  }
  controlheatseatresponse_ = nullptr;
}
inline const ::ControlNS::ControlHeatSeatResponse& ControlResponse::_internal_controlheatseatresponse() const {
  const ::ControlNS::ControlHeatSeatResponse* p = controlheatseatresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatSeatResponse&>(
      ::ControlNS::_ControlHeatSeatResponse_default_instance_);
}
inline const ::ControlNS::ControlHeatSeatResponse& ControlResponse::controlheatseatresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlHeatSeatResponse)
  return _internal_controlheatseatresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlheatseatresponse(
    ::ControlNS::ControlHeatSeatResponse* controlheatseatresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlheatseatresponse_);
  }
  controlheatseatresponse_ = controlheatseatresponse;
  if (controlheatseatresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlHeatSeatResponse)
}
inline ::ControlNS::ControlHeatSeatResponse* ControlResponse::release_controlheatseatresponse() {
  
  ::ControlNS::ControlHeatSeatResponse* temp = controlheatseatresponse_;
  controlheatseatresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatSeatResponse* ControlResponse::unsafe_arena_release_controlheatseatresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlHeatSeatResponse)
  
  ::ControlNS::ControlHeatSeatResponse* temp = controlheatseatresponse_;
  controlheatseatresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatSeatResponse* ControlResponse::_internal_mutable_controlheatseatresponse() {
  
  if (controlheatseatresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatSeatResponse>(GetArenaForAllocation());
    controlheatseatresponse_ = p;
  }
  return controlheatseatresponse_;
}
inline ::ControlNS::ControlHeatSeatResponse* ControlResponse::mutable_controlheatseatresponse() {
  ::ControlNS::ControlHeatSeatResponse* _msg = _internal_mutable_controlheatseatresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlHeatSeatResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlheatseatresponse(::ControlNS::ControlHeatSeatResponse* controlheatseatresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlheatseatresponse_;
  }
  if (controlheatseatresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatSeatResponse>::GetOwningArena(controlheatseatresponse);
    if (message_arena != submessage_arena) {
      controlheatseatresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlheatseatresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlheatseatresponse_ = controlheatseatresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlHeatSeatResponse)
}

// .ControlNS.ControlHeatHandleBarResponse controlHeatHandleBarResponse = 9;
inline bool ControlResponse::_internal_has_controlheathandlebarresponse() const {
  return this != internal_default_instance() && controlheathandlebarresponse_ != nullptr;
}
inline bool ControlResponse::has_controlheathandlebarresponse() const {
  return _internal_has_controlheathandlebarresponse();
}
inline void ControlResponse::clear_controlheathandlebarresponse() {
  if (GetArenaForAllocation() == nullptr && controlheathandlebarresponse_ != nullptr) {
    delete controlheathandlebarresponse_;
  }
  controlheathandlebarresponse_ = nullptr;
}
inline const ::ControlNS::ControlHeatHandleBarResponse& ControlResponse::_internal_controlheathandlebarresponse() const {
  const ::ControlNS::ControlHeatHandleBarResponse* p = controlheathandlebarresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatHandleBarResponse&>(
      ::ControlNS::_ControlHeatHandleBarResponse_default_instance_);
}
inline const ::ControlNS::ControlHeatHandleBarResponse& ControlResponse::controlheathandlebarresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlHeatHandleBarResponse)
  return _internal_controlheathandlebarresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlheathandlebarresponse(
    ::ControlNS::ControlHeatHandleBarResponse* controlheathandlebarresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlheathandlebarresponse_);
  }
  controlheathandlebarresponse_ = controlheathandlebarresponse;
  if (controlheathandlebarresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlHeatHandleBarResponse)
}
inline ::ControlNS::ControlHeatHandleBarResponse* ControlResponse::release_controlheathandlebarresponse() {
  
  ::ControlNS::ControlHeatHandleBarResponse* temp = controlheathandlebarresponse_;
  controlheathandlebarresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatHandleBarResponse* ControlResponse::unsafe_arena_release_controlheathandlebarresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlHeatHandleBarResponse)
  
  ::ControlNS::ControlHeatHandleBarResponse* temp = controlheathandlebarresponse_;
  controlheathandlebarresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatHandleBarResponse* ControlResponse::_internal_mutable_controlheathandlebarresponse() {
  
  if (controlheathandlebarresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatHandleBarResponse>(GetArenaForAllocation());
    controlheathandlebarresponse_ = p;
  }
  return controlheathandlebarresponse_;
}
inline ::ControlNS::ControlHeatHandleBarResponse* ControlResponse::mutable_controlheathandlebarresponse() {
  ::ControlNS::ControlHeatHandleBarResponse* _msg = _internal_mutable_controlheathandlebarresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlHeatHandleBarResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlheathandlebarresponse(::ControlNS::ControlHeatHandleBarResponse* controlheathandlebarresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlheathandlebarresponse_;
  }
  if (controlheathandlebarresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatHandleBarResponse>::GetOwningArena(controlheathandlebarresponse);
    if (message_arena != submessage_arena) {
      controlheathandlebarresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlheathandlebarresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlheathandlebarresponse_ = controlheathandlebarresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlHeatHandleBarResponse)
}

// .ControlNS.ControlHeatReserveResponse controlHeatReserveResponse = 10;
inline bool ControlResponse::_internal_has_controlheatreserveresponse() const {
  return this != internal_default_instance() && controlheatreserveresponse_ != nullptr;
}
inline bool ControlResponse::has_controlheatreserveresponse() const {
  return _internal_has_controlheatreserveresponse();
}
inline void ControlResponse::clear_controlheatreserveresponse() {
  if (GetArenaForAllocation() == nullptr && controlheatreserveresponse_ != nullptr) {
    delete controlheatreserveresponse_;
  }
  controlheatreserveresponse_ = nullptr;
}
inline const ::ControlNS::ControlHeatReserveResponse& ControlResponse::_internal_controlheatreserveresponse() const {
  const ::ControlNS::ControlHeatReserveResponse* p = controlheatreserveresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatReserveResponse&>(
      ::ControlNS::_ControlHeatReserveResponse_default_instance_);
}
inline const ::ControlNS::ControlHeatReserveResponse& ControlResponse::controlheatreserveresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlHeatReserveResponse)
  return _internal_controlheatreserveresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlheatreserveresponse(
    ::ControlNS::ControlHeatReserveResponse* controlheatreserveresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlheatreserveresponse_);
  }
  controlheatreserveresponse_ = controlheatreserveresponse;
  if (controlheatreserveresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlHeatReserveResponse)
}
inline ::ControlNS::ControlHeatReserveResponse* ControlResponse::release_controlheatreserveresponse() {
  
  ::ControlNS::ControlHeatReserveResponse* temp = controlheatreserveresponse_;
  controlheatreserveresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatReserveResponse* ControlResponse::unsafe_arena_release_controlheatreserveresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlHeatReserveResponse)
  
  ::ControlNS::ControlHeatReserveResponse* temp = controlheatreserveresponse_;
  controlheatreserveresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatReserveResponse* ControlResponse::_internal_mutable_controlheatreserveresponse() {
  
  if (controlheatreserveresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatReserveResponse>(GetArenaForAllocation());
    controlheatreserveresponse_ = p;
  }
  return controlheatreserveresponse_;
}
inline ::ControlNS::ControlHeatReserveResponse* ControlResponse::mutable_controlheatreserveresponse() {
  ::ControlNS::ControlHeatReserveResponse* _msg = _internal_mutable_controlheatreserveresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlHeatReserveResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlheatreserveresponse(::ControlNS::ControlHeatReserveResponse* controlheatreserveresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlheatreserveresponse_;
  }
  if (controlheatreserveresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatReserveResponse>::GetOwningArena(controlheatreserveresponse);
    if (message_arena != submessage_arena) {
      controlheatreserveresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlheatreserveresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlheatreserveresponse_ = controlheatreserveresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlHeatReserveResponse)
}

// .ControlNS.ControlGetSignalIntensityResponse controlGetSignalIntensityResponse = 11;
inline bool ControlResponse::_internal_has_controlgetsignalintensityresponse() const {
  return this != internal_default_instance() && controlgetsignalintensityresponse_ != nullptr;
}
inline bool ControlResponse::has_controlgetsignalintensityresponse() const {
  return _internal_has_controlgetsignalintensityresponse();
}
inline void ControlResponse::clear_controlgetsignalintensityresponse() {
  if (GetArenaForAllocation() == nullptr && controlgetsignalintensityresponse_ != nullptr) {
    delete controlgetsignalintensityresponse_;
  }
  controlgetsignalintensityresponse_ = nullptr;
}
inline const ::ControlNS::ControlGetSignalIntensityResponse& ControlResponse::_internal_controlgetsignalintensityresponse() const {
  const ::ControlNS::ControlGetSignalIntensityResponse* p = controlgetsignalintensityresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetSignalIntensityResponse&>(
      ::ControlNS::_ControlGetSignalIntensityResponse_default_instance_);
}
inline const ::ControlNS::ControlGetSignalIntensityResponse& ControlResponse::controlgetsignalintensityresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlGetSignalIntensityResponse)
  return _internal_controlgetsignalintensityresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlgetsignalintensityresponse(
    ::ControlNS::ControlGetSignalIntensityResponse* controlgetsignalintensityresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgetsignalintensityresponse_);
  }
  controlgetsignalintensityresponse_ = controlgetsignalintensityresponse;
  if (controlgetsignalintensityresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlGetSignalIntensityResponse)
}
inline ::ControlNS::ControlGetSignalIntensityResponse* ControlResponse::release_controlgetsignalintensityresponse() {
  
  ::ControlNS::ControlGetSignalIntensityResponse* temp = controlgetsignalintensityresponse_;
  controlgetsignalintensityresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetSignalIntensityResponse* ControlResponse::unsafe_arena_release_controlgetsignalintensityresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlGetSignalIntensityResponse)
  
  ::ControlNS::ControlGetSignalIntensityResponse* temp = controlgetsignalintensityresponse_;
  controlgetsignalintensityresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetSignalIntensityResponse* ControlResponse::_internal_mutable_controlgetsignalintensityresponse() {
  
  if (controlgetsignalintensityresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetSignalIntensityResponse>(GetArenaForAllocation());
    controlgetsignalintensityresponse_ = p;
  }
  return controlgetsignalintensityresponse_;
}
inline ::ControlNS::ControlGetSignalIntensityResponse* ControlResponse::mutable_controlgetsignalintensityresponse() {
  ::ControlNS::ControlGetSignalIntensityResponse* _msg = _internal_mutable_controlgetsignalintensityresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlGetSignalIntensityResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlgetsignalintensityresponse(::ControlNS::ControlGetSignalIntensityResponse* controlgetsignalintensityresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgetsignalintensityresponse_;
  }
  if (controlgetsignalintensityresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetSignalIntensityResponse>::GetOwningArena(controlgetsignalintensityresponse);
    if (message_arena != submessage_arena) {
      controlgetsignalintensityresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgetsignalintensityresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlgetsignalintensityresponse_ = controlgetsignalintensityresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlGetSignalIntensityResponse)
}

// .ControlNS.ControlGetAPNNameResponse controlGetAPNNameResponse = 12;
inline bool ControlResponse::_internal_has_controlgetapnnameresponse() const {
  return this != internal_default_instance() && controlgetapnnameresponse_ != nullptr;
}
inline bool ControlResponse::has_controlgetapnnameresponse() const {
  return _internal_has_controlgetapnnameresponse();
}
inline void ControlResponse::clear_controlgetapnnameresponse() {
  if (GetArenaForAllocation() == nullptr && controlgetapnnameresponse_ != nullptr) {
    delete controlgetapnnameresponse_;
  }
  controlgetapnnameresponse_ = nullptr;
}
inline const ::ControlNS::ControlGetAPNNameResponse& ControlResponse::_internal_controlgetapnnameresponse() const {
  const ::ControlNS::ControlGetAPNNameResponse* p = controlgetapnnameresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetAPNNameResponse&>(
      ::ControlNS::_ControlGetAPNNameResponse_default_instance_);
}
inline const ::ControlNS::ControlGetAPNNameResponse& ControlResponse::controlgetapnnameresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlGetAPNNameResponse)
  return _internal_controlgetapnnameresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlgetapnnameresponse(
    ::ControlNS::ControlGetAPNNameResponse* controlgetapnnameresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgetapnnameresponse_);
  }
  controlgetapnnameresponse_ = controlgetapnnameresponse;
  if (controlgetapnnameresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlGetAPNNameResponse)
}
inline ::ControlNS::ControlGetAPNNameResponse* ControlResponse::release_controlgetapnnameresponse() {
  
  ::ControlNS::ControlGetAPNNameResponse* temp = controlgetapnnameresponse_;
  controlgetapnnameresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetAPNNameResponse* ControlResponse::unsafe_arena_release_controlgetapnnameresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlGetAPNNameResponse)
  
  ::ControlNS::ControlGetAPNNameResponse* temp = controlgetapnnameresponse_;
  controlgetapnnameresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetAPNNameResponse* ControlResponse::_internal_mutable_controlgetapnnameresponse() {
  
  if (controlgetapnnameresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetAPNNameResponse>(GetArenaForAllocation());
    controlgetapnnameresponse_ = p;
  }
  return controlgetapnnameresponse_;
}
inline ::ControlNS::ControlGetAPNNameResponse* ControlResponse::mutable_controlgetapnnameresponse() {
  ::ControlNS::ControlGetAPNNameResponse* _msg = _internal_mutable_controlgetapnnameresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlGetAPNNameResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlgetapnnameresponse(::ControlNS::ControlGetAPNNameResponse* controlgetapnnameresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgetapnnameresponse_;
  }
  if (controlgetapnnameresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetAPNNameResponse>::GetOwningArena(controlgetapnnameresponse);
    if (message_arena != submessage_arena) {
      controlgetapnnameresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgetapnnameresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlgetapnnameresponse_ = controlgetapnnameresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlGetAPNNameResponse)
}

// .ControlNS.ControlSetFrequencyResponse controlSetFrequencyResponse = 13;
inline bool ControlResponse::_internal_has_controlsetfrequencyresponse() const {
  return this != internal_default_instance() && controlsetfrequencyresponse_ != nullptr;
}
inline bool ControlResponse::has_controlsetfrequencyresponse() const {
  return _internal_has_controlsetfrequencyresponse();
}
inline void ControlResponse::clear_controlsetfrequencyresponse() {
  if (GetArenaForAllocation() == nullptr && controlsetfrequencyresponse_ != nullptr) {
    delete controlsetfrequencyresponse_;
  }
  controlsetfrequencyresponse_ = nullptr;
}
inline const ::ControlNS::ControlSetFrequencyResponse& ControlResponse::_internal_controlsetfrequencyresponse() const {
  const ::ControlNS::ControlSetFrequencyResponse* p = controlsetfrequencyresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetFrequencyResponse&>(
      ::ControlNS::_ControlSetFrequencyResponse_default_instance_);
}
inline const ::ControlNS::ControlSetFrequencyResponse& ControlResponse::controlsetfrequencyresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlSetFrequencyResponse)
  return _internal_controlsetfrequencyresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlsetfrequencyresponse(
    ::ControlNS::ControlSetFrequencyResponse* controlsetfrequencyresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetfrequencyresponse_);
  }
  controlsetfrequencyresponse_ = controlsetfrequencyresponse;
  if (controlsetfrequencyresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlSetFrequencyResponse)
}
inline ::ControlNS::ControlSetFrequencyResponse* ControlResponse::release_controlsetfrequencyresponse() {
  
  ::ControlNS::ControlSetFrequencyResponse* temp = controlsetfrequencyresponse_;
  controlsetfrequencyresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetFrequencyResponse* ControlResponse::unsafe_arena_release_controlsetfrequencyresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlSetFrequencyResponse)
  
  ::ControlNS::ControlSetFrequencyResponse* temp = controlsetfrequencyresponse_;
  controlsetfrequencyresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetFrequencyResponse* ControlResponse::_internal_mutable_controlsetfrequencyresponse() {
  
  if (controlsetfrequencyresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetFrequencyResponse>(GetArenaForAllocation());
    controlsetfrequencyresponse_ = p;
  }
  return controlsetfrequencyresponse_;
}
inline ::ControlNS::ControlSetFrequencyResponse* ControlResponse::mutable_controlsetfrequencyresponse() {
  ::ControlNS::ControlSetFrequencyResponse* _msg = _internal_mutable_controlsetfrequencyresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlSetFrequencyResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlsetfrequencyresponse(::ControlNS::ControlSetFrequencyResponse* controlsetfrequencyresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetfrequencyresponse_;
  }
  if (controlsetfrequencyresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetFrequencyResponse>::GetOwningArena(controlsetfrequencyresponse);
    if (message_arena != submessage_arena) {
      controlsetfrequencyresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetfrequencyresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlsetfrequencyresponse_ = controlsetfrequencyresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlSetFrequencyResponse)
}

// .ControlNS.ControlSetAPNNameResponse controlSetAPNNameResponse = 14;
inline bool ControlResponse::_internal_has_controlsetapnnameresponse() const {
  return this != internal_default_instance() && controlsetapnnameresponse_ != nullptr;
}
inline bool ControlResponse::has_controlsetapnnameresponse() const {
  return _internal_has_controlsetapnnameresponse();
}
inline void ControlResponse::clear_controlsetapnnameresponse() {
  if (GetArenaForAllocation() == nullptr && controlsetapnnameresponse_ != nullptr) {
    delete controlsetapnnameresponse_;
  }
  controlsetapnnameresponse_ = nullptr;
}
inline const ::ControlNS::ControlSetAPNNameResponse& ControlResponse::_internal_controlsetapnnameresponse() const {
  const ::ControlNS::ControlSetAPNNameResponse* p = controlsetapnnameresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetAPNNameResponse&>(
      ::ControlNS::_ControlSetAPNNameResponse_default_instance_);
}
inline const ::ControlNS::ControlSetAPNNameResponse& ControlResponse::controlsetapnnameresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlSetAPNNameResponse)
  return _internal_controlsetapnnameresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlsetapnnameresponse(
    ::ControlNS::ControlSetAPNNameResponse* controlsetapnnameresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetapnnameresponse_);
  }
  controlsetapnnameresponse_ = controlsetapnnameresponse;
  if (controlsetapnnameresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlSetAPNNameResponse)
}
inline ::ControlNS::ControlSetAPNNameResponse* ControlResponse::release_controlsetapnnameresponse() {
  
  ::ControlNS::ControlSetAPNNameResponse* temp = controlsetapnnameresponse_;
  controlsetapnnameresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetAPNNameResponse* ControlResponse::unsafe_arena_release_controlsetapnnameresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlSetAPNNameResponse)
  
  ::ControlNS::ControlSetAPNNameResponse* temp = controlsetapnnameresponse_;
  controlsetapnnameresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetAPNNameResponse* ControlResponse::_internal_mutable_controlsetapnnameresponse() {
  
  if (controlsetapnnameresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetAPNNameResponse>(GetArenaForAllocation());
    controlsetapnnameresponse_ = p;
  }
  return controlsetapnnameresponse_;
}
inline ::ControlNS::ControlSetAPNNameResponse* ControlResponse::mutable_controlsetapnnameresponse() {
  ::ControlNS::ControlSetAPNNameResponse* _msg = _internal_mutable_controlsetapnnameresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlSetAPNNameResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlsetapnnameresponse(::ControlNS::ControlSetAPNNameResponse* controlsetapnnameresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetapnnameresponse_;
  }
  if (controlsetapnnameresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetAPNNameResponse>::GetOwningArena(controlsetapnnameresponse);
    if (message_arena != submessage_arena) {
      controlsetapnnameresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetapnnameresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlsetapnnameresponse_ = controlsetapnnameresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlSetAPNNameResponse)
}

// .ControlNS.ControlSetSentinelModeResponse controlSetSentinelModeResponse = 15;
inline bool ControlResponse::_internal_has_controlsetsentinelmoderesponse() const {
  return this != internal_default_instance() && controlsetsentinelmoderesponse_ != nullptr;
}
inline bool ControlResponse::has_controlsetsentinelmoderesponse() const {
  return _internal_has_controlsetsentinelmoderesponse();
}
inline void ControlResponse::clear_controlsetsentinelmoderesponse() {
  if (GetArenaForAllocation() == nullptr && controlsetsentinelmoderesponse_ != nullptr) {
    delete controlsetsentinelmoderesponse_;
  }
  controlsetsentinelmoderesponse_ = nullptr;
}
inline const ::ControlNS::ControlSetSentinelModeResponse& ControlResponse::_internal_controlsetsentinelmoderesponse() const {
  const ::ControlNS::ControlSetSentinelModeResponse* p = controlsetsentinelmoderesponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetSentinelModeResponse&>(
      ::ControlNS::_ControlSetSentinelModeResponse_default_instance_);
}
inline const ::ControlNS::ControlSetSentinelModeResponse& ControlResponse::controlsetsentinelmoderesponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlSetSentinelModeResponse)
  return _internal_controlsetsentinelmoderesponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlsetsentinelmoderesponse(
    ::ControlNS::ControlSetSentinelModeResponse* controlsetsentinelmoderesponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetsentinelmoderesponse_);
  }
  controlsetsentinelmoderesponse_ = controlsetsentinelmoderesponse;
  if (controlsetsentinelmoderesponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlSetSentinelModeResponse)
}
inline ::ControlNS::ControlSetSentinelModeResponse* ControlResponse::release_controlsetsentinelmoderesponse() {
  
  ::ControlNS::ControlSetSentinelModeResponse* temp = controlsetsentinelmoderesponse_;
  controlsetsentinelmoderesponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetSentinelModeResponse* ControlResponse::unsafe_arena_release_controlsetsentinelmoderesponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlSetSentinelModeResponse)
  
  ::ControlNS::ControlSetSentinelModeResponse* temp = controlsetsentinelmoderesponse_;
  controlsetsentinelmoderesponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetSentinelModeResponse* ControlResponse::_internal_mutable_controlsetsentinelmoderesponse() {
  
  if (controlsetsentinelmoderesponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetSentinelModeResponse>(GetArenaForAllocation());
    controlsetsentinelmoderesponse_ = p;
  }
  return controlsetsentinelmoderesponse_;
}
inline ::ControlNS::ControlSetSentinelModeResponse* ControlResponse::mutable_controlsetsentinelmoderesponse() {
  ::ControlNS::ControlSetSentinelModeResponse* _msg = _internal_mutable_controlsetsentinelmoderesponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlSetSentinelModeResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlsetsentinelmoderesponse(::ControlNS::ControlSetSentinelModeResponse* controlsetsentinelmoderesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetsentinelmoderesponse_;
  }
  if (controlsetsentinelmoderesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetSentinelModeResponse>::GetOwningArena(controlsetsentinelmoderesponse);
    if (message_arena != submessage_arena) {
      controlsetsentinelmoderesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetsentinelmoderesponse, submessage_arena);
    }
    
  } else {
    
  }
  controlsetsentinelmoderesponse_ = controlsetsentinelmoderesponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlSetSentinelModeResponse)
}

// .ControlNS.ControlGetECUVersionResponse controlGetECUVersionResponse = 16;
inline bool ControlResponse::_internal_has_controlgetecuversionresponse() const {
  return this != internal_default_instance() && controlgetecuversionresponse_ != nullptr;
}
inline bool ControlResponse::has_controlgetecuversionresponse() const {
  return _internal_has_controlgetecuversionresponse();
}
inline void ControlResponse::clear_controlgetecuversionresponse() {
  if (GetArenaForAllocation() == nullptr && controlgetecuversionresponse_ != nullptr) {
    delete controlgetecuversionresponse_;
  }
  controlgetecuversionresponse_ = nullptr;
}
inline const ::ControlNS::ControlGetECUVersionResponse& ControlResponse::_internal_controlgetecuversionresponse() const {
  const ::ControlNS::ControlGetECUVersionResponse* p = controlgetecuversionresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetECUVersionResponse&>(
      ::ControlNS::_ControlGetECUVersionResponse_default_instance_);
}
inline const ::ControlNS::ControlGetECUVersionResponse& ControlResponse::controlgetecuversionresponse() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlResponse.controlGetECUVersionResponse)
  return _internal_controlgetecuversionresponse();
}
inline void ControlResponse::unsafe_arena_set_allocated_controlgetecuversionresponse(
    ::ControlNS::ControlGetECUVersionResponse* controlgetecuversionresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgetecuversionresponse_);
  }
  controlgetecuversionresponse_ = controlgetecuversionresponse;
  if (controlgetecuversionresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlResponse.controlGetECUVersionResponse)
}
inline ::ControlNS::ControlGetECUVersionResponse* ControlResponse::release_controlgetecuversionresponse() {
  
  ::ControlNS::ControlGetECUVersionResponse* temp = controlgetecuversionresponse_;
  controlgetecuversionresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetECUVersionResponse* ControlResponse::unsafe_arena_release_controlgetecuversionresponse() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlResponse.controlGetECUVersionResponse)
  
  ::ControlNS::ControlGetECUVersionResponse* temp = controlgetecuversionresponse_;
  controlgetecuversionresponse_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetECUVersionResponse* ControlResponse::_internal_mutable_controlgetecuversionresponse() {
  
  if (controlgetecuversionresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetECUVersionResponse>(GetArenaForAllocation());
    controlgetecuversionresponse_ = p;
  }
  return controlgetecuversionresponse_;
}
inline ::ControlNS::ControlGetECUVersionResponse* ControlResponse::mutable_controlgetecuversionresponse() {
  ::ControlNS::ControlGetECUVersionResponse* _msg = _internal_mutable_controlgetecuversionresponse();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlResponse.controlGetECUVersionResponse)
  return _msg;
}
inline void ControlResponse::set_allocated_controlgetecuversionresponse(::ControlNS::ControlGetECUVersionResponse* controlgetecuversionresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgetecuversionresponse_;
  }
  if (controlgetecuversionresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetECUVersionResponse>::GetOwningArena(controlgetecuversionresponse);
    if (message_arena != submessage_arena) {
      controlgetecuversionresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgetecuversionresponse, submessage_arena);
    }
    
  } else {
    
  }
  controlgetecuversionresponse_ = controlgetecuversionresponse;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlResponse.controlGetECUVersionResponse)
}

// -------------------------------------------------------------------

// Parameters

// .ControlNS.ControlEnginePara controlEnginePara = 1;
inline bool Parameters::_internal_has_controlenginepara() const {
  return this != internal_default_instance() && controlenginepara_ != nullptr;
}
inline bool Parameters::has_controlenginepara() const {
  return _internal_has_controlenginepara();
}
inline void Parameters::clear_controlenginepara() {
  if (GetArenaForAllocation() == nullptr && controlenginepara_ != nullptr) {
    delete controlenginepara_;
  }
  controlenginepara_ = nullptr;
}
inline const ::ControlNS::ControlEnginePara& Parameters::_internal_controlenginepara() const {
  const ::ControlNS::ControlEnginePara* p = controlenginepara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlEnginePara&>(
      ::ControlNS::_ControlEnginePara_default_instance_);
}
inline const ::ControlNS::ControlEnginePara& Parameters::controlenginepara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlEnginePara)
  return _internal_controlenginepara();
}
inline void Parameters::unsafe_arena_set_allocated_controlenginepara(
    ::ControlNS::ControlEnginePara* controlenginepara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlenginepara_);
  }
  controlenginepara_ = controlenginepara;
  if (controlenginepara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlEnginePara)
}
inline ::ControlNS::ControlEnginePara* Parameters::release_controlenginepara() {
  
  ::ControlNS::ControlEnginePara* temp = controlenginepara_;
  controlenginepara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlEnginePara* Parameters::unsafe_arena_release_controlenginepara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlEnginePara)
  
  ::ControlNS::ControlEnginePara* temp = controlenginepara_;
  controlenginepara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlEnginePara* Parameters::_internal_mutable_controlenginepara() {
  
  if (controlenginepara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlEnginePara>(GetArenaForAllocation());
    controlenginepara_ = p;
  }
  return controlenginepara_;
}
inline ::ControlNS::ControlEnginePara* Parameters::mutable_controlenginepara() {
  ::ControlNS::ControlEnginePara* _msg = _internal_mutable_controlenginepara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlEnginePara)
  return _msg;
}
inline void Parameters::set_allocated_controlenginepara(::ControlNS::ControlEnginePara* controlenginepara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlenginepara_;
  }
  if (controlenginepara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlEnginePara>::GetOwningArena(controlenginepara);
    if (message_arena != submessage_arena) {
      controlenginepara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlenginepara, submessage_arena);
    }
    
  } else {
    
  }
  controlenginepara_ = controlenginepara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlEnginePara)
}

// .ControlNS.ControlFindCarPara controlFindCarPara = 2;
inline bool Parameters::_internal_has_controlfindcarpara() const {
  return this != internal_default_instance() && controlfindcarpara_ != nullptr;
}
inline bool Parameters::has_controlfindcarpara() const {
  return _internal_has_controlfindcarpara();
}
inline void Parameters::clear_controlfindcarpara() {
  if (GetArenaForAllocation() == nullptr && controlfindcarpara_ != nullptr) {
    delete controlfindcarpara_;
  }
  controlfindcarpara_ = nullptr;
}
inline const ::ControlNS::ControlFindCarPara& Parameters::_internal_controlfindcarpara() const {
  const ::ControlNS::ControlFindCarPara* p = controlfindcarpara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlFindCarPara&>(
      ::ControlNS::_ControlFindCarPara_default_instance_);
}
inline const ::ControlNS::ControlFindCarPara& Parameters::controlfindcarpara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlFindCarPara)
  return _internal_controlfindcarpara();
}
inline void Parameters::unsafe_arena_set_allocated_controlfindcarpara(
    ::ControlNS::ControlFindCarPara* controlfindcarpara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlfindcarpara_);
  }
  controlfindcarpara_ = controlfindcarpara;
  if (controlfindcarpara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlFindCarPara)
}
inline ::ControlNS::ControlFindCarPara* Parameters::release_controlfindcarpara() {
  
  ::ControlNS::ControlFindCarPara* temp = controlfindcarpara_;
  controlfindcarpara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlFindCarPara* Parameters::unsafe_arena_release_controlfindcarpara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlFindCarPara)
  
  ::ControlNS::ControlFindCarPara* temp = controlfindcarpara_;
  controlfindcarpara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlFindCarPara* Parameters::_internal_mutable_controlfindcarpara() {
  
  if (controlfindcarpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlFindCarPara>(GetArenaForAllocation());
    controlfindcarpara_ = p;
  }
  return controlfindcarpara_;
}
inline ::ControlNS::ControlFindCarPara* Parameters::mutable_controlfindcarpara() {
  ::ControlNS::ControlFindCarPara* _msg = _internal_mutable_controlfindcarpara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlFindCarPara)
  return _msg;
}
inline void Parameters::set_allocated_controlfindcarpara(::ControlNS::ControlFindCarPara* controlfindcarpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlfindcarpara_;
  }
  if (controlfindcarpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlFindCarPara>::GetOwningArena(controlfindcarpara);
    if (message_arena != submessage_arena) {
      controlfindcarpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlfindcarpara, submessage_arena);
    }
    
  } else {
    
  }
  controlfindcarpara_ = controlfindcarpara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlFindCarPara)
}

// .ControlNS.ControlGetPositionPara controlGetPositionPara = 3;
inline bool Parameters::_internal_has_controlgetpositionpara() const {
  return this != internal_default_instance() && controlgetpositionpara_ != nullptr;
}
inline bool Parameters::has_controlgetpositionpara() const {
  return _internal_has_controlgetpositionpara();
}
inline void Parameters::clear_controlgetpositionpara() {
  if (GetArenaForAllocation() == nullptr && controlgetpositionpara_ != nullptr) {
    delete controlgetpositionpara_;
  }
  controlgetpositionpara_ = nullptr;
}
inline const ::ControlNS::ControlGetPositionPara& Parameters::_internal_controlgetpositionpara() const {
  const ::ControlNS::ControlGetPositionPara* p = controlgetpositionpara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetPositionPara&>(
      ::ControlNS::_ControlGetPositionPara_default_instance_);
}
inline const ::ControlNS::ControlGetPositionPara& Parameters::controlgetpositionpara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlGetPositionPara)
  return _internal_controlgetpositionpara();
}
inline void Parameters::unsafe_arena_set_allocated_controlgetpositionpara(
    ::ControlNS::ControlGetPositionPara* controlgetpositionpara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgetpositionpara_);
  }
  controlgetpositionpara_ = controlgetpositionpara;
  if (controlgetpositionpara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlGetPositionPara)
}
inline ::ControlNS::ControlGetPositionPara* Parameters::release_controlgetpositionpara() {
  
  ::ControlNS::ControlGetPositionPara* temp = controlgetpositionpara_;
  controlgetpositionpara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetPositionPara* Parameters::unsafe_arena_release_controlgetpositionpara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlGetPositionPara)
  
  ::ControlNS::ControlGetPositionPara* temp = controlgetpositionpara_;
  controlgetpositionpara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetPositionPara* Parameters::_internal_mutable_controlgetpositionpara() {
  
  if (controlgetpositionpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetPositionPara>(GetArenaForAllocation());
    controlgetpositionpara_ = p;
  }
  return controlgetpositionpara_;
}
inline ::ControlNS::ControlGetPositionPara* Parameters::mutable_controlgetpositionpara() {
  ::ControlNS::ControlGetPositionPara* _msg = _internal_mutable_controlgetpositionpara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlGetPositionPara)
  return _msg;
}
inline void Parameters::set_allocated_controlgetpositionpara(::ControlNS::ControlGetPositionPara* controlgetpositionpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgetpositionpara_;
  }
  if (controlgetpositionpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetPositionPara>::GetOwningArena(controlgetpositionpara);
    if (message_arena != submessage_arena) {
      controlgetpositionpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgetpositionpara, submessage_arena);
    }
    
  } else {
    
  }
  controlgetpositionpara_ = controlgetpositionpara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlGetPositionPara)
}

// .ControlNS.ControlGetTPMSPara controlGetTMPSPara = 4;
inline bool Parameters::_internal_has_controlgettmpspara() const {
  return this != internal_default_instance() && controlgettmpspara_ != nullptr;
}
inline bool Parameters::has_controlgettmpspara() const {
  return _internal_has_controlgettmpspara();
}
inline void Parameters::clear_controlgettmpspara() {
  if (GetArenaForAllocation() == nullptr && controlgettmpspara_ != nullptr) {
    delete controlgettmpspara_;
  }
  controlgettmpspara_ = nullptr;
}
inline const ::ControlNS::ControlGetTPMSPara& Parameters::_internal_controlgettmpspara() const {
  const ::ControlNS::ControlGetTPMSPara* p = controlgettmpspara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetTPMSPara&>(
      ::ControlNS::_ControlGetTPMSPara_default_instance_);
}
inline const ::ControlNS::ControlGetTPMSPara& Parameters::controlgettmpspara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlGetTMPSPara)
  return _internal_controlgettmpspara();
}
inline void Parameters::unsafe_arena_set_allocated_controlgettmpspara(
    ::ControlNS::ControlGetTPMSPara* controlgettmpspara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgettmpspara_);
  }
  controlgettmpspara_ = controlgettmpspara;
  if (controlgettmpspara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlGetTMPSPara)
}
inline ::ControlNS::ControlGetTPMSPara* Parameters::release_controlgettmpspara() {
  
  ::ControlNS::ControlGetTPMSPara* temp = controlgettmpspara_;
  controlgettmpspara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetTPMSPara* Parameters::unsafe_arena_release_controlgettmpspara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlGetTMPSPara)
  
  ::ControlNS::ControlGetTPMSPara* temp = controlgettmpspara_;
  controlgettmpspara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetTPMSPara* Parameters::_internal_mutable_controlgettmpspara() {
  
  if (controlgettmpspara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetTPMSPara>(GetArenaForAllocation());
    controlgettmpspara_ = p;
  }
  return controlgettmpspara_;
}
inline ::ControlNS::ControlGetTPMSPara* Parameters::mutable_controlgettmpspara() {
  ::ControlNS::ControlGetTPMSPara* _msg = _internal_mutable_controlgettmpspara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlGetTMPSPara)
  return _msg;
}
inline void Parameters::set_allocated_controlgettmpspara(::ControlNS::ControlGetTPMSPara* controlgettmpspara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgettmpspara_;
  }
  if (controlgettmpspara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetTPMSPara>::GetOwningArena(controlgettmpspara);
    if (message_arena != submessage_arena) {
      controlgettmpspara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgettmpspara, submessage_arena);
    }
    
  } else {
    
  }
  controlgettmpspara_ = controlgettmpspara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlGetTMPSPara)
}

// .ControlNS.ControlTakeParkingPhotoPara controlTakeParkingPhotoPara = 5;
inline bool Parameters::_internal_has_controltakeparkingphotopara() const {
  return this != internal_default_instance() && controltakeparkingphotopara_ != nullptr;
}
inline bool Parameters::has_controltakeparkingphotopara() const {
  return _internal_has_controltakeparkingphotopara();
}
inline void Parameters::clear_controltakeparkingphotopara() {
  if (GetArenaForAllocation() == nullptr && controltakeparkingphotopara_ != nullptr) {
    delete controltakeparkingphotopara_;
  }
  controltakeparkingphotopara_ = nullptr;
}
inline const ::ControlNS::ControlTakeParkingPhotoPara& Parameters::_internal_controltakeparkingphotopara() const {
  const ::ControlNS::ControlTakeParkingPhotoPara* p = controltakeparkingphotopara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlTakeParkingPhotoPara&>(
      ::ControlNS::_ControlTakeParkingPhotoPara_default_instance_);
}
inline const ::ControlNS::ControlTakeParkingPhotoPara& Parameters::controltakeparkingphotopara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlTakeParkingPhotoPara)
  return _internal_controltakeparkingphotopara();
}
inline void Parameters::unsafe_arena_set_allocated_controltakeparkingphotopara(
    ::ControlNS::ControlTakeParkingPhotoPara* controltakeparkingphotopara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controltakeparkingphotopara_);
  }
  controltakeparkingphotopara_ = controltakeparkingphotopara;
  if (controltakeparkingphotopara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlTakeParkingPhotoPara)
}
inline ::ControlNS::ControlTakeParkingPhotoPara* Parameters::release_controltakeparkingphotopara() {
  
  ::ControlNS::ControlTakeParkingPhotoPara* temp = controltakeparkingphotopara_;
  controltakeparkingphotopara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlTakeParkingPhotoPara* Parameters::unsafe_arena_release_controltakeparkingphotopara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlTakeParkingPhotoPara)
  
  ::ControlNS::ControlTakeParkingPhotoPara* temp = controltakeparkingphotopara_;
  controltakeparkingphotopara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlTakeParkingPhotoPara* Parameters::_internal_mutable_controltakeparkingphotopara() {
  
  if (controltakeparkingphotopara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlTakeParkingPhotoPara>(GetArenaForAllocation());
    controltakeparkingphotopara_ = p;
  }
  return controltakeparkingphotopara_;
}
inline ::ControlNS::ControlTakeParkingPhotoPara* Parameters::mutable_controltakeparkingphotopara() {
  ::ControlNS::ControlTakeParkingPhotoPara* _msg = _internal_mutable_controltakeparkingphotopara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlTakeParkingPhotoPara)
  return _msg;
}
inline void Parameters::set_allocated_controltakeparkingphotopara(::ControlNS::ControlTakeParkingPhotoPara* controltakeparkingphotopara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controltakeparkingphotopara_;
  }
  if (controltakeparkingphotopara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlTakeParkingPhotoPara>::GetOwningArena(controltakeparkingphotopara);
    if (message_arena != submessage_arena) {
      controltakeparkingphotopara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controltakeparkingphotopara, submessage_arena);
    }
    
  } else {
    
  }
  controltakeparkingphotopara_ = controltakeparkingphotopara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlTakeParkingPhotoPara)
}

// .ControlNS.ControlSetRoundFencePara controlSetRoundFencePara = 6;
inline bool Parameters::_internal_has_controlsetroundfencepara() const {
  return this != internal_default_instance() && controlsetroundfencepara_ != nullptr;
}
inline bool Parameters::has_controlsetroundfencepara() const {
  return _internal_has_controlsetroundfencepara();
}
inline void Parameters::clear_controlsetroundfencepara() {
  if (GetArenaForAllocation() == nullptr && controlsetroundfencepara_ != nullptr) {
    delete controlsetroundfencepara_;
  }
  controlsetroundfencepara_ = nullptr;
}
inline const ::ControlNS::ControlSetRoundFencePara& Parameters::_internal_controlsetroundfencepara() const {
  const ::ControlNS::ControlSetRoundFencePara* p = controlsetroundfencepara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetRoundFencePara&>(
      ::ControlNS::_ControlSetRoundFencePara_default_instance_);
}
inline const ::ControlNS::ControlSetRoundFencePara& Parameters::controlsetroundfencepara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlSetRoundFencePara)
  return _internal_controlsetroundfencepara();
}
inline void Parameters::unsafe_arena_set_allocated_controlsetroundfencepara(
    ::ControlNS::ControlSetRoundFencePara* controlsetroundfencepara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetroundfencepara_);
  }
  controlsetroundfencepara_ = controlsetroundfencepara;
  if (controlsetroundfencepara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlSetRoundFencePara)
}
inline ::ControlNS::ControlSetRoundFencePara* Parameters::release_controlsetroundfencepara() {
  
  ::ControlNS::ControlSetRoundFencePara* temp = controlsetroundfencepara_;
  controlsetroundfencepara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetRoundFencePara* Parameters::unsafe_arena_release_controlsetroundfencepara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlSetRoundFencePara)
  
  ::ControlNS::ControlSetRoundFencePara* temp = controlsetroundfencepara_;
  controlsetroundfencepara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetRoundFencePara* Parameters::_internal_mutable_controlsetroundfencepara() {
  
  if (controlsetroundfencepara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetRoundFencePara>(GetArenaForAllocation());
    controlsetroundfencepara_ = p;
  }
  return controlsetroundfencepara_;
}
inline ::ControlNS::ControlSetRoundFencePara* Parameters::mutable_controlsetroundfencepara() {
  ::ControlNS::ControlSetRoundFencePara* _msg = _internal_mutable_controlsetroundfencepara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlSetRoundFencePara)
  return _msg;
}
inline void Parameters::set_allocated_controlsetroundfencepara(::ControlNS::ControlSetRoundFencePara* controlsetroundfencepara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetroundfencepara_;
  }
  if (controlsetroundfencepara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetRoundFencePara>::GetOwningArena(controlsetroundfencepara);
    if (message_arena != submessage_arena) {
      controlsetroundfencepara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetroundfencepara, submessage_arena);
    }
    
  } else {
    
  }
  controlsetroundfencepara_ = controlsetroundfencepara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlSetRoundFencePara)
}

// .ControlNS.ControlSetPolygonFencePara controlSetPolygonFencePara = 7;
inline bool Parameters::_internal_has_controlsetpolygonfencepara() const {
  return this != internal_default_instance() && controlsetpolygonfencepara_ != nullptr;
}
inline bool Parameters::has_controlsetpolygonfencepara() const {
  return _internal_has_controlsetpolygonfencepara();
}
inline void Parameters::clear_controlsetpolygonfencepara() {
  if (GetArenaForAllocation() == nullptr && controlsetpolygonfencepara_ != nullptr) {
    delete controlsetpolygonfencepara_;
  }
  controlsetpolygonfencepara_ = nullptr;
}
inline const ::ControlNS::ControlSetPolygonFencePara& Parameters::_internal_controlsetpolygonfencepara() const {
  const ::ControlNS::ControlSetPolygonFencePara* p = controlsetpolygonfencepara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetPolygonFencePara&>(
      ::ControlNS::_ControlSetPolygonFencePara_default_instance_);
}
inline const ::ControlNS::ControlSetPolygonFencePara& Parameters::controlsetpolygonfencepara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlSetPolygonFencePara)
  return _internal_controlsetpolygonfencepara();
}
inline void Parameters::unsafe_arena_set_allocated_controlsetpolygonfencepara(
    ::ControlNS::ControlSetPolygonFencePara* controlsetpolygonfencepara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetpolygonfencepara_);
  }
  controlsetpolygonfencepara_ = controlsetpolygonfencepara;
  if (controlsetpolygonfencepara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlSetPolygonFencePara)
}
inline ::ControlNS::ControlSetPolygonFencePara* Parameters::release_controlsetpolygonfencepara() {
  
  ::ControlNS::ControlSetPolygonFencePara* temp = controlsetpolygonfencepara_;
  controlsetpolygonfencepara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetPolygonFencePara* Parameters::unsafe_arena_release_controlsetpolygonfencepara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlSetPolygonFencePara)
  
  ::ControlNS::ControlSetPolygonFencePara* temp = controlsetpolygonfencepara_;
  controlsetpolygonfencepara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetPolygonFencePara* Parameters::_internal_mutable_controlsetpolygonfencepara() {
  
  if (controlsetpolygonfencepara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetPolygonFencePara>(GetArenaForAllocation());
    controlsetpolygonfencepara_ = p;
  }
  return controlsetpolygonfencepara_;
}
inline ::ControlNS::ControlSetPolygonFencePara* Parameters::mutable_controlsetpolygonfencepara() {
  ::ControlNS::ControlSetPolygonFencePara* _msg = _internal_mutable_controlsetpolygonfencepara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlSetPolygonFencePara)
  return _msg;
}
inline void Parameters::set_allocated_controlsetpolygonfencepara(::ControlNS::ControlSetPolygonFencePara* controlsetpolygonfencepara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetpolygonfencepara_;
  }
  if (controlsetpolygonfencepara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetPolygonFencePara>::GetOwningArena(controlsetpolygonfencepara);
    if (message_arena != submessage_arena) {
      controlsetpolygonfencepara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetpolygonfencepara, submessage_arena);
    }
    
  } else {
    
  }
  controlsetpolygonfencepara_ = controlsetpolygonfencepara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlSetPolygonFencePara)
}

// .ControlNS.ControlHeatSeatPara controlHeatSeatPara = 8;
inline bool Parameters::_internal_has_controlheatseatpara() const {
  return this != internal_default_instance() && controlheatseatpara_ != nullptr;
}
inline bool Parameters::has_controlheatseatpara() const {
  return _internal_has_controlheatseatpara();
}
inline void Parameters::clear_controlheatseatpara() {
  if (GetArenaForAllocation() == nullptr && controlheatseatpara_ != nullptr) {
    delete controlheatseatpara_;
  }
  controlheatseatpara_ = nullptr;
}
inline const ::ControlNS::ControlHeatSeatPara& Parameters::_internal_controlheatseatpara() const {
  const ::ControlNS::ControlHeatSeatPara* p = controlheatseatpara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatSeatPara&>(
      ::ControlNS::_ControlHeatSeatPara_default_instance_);
}
inline const ::ControlNS::ControlHeatSeatPara& Parameters::controlheatseatpara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlHeatSeatPara)
  return _internal_controlheatseatpara();
}
inline void Parameters::unsafe_arena_set_allocated_controlheatseatpara(
    ::ControlNS::ControlHeatSeatPara* controlheatseatpara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlheatseatpara_);
  }
  controlheatseatpara_ = controlheatseatpara;
  if (controlheatseatpara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlHeatSeatPara)
}
inline ::ControlNS::ControlHeatSeatPara* Parameters::release_controlheatseatpara() {
  
  ::ControlNS::ControlHeatSeatPara* temp = controlheatseatpara_;
  controlheatseatpara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatSeatPara* Parameters::unsafe_arena_release_controlheatseatpara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlHeatSeatPara)
  
  ::ControlNS::ControlHeatSeatPara* temp = controlheatseatpara_;
  controlheatseatpara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatSeatPara* Parameters::_internal_mutable_controlheatseatpara() {
  
  if (controlheatseatpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatSeatPara>(GetArenaForAllocation());
    controlheatseatpara_ = p;
  }
  return controlheatseatpara_;
}
inline ::ControlNS::ControlHeatSeatPara* Parameters::mutable_controlheatseatpara() {
  ::ControlNS::ControlHeatSeatPara* _msg = _internal_mutable_controlheatseatpara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlHeatSeatPara)
  return _msg;
}
inline void Parameters::set_allocated_controlheatseatpara(::ControlNS::ControlHeatSeatPara* controlheatseatpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlheatseatpara_;
  }
  if (controlheatseatpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatSeatPara>::GetOwningArena(controlheatseatpara);
    if (message_arena != submessage_arena) {
      controlheatseatpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlheatseatpara, submessage_arena);
    }
    
  } else {
    
  }
  controlheatseatpara_ = controlheatseatpara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlHeatSeatPara)
}

// .ControlNS.ControlHeatHandleBarPara controlHeatHandleBarPara = 9;
inline bool Parameters::_internal_has_controlheathandlebarpara() const {
  return this != internal_default_instance() && controlheathandlebarpara_ != nullptr;
}
inline bool Parameters::has_controlheathandlebarpara() const {
  return _internal_has_controlheathandlebarpara();
}
inline void Parameters::clear_controlheathandlebarpara() {
  if (GetArenaForAllocation() == nullptr && controlheathandlebarpara_ != nullptr) {
    delete controlheathandlebarpara_;
  }
  controlheathandlebarpara_ = nullptr;
}
inline const ::ControlNS::ControlHeatHandleBarPara& Parameters::_internal_controlheathandlebarpara() const {
  const ::ControlNS::ControlHeatHandleBarPara* p = controlheathandlebarpara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatHandleBarPara&>(
      ::ControlNS::_ControlHeatHandleBarPara_default_instance_);
}
inline const ::ControlNS::ControlHeatHandleBarPara& Parameters::controlheathandlebarpara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlHeatHandleBarPara)
  return _internal_controlheathandlebarpara();
}
inline void Parameters::unsafe_arena_set_allocated_controlheathandlebarpara(
    ::ControlNS::ControlHeatHandleBarPara* controlheathandlebarpara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlheathandlebarpara_);
  }
  controlheathandlebarpara_ = controlheathandlebarpara;
  if (controlheathandlebarpara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlHeatHandleBarPara)
}
inline ::ControlNS::ControlHeatHandleBarPara* Parameters::release_controlheathandlebarpara() {
  
  ::ControlNS::ControlHeatHandleBarPara* temp = controlheathandlebarpara_;
  controlheathandlebarpara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatHandleBarPara* Parameters::unsafe_arena_release_controlheathandlebarpara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlHeatHandleBarPara)
  
  ::ControlNS::ControlHeatHandleBarPara* temp = controlheathandlebarpara_;
  controlheathandlebarpara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatHandleBarPara* Parameters::_internal_mutable_controlheathandlebarpara() {
  
  if (controlheathandlebarpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatHandleBarPara>(GetArenaForAllocation());
    controlheathandlebarpara_ = p;
  }
  return controlheathandlebarpara_;
}
inline ::ControlNS::ControlHeatHandleBarPara* Parameters::mutable_controlheathandlebarpara() {
  ::ControlNS::ControlHeatHandleBarPara* _msg = _internal_mutable_controlheathandlebarpara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlHeatHandleBarPara)
  return _msg;
}
inline void Parameters::set_allocated_controlheathandlebarpara(::ControlNS::ControlHeatHandleBarPara* controlheathandlebarpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlheathandlebarpara_;
  }
  if (controlheathandlebarpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatHandleBarPara>::GetOwningArena(controlheathandlebarpara);
    if (message_arena != submessage_arena) {
      controlheathandlebarpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlheathandlebarpara, submessage_arena);
    }
    
  } else {
    
  }
  controlheathandlebarpara_ = controlheathandlebarpara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlHeatHandleBarPara)
}

// .ControlNS.ControlHeatReservePara controlHeatReservePara = 10;
inline bool Parameters::_internal_has_controlheatreservepara() const {
  return this != internal_default_instance() && controlheatreservepara_ != nullptr;
}
inline bool Parameters::has_controlheatreservepara() const {
  return _internal_has_controlheatreservepara();
}
inline void Parameters::clear_controlheatreservepara() {
  if (GetArenaForAllocation() == nullptr && controlheatreservepara_ != nullptr) {
    delete controlheatreservepara_;
  }
  controlheatreservepara_ = nullptr;
}
inline const ::ControlNS::ControlHeatReservePara& Parameters::_internal_controlheatreservepara() const {
  const ::ControlNS::ControlHeatReservePara* p = controlheatreservepara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatReservePara&>(
      ::ControlNS::_ControlHeatReservePara_default_instance_);
}
inline const ::ControlNS::ControlHeatReservePara& Parameters::controlheatreservepara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlHeatReservePara)
  return _internal_controlheatreservepara();
}
inline void Parameters::unsafe_arena_set_allocated_controlheatreservepara(
    ::ControlNS::ControlHeatReservePara* controlheatreservepara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlheatreservepara_);
  }
  controlheatreservepara_ = controlheatreservepara;
  if (controlheatreservepara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlHeatReservePara)
}
inline ::ControlNS::ControlHeatReservePara* Parameters::release_controlheatreservepara() {
  
  ::ControlNS::ControlHeatReservePara* temp = controlheatreservepara_;
  controlheatreservepara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatReservePara* Parameters::unsafe_arena_release_controlheatreservepara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlHeatReservePara)
  
  ::ControlNS::ControlHeatReservePara* temp = controlheatreservepara_;
  controlheatreservepara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatReservePara* Parameters::_internal_mutable_controlheatreservepara() {
  
  if (controlheatreservepara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatReservePara>(GetArenaForAllocation());
    controlheatreservepara_ = p;
  }
  return controlheatreservepara_;
}
inline ::ControlNS::ControlHeatReservePara* Parameters::mutable_controlheatreservepara() {
  ::ControlNS::ControlHeatReservePara* _msg = _internal_mutable_controlheatreservepara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlHeatReservePara)
  return _msg;
}
inline void Parameters::set_allocated_controlheatreservepara(::ControlNS::ControlHeatReservePara* controlheatreservepara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlheatreservepara_;
  }
  if (controlheatreservepara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatReservePara>::GetOwningArena(controlheatreservepara);
    if (message_arena != submessage_arena) {
      controlheatreservepara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlheatreservepara, submessage_arena);
    }
    
  } else {
    
  }
  controlheatreservepara_ = controlheatreservepara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlHeatReservePara)
}

// .ControlNS.ControlGetSignalIntensityPara controlGetSignalIntensityPara = 11;
inline bool Parameters::_internal_has_controlgetsignalintensitypara() const {
  return this != internal_default_instance() && controlgetsignalintensitypara_ != nullptr;
}
inline bool Parameters::has_controlgetsignalintensitypara() const {
  return _internal_has_controlgetsignalintensitypara();
}
inline void Parameters::clear_controlgetsignalintensitypara() {
  if (GetArenaForAllocation() == nullptr && controlgetsignalintensitypara_ != nullptr) {
    delete controlgetsignalintensitypara_;
  }
  controlgetsignalintensitypara_ = nullptr;
}
inline const ::ControlNS::ControlGetSignalIntensityPara& Parameters::_internal_controlgetsignalintensitypara() const {
  const ::ControlNS::ControlGetSignalIntensityPara* p = controlgetsignalintensitypara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetSignalIntensityPara&>(
      ::ControlNS::_ControlGetSignalIntensityPara_default_instance_);
}
inline const ::ControlNS::ControlGetSignalIntensityPara& Parameters::controlgetsignalintensitypara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlGetSignalIntensityPara)
  return _internal_controlgetsignalintensitypara();
}
inline void Parameters::unsafe_arena_set_allocated_controlgetsignalintensitypara(
    ::ControlNS::ControlGetSignalIntensityPara* controlgetsignalintensitypara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgetsignalintensitypara_);
  }
  controlgetsignalintensitypara_ = controlgetsignalintensitypara;
  if (controlgetsignalintensitypara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlGetSignalIntensityPara)
}
inline ::ControlNS::ControlGetSignalIntensityPara* Parameters::release_controlgetsignalintensitypara() {
  
  ::ControlNS::ControlGetSignalIntensityPara* temp = controlgetsignalintensitypara_;
  controlgetsignalintensitypara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetSignalIntensityPara* Parameters::unsafe_arena_release_controlgetsignalintensitypara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlGetSignalIntensityPara)
  
  ::ControlNS::ControlGetSignalIntensityPara* temp = controlgetsignalintensitypara_;
  controlgetsignalintensitypara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetSignalIntensityPara* Parameters::_internal_mutable_controlgetsignalintensitypara() {
  
  if (controlgetsignalintensitypara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetSignalIntensityPara>(GetArenaForAllocation());
    controlgetsignalintensitypara_ = p;
  }
  return controlgetsignalintensitypara_;
}
inline ::ControlNS::ControlGetSignalIntensityPara* Parameters::mutable_controlgetsignalintensitypara() {
  ::ControlNS::ControlGetSignalIntensityPara* _msg = _internal_mutable_controlgetsignalintensitypara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlGetSignalIntensityPara)
  return _msg;
}
inline void Parameters::set_allocated_controlgetsignalintensitypara(::ControlNS::ControlGetSignalIntensityPara* controlgetsignalintensitypara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgetsignalintensitypara_;
  }
  if (controlgetsignalintensitypara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetSignalIntensityPara>::GetOwningArena(controlgetsignalintensitypara);
    if (message_arena != submessage_arena) {
      controlgetsignalintensitypara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgetsignalintensitypara, submessage_arena);
    }
    
  } else {
    
  }
  controlgetsignalintensitypara_ = controlgetsignalintensitypara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlGetSignalIntensityPara)
}

// .ControlNS.ControlAPNNamePara controlAPNNamePara = 12;
inline bool Parameters::_internal_has_controlapnnamepara() const {
  return this != internal_default_instance() && controlapnnamepara_ != nullptr;
}
inline bool Parameters::has_controlapnnamepara() const {
  return _internal_has_controlapnnamepara();
}
inline void Parameters::clear_controlapnnamepara() {
  if (GetArenaForAllocation() == nullptr && controlapnnamepara_ != nullptr) {
    delete controlapnnamepara_;
  }
  controlapnnamepara_ = nullptr;
}
inline const ::ControlNS::ControlAPNNamePara& Parameters::_internal_controlapnnamepara() const {
  const ::ControlNS::ControlAPNNamePara* p = controlapnnamepara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlAPNNamePara&>(
      ::ControlNS::_ControlAPNNamePara_default_instance_);
}
inline const ::ControlNS::ControlAPNNamePara& Parameters::controlapnnamepara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlAPNNamePara)
  return _internal_controlapnnamepara();
}
inline void Parameters::unsafe_arena_set_allocated_controlapnnamepara(
    ::ControlNS::ControlAPNNamePara* controlapnnamepara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlapnnamepara_);
  }
  controlapnnamepara_ = controlapnnamepara;
  if (controlapnnamepara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlAPNNamePara)
}
inline ::ControlNS::ControlAPNNamePara* Parameters::release_controlapnnamepara() {
  
  ::ControlNS::ControlAPNNamePara* temp = controlapnnamepara_;
  controlapnnamepara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlAPNNamePara* Parameters::unsafe_arena_release_controlapnnamepara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlAPNNamePara)
  
  ::ControlNS::ControlAPNNamePara* temp = controlapnnamepara_;
  controlapnnamepara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlAPNNamePara* Parameters::_internal_mutable_controlapnnamepara() {
  
  if (controlapnnamepara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlAPNNamePara>(GetArenaForAllocation());
    controlapnnamepara_ = p;
  }
  return controlapnnamepara_;
}
inline ::ControlNS::ControlAPNNamePara* Parameters::mutable_controlapnnamepara() {
  ::ControlNS::ControlAPNNamePara* _msg = _internal_mutable_controlapnnamepara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlAPNNamePara)
  return _msg;
}
inline void Parameters::set_allocated_controlapnnamepara(::ControlNS::ControlAPNNamePara* controlapnnamepara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlapnnamepara_;
  }
  if (controlapnnamepara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlAPNNamePara>::GetOwningArena(controlapnnamepara);
    if (message_arena != submessage_arena) {
      controlapnnamepara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlapnnamepara, submessage_arena);
    }
    
  } else {
    
  }
  controlapnnamepara_ = controlapnnamepara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlAPNNamePara)
}

// .ControlNS.ControlSetFrequencyPara controlSetFrequencyPara = 13;
inline bool Parameters::_internal_has_controlsetfrequencypara() const {
  return this != internal_default_instance() && controlsetfrequencypara_ != nullptr;
}
inline bool Parameters::has_controlsetfrequencypara() const {
  return _internal_has_controlsetfrequencypara();
}
inline void Parameters::clear_controlsetfrequencypara() {
  if (GetArenaForAllocation() == nullptr && controlsetfrequencypara_ != nullptr) {
    delete controlsetfrequencypara_;
  }
  controlsetfrequencypara_ = nullptr;
}
inline const ::ControlNS::ControlSetFrequencyPara& Parameters::_internal_controlsetfrequencypara() const {
  const ::ControlNS::ControlSetFrequencyPara* p = controlsetfrequencypara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetFrequencyPara&>(
      ::ControlNS::_ControlSetFrequencyPara_default_instance_);
}
inline const ::ControlNS::ControlSetFrequencyPara& Parameters::controlsetfrequencypara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlSetFrequencyPara)
  return _internal_controlsetfrequencypara();
}
inline void Parameters::unsafe_arena_set_allocated_controlsetfrequencypara(
    ::ControlNS::ControlSetFrequencyPara* controlsetfrequencypara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetfrequencypara_);
  }
  controlsetfrequencypara_ = controlsetfrequencypara;
  if (controlsetfrequencypara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlSetFrequencyPara)
}
inline ::ControlNS::ControlSetFrequencyPara* Parameters::release_controlsetfrequencypara() {
  
  ::ControlNS::ControlSetFrequencyPara* temp = controlsetfrequencypara_;
  controlsetfrequencypara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetFrequencyPara* Parameters::unsafe_arena_release_controlsetfrequencypara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlSetFrequencyPara)
  
  ::ControlNS::ControlSetFrequencyPara* temp = controlsetfrequencypara_;
  controlsetfrequencypara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetFrequencyPara* Parameters::_internal_mutable_controlsetfrequencypara() {
  
  if (controlsetfrequencypara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetFrequencyPara>(GetArenaForAllocation());
    controlsetfrequencypara_ = p;
  }
  return controlsetfrequencypara_;
}
inline ::ControlNS::ControlSetFrequencyPara* Parameters::mutable_controlsetfrequencypara() {
  ::ControlNS::ControlSetFrequencyPara* _msg = _internal_mutable_controlsetfrequencypara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlSetFrequencyPara)
  return _msg;
}
inline void Parameters::set_allocated_controlsetfrequencypara(::ControlNS::ControlSetFrequencyPara* controlsetfrequencypara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetfrequencypara_;
  }
  if (controlsetfrequencypara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetFrequencyPara>::GetOwningArena(controlsetfrequencypara);
    if (message_arena != submessage_arena) {
      controlsetfrequencypara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetfrequencypara, submessage_arena);
    }
    
  } else {
    
  }
  controlsetfrequencypara_ = controlsetfrequencypara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlSetFrequencyPara)
}

// .ControlNS.ControlClearFencePara controlClearFencePara = 14;
inline bool Parameters::_internal_has_controlclearfencepara() const {
  return this != internal_default_instance() && controlclearfencepara_ != nullptr;
}
inline bool Parameters::has_controlclearfencepara() const {
  return _internal_has_controlclearfencepara();
}
inline void Parameters::clear_controlclearfencepara() {
  if (GetArenaForAllocation() == nullptr && controlclearfencepara_ != nullptr) {
    delete controlclearfencepara_;
  }
  controlclearfencepara_ = nullptr;
}
inline const ::ControlNS::ControlClearFencePara& Parameters::_internal_controlclearfencepara() const {
  const ::ControlNS::ControlClearFencePara* p = controlclearfencepara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlClearFencePara&>(
      ::ControlNS::_ControlClearFencePara_default_instance_);
}
inline const ::ControlNS::ControlClearFencePara& Parameters::controlclearfencepara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlClearFencePara)
  return _internal_controlclearfencepara();
}
inline void Parameters::unsafe_arena_set_allocated_controlclearfencepara(
    ::ControlNS::ControlClearFencePara* controlclearfencepara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlclearfencepara_);
  }
  controlclearfencepara_ = controlclearfencepara;
  if (controlclearfencepara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlClearFencePara)
}
inline ::ControlNS::ControlClearFencePara* Parameters::release_controlclearfencepara() {
  
  ::ControlNS::ControlClearFencePara* temp = controlclearfencepara_;
  controlclearfencepara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlClearFencePara* Parameters::unsafe_arena_release_controlclearfencepara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlClearFencePara)
  
  ::ControlNS::ControlClearFencePara* temp = controlclearfencepara_;
  controlclearfencepara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlClearFencePara* Parameters::_internal_mutable_controlclearfencepara() {
  
  if (controlclearfencepara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlClearFencePara>(GetArenaForAllocation());
    controlclearfencepara_ = p;
  }
  return controlclearfencepara_;
}
inline ::ControlNS::ControlClearFencePara* Parameters::mutable_controlclearfencepara() {
  ::ControlNS::ControlClearFencePara* _msg = _internal_mutable_controlclearfencepara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlClearFencePara)
  return _msg;
}
inline void Parameters::set_allocated_controlclearfencepara(::ControlNS::ControlClearFencePara* controlclearfencepara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlclearfencepara_;
  }
  if (controlclearfencepara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlClearFencePara>::GetOwningArena(controlclearfencepara);
    if (message_arena != submessage_arena) {
      controlclearfencepara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlclearfencepara, submessage_arena);
    }
    
  } else {
    
  }
  controlclearfencepara_ = controlclearfencepara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlClearFencePara)
}

// .ControlNS.ControlSetSentinelModePara controlSetSentinelModePara = 15;
inline bool Parameters::_internal_has_controlsetsentinelmodepara() const {
  return this != internal_default_instance() && controlsetsentinelmodepara_ != nullptr;
}
inline bool Parameters::has_controlsetsentinelmodepara() const {
  return _internal_has_controlsetsentinelmodepara();
}
inline void Parameters::clear_controlsetsentinelmodepara() {
  if (GetArenaForAllocation() == nullptr && controlsetsentinelmodepara_ != nullptr) {
    delete controlsetsentinelmodepara_;
  }
  controlsetsentinelmodepara_ = nullptr;
}
inline const ::ControlNS::ControlSetSentinelModePara& Parameters::_internal_controlsetsentinelmodepara() const {
  const ::ControlNS::ControlSetSentinelModePara* p = controlsetsentinelmodepara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlSetSentinelModePara&>(
      ::ControlNS::_ControlSetSentinelModePara_default_instance_);
}
inline const ::ControlNS::ControlSetSentinelModePara& Parameters::controlsetsentinelmodepara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlSetSentinelModePara)
  return _internal_controlsetsentinelmodepara();
}
inline void Parameters::unsafe_arena_set_allocated_controlsetsentinelmodepara(
    ::ControlNS::ControlSetSentinelModePara* controlsetsentinelmodepara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlsetsentinelmodepara_);
  }
  controlsetsentinelmodepara_ = controlsetsentinelmodepara;
  if (controlsetsentinelmodepara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlSetSentinelModePara)
}
inline ::ControlNS::ControlSetSentinelModePara* Parameters::release_controlsetsentinelmodepara() {
  
  ::ControlNS::ControlSetSentinelModePara* temp = controlsetsentinelmodepara_;
  controlsetsentinelmodepara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlSetSentinelModePara* Parameters::unsafe_arena_release_controlsetsentinelmodepara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlSetSentinelModePara)
  
  ::ControlNS::ControlSetSentinelModePara* temp = controlsetsentinelmodepara_;
  controlsetsentinelmodepara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlSetSentinelModePara* Parameters::_internal_mutable_controlsetsentinelmodepara() {
  
  if (controlsetsentinelmodepara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlSetSentinelModePara>(GetArenaForAllocation());
    controlsetsentinelmodepara_ = p;
  }
  return controlsetsentinelmodepara_;
}
inline ::ControlNS::ControlSetSentinelModePara* Parameters::mutable_controlsetsentinelmodepara() {
  ::ControlNS::ControlSetSentinelModePara* _msg = _internal_mutable_controlsetsentinelmodepara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlSetSentinelModePara)
  return _msg;
}
inline void Parameters::set_allocated_controlsetsentinelmodepara(::ControlNS::ControlSetSentinelModePara* controlsetsentinelmodepara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlsetsentinelmodepara_;
  }
  if (controlsetsentinelmodepara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlSetSentinelModePara>::GetOwningArena(controlsetsentinelmodepara);
    if (message_arena != submessage_arena) {
      controlsetsentinelmodepara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlsetsentinelmodepara, submessage_arena);
    }
    
  } else {
    
  }
  controlsetsentinelmodepara_ = controlsetsentinelmodepara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlSetSentinelModePara)
}

// .ControlNS.ControlGetECUVersionPara controlGetECUVersionPara = 16;
inline bool Parameters::_internal_has_controlgetecuversionpara() const {
  return this != internal_default_instance() && controlgetecuversionpara_ != nullptr;
}
inline bool Parameters::has_controlgetecuversionpara() const {
  return _internal_has_controlgetecuversionpara();
}
inline void Parameters::clear_controlgetecuversionpara() {
  if (GetArenaForAllocation() == nullptr && controlgetecuversionpara_ != nullptr) {
    delete controlgetecuversionpara_;
  }
  controlgetecuversionpara_ = nullptr;
}
inline const ::ControlNS::ControlGetECUVersionPara& Parameters::_internal_controlgetecuversionpara() const {
  const ::ControlNS::ControlGetECUVersionPara* p = controlgetecuversionpara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlGetECUVersionPara&>(
      ::ControlNS::_ControlGetECUVersionPara_default_instance_);
}
inline const ::ControlNS::ControlGetECUVersionPara& Parameters::controlgetecuversionpara() const {
  // @@protoc_insertion_point(field_get:ControlNS.Parameters.controlGetECUVersionPara)
  return _internal_controlgetecuversionpara();
}
inline void Parameters::unsafe_arena_set_allocated_controlgetecuversionpara(
    ::ControlNS::ControlGetECUVersionPara* controlgetecuversionpara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(controlgetecuversionpara_);
  }
  controlgetecuversionpara_ = controlgetecuversionpara;
  if (controlgetecuversionpara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.Parameters.controlGetECUVersionPara)
}
inline ::ControlNS::ControlGetECUVersionPara* Parameters::release_controlgetecuversionpara() {
  
  ::ControlNS::ControlGetECUVersionPara* temp = controlgetecuversionpara_;
  controlgetecuversionpara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlGetECUVersionPara* Parameters::unsafe_arena_release_controlgetecuversionpara() {
  // @@protoc_insertion_point(field_release:ControlNS.Parameters.controlGetECUVersionPara)
  
  ::ControlNS::ControlGetECUVersionPara* temp = controlgetecuversionpara_;
  controlgetecuversionpara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlGetECUVersionPara* Parameters::_internal_mutable_controlgetecuversionpara() {
  
  if (controlgetecuversionpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlGetECUVersionPara>(GetArenaForAllocation());
    controlgetecuversionpara_ = p;
  }
  return controlgetecuversionpara_;
}
inline ::ControlNS::ControlGetECUVersionPara* Parameters::mutable_controlgetecuversionpara() {
  ::ControlNS::ControlGetECUVersionPara* _msg = _internal_mutable_controlgetecuversionpara();
  // @@protoc_insertion_point(field_mutable:ControlNS.Parameters.controlGetECUVersionPara)
  return _msg;
}
inline void Parameters::set_allocated_controlgetecuversionpara(::ControlNS::ControlGetECUVersionPara* controlgetecuversionpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete controlgetecuversionpara_;
  }
  if (controlgetecuversionpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlGetECUVersionPara>::GetOwningArena(controlgetecuversionpara);
    if (message_arena != submessage_arena) {
      controlgetecuversionpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controlgetecuversionpara, submessage_arena);
    }
    
  } else {
    
  }
  controlgetecuversionpara_ = controlgetecuversionpara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.Parameters.controlGetECUVersionPara)
}

// -------------------------------------------------------------------

// ControlEngineResponse

// uint32 result = 1;
inline void ControlEngineResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlEngineResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlEngineResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlEngineResponse.result)
  return _internal_result();
}
inline void ControlEngineResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlEngineResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlEngineResponse.result)
}

// -------------------------------------------------------------------

// ControlEnginePara

// .ControlNS.EngineOpt enginStart = 1;
inline void ControlEnginePara::clear_enginstart() {
  enginstart_ = 0;
}
inline ::ControlNS::EngineOpt ControlEnginePara::_internal_enginstart() const {
  return static_cast< ::ControlNS::EngineOpt >(enginstart_);
}
inline ::ControlNS::EngineOpt ControlEnginePara::enginstart() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlEnginePara.enginStart)
  return _internal_enginstart();
}
inline void ControlEnginePara::_internal_set_enginstart(::ControlNS::EngineOpt value) {
  
  enginstart_ = value;
}
inline void ControlEnginePara::set_enginstart(::ControlNS::EngineOpt value) {
  _internal_set_enginstart(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlEnginePara.enginStart)
}

// -------------------------------------------------------------------

// ControlGetPositionResponse

// uint32 result = 1;
inline void ControlGetPositionResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlGetPositionResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlGetPositionResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetPositionResponse.result)
  return _internal_result();
}
inline void ControlGetPositionResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlGetPositionResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlGetPositionResponse.result)
}

// -------------------------------------------------------------------

// ControlFindCarResponse

// uint32 result = 1;
inline void ControlFindCarResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlFindCarResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlFindCarResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlFindCarResponse.result)
  return _internal_result();
}
inline void ControlFindCarResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlFindCarResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlFindCarResponse.result)
}

// -------------------------------------------------------------------

// ControlFindCarPara

// .ControlNS.FindCarOpt findCarOpt = 1;
inline void ControlFindCarPara::clear_findcaropt() {
  findcaropt_ = 0;
}
inline ::ControlNS::FindCarOpt ControlFindCarPara::_internal_findcaropt() const {
  return static_cast< ::ControlNS::FindCarOpt >(findcaropt_);
}
inline ::ControlNS::FindCarOpt ControlFindCarPara::findcaropt() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlFindCarPara.findCarOpt)
  return _internal_findcaropt();
}
inline void ControlFindCarPara::_internal_set_findcaropt(::ControlNS::FindCarOpt value) {
  
  findcaropt_ = value;
}
inline void ControlFindCarPara::set_findcaropt(::ControlNS::FindCarOpt value) {
  _internal_set_findcaropt(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlFindCarPara.findCarOpt)
}

// -------------------------------------------------------------------

// ControlGearReportResponse

// uint32 result = 1;
inline void ControlGearReportResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlGearReportResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlGearReportResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGearReportResponse.result)
  return _internal_result();
}
inline void ControlGearReportResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlGearReportResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlGearReportResponse.result)
}

// -------------------------------------------------------------------

// ControlGetPositionPara

// bytes location = 1;
inline void ControlGetPositionPara::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& ControlGetPositionPara::location() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetPositionPara.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlGetPositionPara::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ControlGetPositionPara.location)
}
inline std::string* ControlGetPositionPara::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlGetPositionPara.location)
  return _s;
}
inline const std::string& ControlGetPositionPara::_internal_location() const {
  return location_.Get();
}
inline void ControlGetPositionPara::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlGetPositionPara::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlGetPositionPara::release_location() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlGetPositionPara.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlGetPositionPara::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlGetPositionPara.location)
}

// -------------------------------------------------------------------

// ControlGetTPMSResponse

// uint32 result = 1;
inline void ControlGetTPMSResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlGetTPMSResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlGetTPMSResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetTPMSResponse.result)
  return _internal_result();
}
inline void ControlGetTPMSResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlGetTPMSResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlGetTPMSResponse.result)
}

// -------------------------------------------------------------------

// ControlGetTPMSPara

// .StatusNS.TpmsInfo tpmsInfo = 1;
inline bool ControlGetTPMSPara::_internal_has_tpmsinfo() const {
  return this != internal_default_instance() && tpmsinfo_ != nullptr;
}
inline bool ControlGetTPMSPara::has_tpmsinfo() const {
  return _internal_has_tpmsinfo();
}
inline const ::StatusNS::TpmsInfo& ControlGetTPMSPara::_internal_tpmsinfo() const {
  const ::StatusNS::TpmsInfo* p = tpmsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::StatusNS::TpmsInfo&>(
      ::StatusNS::_TpmsInfo_default_instance_);
}
inline const ::StatusNS::TpmsInfo& ControlGetTPMSPara::tpmsinfo() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetTPMSPara.tpmsInfo)
  return _internal_tpmsinfo();
}
inline void ControlGetTPMSPara::unsafe_arena_set_allocated_tpmsinfo(
    ::StatusNS::TpmsInfo* tpmsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tpmsinfo_);
  }
  tpmsinfo_ = tpmsinfo;
  if (tpmsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlGetTPMSPara.tpmsInfo)
}
inline ::StatusNS::TpmsInfo* ControlGetTPMSPara::release_tpmsinfo() {
  
  ::StatusNS::TpmsInfo* temp = tpmsinfo_;
  tpmsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StatusNS::TpmsInfo* ControlGetTPMSPara::unsafe_arena_release_tpmsinfo() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlGetTPMSPara.tpmsInfo)
  
  ::StatusNS::TpmsInfo* temp = tpmsinfo_;
  tpmsinfo_ = nullptr;
  return temp;
}
inline ::StatusNS::TpmsInfo* ControlGetTPMSPara::_internal_mutable_tpmsinfo() {
  
  if (tpmsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::StatusNS::TpmsInfo>(GetArenaForAllocation());
    tpmsinfo_ = p;
  }
  return tpmsinfo_;
}
inline ::StatusNS::TpmsInfo* ControlGetTPMSPara::mutable_tpmsinfo() {
  ::StatusNS::TpmsInfo* _msg = _internal_mutable_tpmsinfo();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlGetTPMSPara.tpmsInfo)
  return _msg;
}
inline void ControlGetTPMSPara::set_allocated_tpmsinfo(::StatusNS::TpmsInfo* tpmsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tpmsinfo_);
  }
  if (tpmsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tpmsinfo));
    if (message_arena != submessage_arena) {
      tpmsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tpmsinfo, submessage_arena);
    }
    
  } else {
    
  }
  tpmsinfo_ = tpmsinfo;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlGetTPMSPara.tpmsInfo)
}

// -------------------------------------------------------------------

// ControlTakeParkingPhotoResponse

// uint32 result = 1;
inline void ControlTakeParkingPhotoResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlTakeParkingPhotoResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlTakeParkingPhotoResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlTakeParkingPhotoResponse.result)
  return _internal_result();
}
inline void ControlTakeParkingPhotoResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlTakeParkingPhotoResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlTakeParkingPhotoResponse.result)
}

// -------------------------------------------------------------------

// ControlTakeParkingPhotoPara

// .ControlNS.CameraOpt cameraOpt = 1;
inline void ControlTakeParkingPhotoPara::clear_cameraopt() {
  cameraopt_ = 0;
}
inline ::ControlNS::CameraOpt ControlTakeParkingPhotoPara::_internal_cameraopt() const {
  return static_cast< ::ControlNS::CameraOpt >(cameraopt_);
}
inline ::ControlNS::CameraOpt ControlTakeParkingPhotoPara::cameraopt() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlTakeParkingPhotoPara.cameraOpt)
  return _internal_cameraopt();
}
inline void ControlTakeParkingPhotoPara::_internal_set_cameraopt(::ControlNS::CameraOpt value) {
  
  cameraopt_ = value;
}
inline void ControlTakeParkingPhotoPara::set_cameraopt(::ControlNS::CameraOpt value) {
  _internal_set_cameraopt(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlTakeParkingPhotoPara.cameraOpt)
}

// -------------------------------------------------------------------

// ControlSetFenceResponse

// uint32 result = 1;
inline void ControlSetFenceResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlSetFenceResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlSetFenceResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetFenceResponse.result)
  return _internal_result();
}
inline void ControlSetFenceResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlSetFenceResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetFenceResponse.result)
}

// -------------------------------------------------------------------

// ControlSetRoundFencePara

// .ControlNS.Point center = 1;
inline bool ControlSetRoundFencePara::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool ControlSetRoundFencePara::has_center() const {
  return _internal_has_center();
}
inline void ControlSetRoundFencePara::clear_center() {
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::ControlNS::Point& ControlSetRoundFencePara::_internal_center() const {
  const ::ControlNS::Point* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::Point&>(
      ::ControlNS::_Point_default_instance_);
}
inline const ::ControlNS::Point& ControlSetRoundFencePara::center() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetRoundFencePara.center)
  return _internal_center();
}
inline void ControlSetRoundFencePara::unsafe_arena_set_allocated_center(
    ::ControlNS::Point* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlSetRoundFencePara.center)
}
inline ::ControlNS::Point* ControlSetRoundFencePara::release_center() {
  
  ::ControlNS::Point* temp = center_;
  center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::Point* ControlSetRoundFencePara::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlSetRoundFencePara.center)
  
  ::ControlNS::Point* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::ControlNS::Point* ControlSetRoundFencePara::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::Point>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::ControlNS::Point* ControlSetRoundFencePara::mutable_center() {
  ::ControlNS::Point* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlSetRoundFencePara.center)
  return _msg;
}
inline void ControlSetRoundFencePara::set_allocated_center(::ControlNS::Point* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::Point>::GetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlSetRoundFencePara.center)
}

// uint32 radius = 2;
inline void ControlSetRoundFencePara::clear_radius() {
  radius_ = 0u;
}
inline uint32_t ControlSetRoundFencePara::_internal_radius() const {
  return radius_;
}
inline uint32_t ControlSetRoundFencePara::radius() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetRoundFencePara.radius)
  return _internal_radius();
}
inline void ControlSetRoundFencePara::_internal_set_radius(uint32_t value) {
  
  radius_ = value;
}
inline void ControlSetRoundFencePara::set_radius(uint32_t value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetRoundFencePara.radius)
}

// uint64 start = 3;
inline void ControlSetRoundFencePara::clear_start() {
  start_ = uint64_t{0u};
}
inline uint64_t ControlSetRoundFencePara::_internal_start() const {
  return start_;
}
inline uint64_t ControlSetRoundFencePara::start() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetRoundFencePara.start)
  return _internal_start();
}
inline void ControlSetRoundFencePara::_internal_set_start(uint64_t value) {
  
  start_ = value;
}
inline void ControlSetRoundFencePara::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetRoundFencePara.start)
}

// uint64 end = 4;
inline void ControlSetRoundFencePara::clear_end() {
  end_ = uint64_t{0u};
}
inline uint64_t ControlSetRoundFencePara::_internal_end() const {
  return end_;
}
inline uint64_t ControlSetRoundFencePara::end() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetRoundFencePara.end)
  return _internal_end();
}
inline void ControlSetRoundFencePara::_internal_set_end(uint64_t value) {
  
  end_ = value;
}
inline void ControlSetRoundFencePara::set_end(uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetRoundFencePara.end)
}

// uint32 speed = 5;
inline void ControlSetRoundFencePara::clear_speed() {
  speed_ = 0u;
}
inline uint32_t ControlSetRoundFencePara::_internal_speed() const {
  return speed_;
}
inline uint32_t ControlSetRoundFencePara::speed() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetRoundFencePara.speed)
  return _internal_speed();
}
inline void ControlSetRoundFencePara::_internal_set_speed(uint32_t value) {
  
  speed_ = value;
}
inline void ControlSetRoundFencePara::set_speed(uint32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetRoundFencePara.speed)
}

// uint32 direction = 6;
inline void ControlSetRoundFencePara::clear_direction() {
  direction_ = 0u;
}
inline uint32_t ControlSetRoundFencePara::_internal_direction() const {
  return direction_;
}
inline uint32_t ControlSetRoundFencePara::direction() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetRoundFencePara.direction)
  return _internal_direction();
}
inline void ControlSetRoundFencePara::_internal_set_direction(uint32_t value) {
  
  direction_ = value;
}
inline void ControlSetRoundFencePara::set_direction(uint32_t value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetRoundFencePara.direction)
}

// string fenceID = 7;
inline void ControlSetRoundFencePara::clear_fenceid() {
  fenceid_.ClearToEmpty();
}
inline const std::string& ControlSetRoundFencePara::fenceid() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetRoundFencePara.fenceID)
  return _internal_fenceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlSetRoundFencePara::set_fenceid(ArgT0&& arg0, ArgT... args) {
 
 fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetRoundFencePara.fenceID)
}
inline std::string* ControlSetRoundFencePara::mutable_fenceid() {
  std::string* _s = _internal_mutable_fenceid();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlSetRoundFencePara.fenceID)
  return _s;
}
inline const std::string& ControlSetRoundFencePara::_internal_fenceid() const {
  return fenceid_.Get();
}
inline void ControlSetRoundFencePara::_internal_set_fenceid(const std::string& value) {
  
  fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlSetRoundFencePara::_internal_mutable_fenceid() {
  
  return fenceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlSetRoundFencePara::release_fenceid() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlSetRoundFencePara.fenceID)
  return fenceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlSetRoundFencePara::set_allocated_fenceid(std::string* fenceid) {
  if (fenceid != nullptr) {
    
  } else {
    
  }
  fenceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fenceid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fenceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlSetRoundFencePara.fenceID)
}

// -------------------------------------------------------------------

// ControlSetPolygonFencePara

// repeated .ControlNS.Point points = 1;
inline int ControlSetPolygonFencePara::_internal_points_size() const {
  return points_.size();
}
inline int ControlSetPolygonFencePara::points_size() const {
  return _internal_points_size();
}
inline void ControlSetPolygonFencePara::clear_points() {
  points_.Clear();
}
inline ::ControlNS::Point* ControlSetPolygonFencePara::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlSetPolygonFencePara.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::Point >*
ControlSetPolygonFencePara::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ControlNS.ControlSetPolygonFencePara.points)
  return &points_;
}
inline const ::ControlNS::Point& ControlSetPolygonFencePara::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::ControlNS::Point& ControlSetPolygonFencePara::points(int index) const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetPolygonFencePara.points)
  return _internal_points(index);
}
inline ::ControlNS::Point* ControlSetPolygonFencePara::_internal_add_points() {
  return points_.Add();
}
inline ::ControlNS::Point* ControlSetPolygonFencePara::add_points() {
  ::ControlNS::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:ControlNS.ControlSetPolygonFencePara.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::Point >&
ControlSetPolygonFencePara::points() const {
  // @@protoc_insertion_point(field_list:ControlNS.ControlSetPolygonFencePara.points)
  return points_;
}

// uint64 start = 2;
inline void ControlSetPolygonFencePara::clear_start() {
  start_ = uint64_t{0u};
}
inline uint64_t ControlSetPolygonFencePara::_internal_start() const {
  return start_;
}
inline uint64_t ControlSetPolygonFencePara::start() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetPolygonFencePara.start)
  return _internal_start();
}
inline void ControlSetPolygonFencePara::_internal_set_start(uint64_t value) {
  
  start_ = value;
}
inline void ControlSetPolygonFencePara::set_start(uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetPolygonFencePara.start)
}

// uint64 end = 3;
inline void ControlSetPolygonFencePara::clear_end() {
  end_ = uint64_t{0u};
}
inline uint64_t ControlSetPolygonFencePara::_internal_end() const {
  return end_;
}
inline uint64_t ControlSetPolygonFencePara::end() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetPolygonFencePara.end)
  return _internal_end();
}
inline void ControlSetPolygonFencePara::_internal_set_end(uint64_t value) {
  
  end_ = value;
}
inline void ControlSetPolygonFencePara::set_end(uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetPolygonFencePara.end)
}

// uint32 speed = 4;
inline void ControlSetPolygonFencePara::clear_speed() {
  speed_ = 0u;
}
inline uint32_t ControlSetPolygonFencePara::_internal_speed() const {
  return speed_;
}
inline uint32_t ControlSetPolygonFencePara::speed() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetPolygonFencePara.speed)
  return _internal_speed();
}
inline void ControlSetPolygonFencePara::_internal_set_speed(uint32_t value) {
  
  speed_ = value;
}
inline void ControlSetPolygonFencePara::set_speed(uint32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetPolygonFencePara.speed)
}

// uint32 direction = 5;
inline void ControlSetPolygonFencePara::clear_direction() {
  direction_ = 0u;
}
inline uint32_t ControlSetPolygonFencePara::_internal_direction() const {
  return direction_;
}
inline uint32_t ControlSetPolygonFencePara::direction() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetPolygonFencePara.direction)
  return _internal_direction();
}
inline void ControlSetPolygonFencePara::_internal_set_direction(uint32_t value) {
  
  direction_ = value;
}
inline void ControlSetPolygonFencePara::set_direction(uint32_t value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetPolygonFencePara.direction)
}

// string fenceID = 6;
inline void ControlSetPolygonFencePara::clear_fenceid() {
  fenceid_.ClearToEmpty();
}
inline const std::string& ControlSetPolygonFencePara::fenceid() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetPolygonFencePara.fenceID)
  return _internal_fenceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlSetPolygonFencePara::set_fenceid(ArgT0&& arg0, ArgT... args) {
 
 fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetPolygonFencePara.fenceID)
}
inline std::string* ControlSetPolygonFencePara::mutable_fenceid() {
  std::string* _s = _internal_mutable_fenceid();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlSetPolygonFencePara.fenceID)
  return _s;
}
inline const std::string& ControlSetPolygonFencePara::_internal_fenceid() const {
  return fenceid_.Get();
}
inline void ControlSetPolygonFencePara::_internal_set_fenceid(const std::string& value) {
  
  fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlSetPolygonFencePara::_internal_mutable_fenceid() {
  
  return fenceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlSetPolygonFencePara::release_fenceid() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlSetPolygonFencePara.fenceID)
  return fenceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlSetPolygonFencePara::set_allocated_fenceid(std::string* fenceid) {
  if (fenceid != nullptr) {
    
  } else {
    
  }
  fenceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fenceid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fenceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlSetPolygonFencePara.fenceID)
}

// -------------------------------------------------------------------

// ControlClearFencePara

// string fenceID = 1;
inline void ControlClearFencePara::clear_fenceid() {
  fenceid_.ClearToEmpty();
}
inline const std::string& ControlClearFencePara::fenceid() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlClearFencePara.fenceID)
  return _internal_fenceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlClearFencePara::set_fenceid(ArgT0&& arg0, ArgT... args) {
 
 fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ControlClearFencePara.fenceID)
}
inline std::string* ControlClearFencePara::mutable_fenceid() {
  std::string* _s = _internal_mutable_fenceid();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlClearFencePara.fenceID)
  return _s;
}
inline const std::string& ControlClearFencePara::_internal_fenceid() const {
  return fenceid_.Get();
}
inline void ControlClearFencePara::_internal_set_fenceid(const std::string& value) {
  
  fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlClearFencePara::_internal_mutable_fenceid() {
  
  return fenceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlClearFencePara::release_fenceid() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlClearFencePara.fenceID)
  return fenceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlClearFencePara::set_allocated_fenceid(std::string* fenceid) {
  if (fenceid != nullptr) {
    
  } else {
    
  }
  fenceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fenceid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fenceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlClearFencePara.fenceID)
}

// -------------------------------------------------------------------

// Point

// uint32 latitude = 1;
inline void Point::clear_latitude() {
  latitude_ = 0u;
}
inline uint32_t Point::_internal_latitude() const {
  return latitude_;
}
inline uint32_t Point::latitude() const {
  // @@protoc_insertion_point(field_get:ControlNS.Point.latitude)
  return _internal_latitude();
}
inline void Point::_internal_set_latitude(uint32_t value) {
  
  latitude_ = value;
}
inline void Point::set_latitude(uint32_t value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:ControlNS.Point.latitude)
}

// uint32 longitude = 2;
inline void Point::clear_longitude() {
  longitude_ = 0u;
}
inline uint32_t Point::_internal_longitude() const {
  return longitude_;
}
inline uint32_t Point::longitude() const {
  // @@protoc_insertion_point(field_get:ControlNS.Point.longitude)
  return _internal_longitude();
}
inline void Point::_internal_set_longitude(uint32_t value) {
  
  longitude_ = value;
}
inline void Point::set_longitude(uint32_t value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:ControlNS.Point.longitude)
}

// int32 hemisphere = 3;
inline void Point::clear_hemisphere() {
  hemisphere_ = 0;
}
inline int32_t Point::_internal_hemisphere() const {
  return hemisphere_;
}
inline int32_t Point::hemisphere() const {
  // @@protoc_insertion_point(field_get:ControlNS.Point.hemisphere)
  return _internal_hemisphere();
}
inline void Point::_internal_set_hemisphere(int32_t value) {
  
  hemisphere_ = value;
}
inline void Point::set_hemisphere(int32_t value) {
  _internal_set_hemisphere(value);
  // @@protoc_insertion_point(field_set:ControlNS.Point.hemisphere)
}

// -------------------------------------------------------------------

// ControlHeatSeatResponse

// uint32 result = 1;
inline void ControlHeatSeatResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlHeatSeatResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlHeatSeatResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatSeatResponse.result)
  return _internal_result();
}
inline void ControlHeatSeatResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlHeatSeatResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatSeatResponse.result)
}

// -------------------------------------------------------------------

// ControlHeatHandleBarResponse

// uint32 result = 1;
inline void ControlHeatHandleBarResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlHeatHandleBarResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlHeatHandleBarResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatHandleBarResponse.result)
  return _internal_result();
}
inline void ControlHeatHandleBarResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlHeatHandleBarResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatHandleBarResponse.result)
}

// -------------------------------------------------------------------

// ControlHeatSeatPara

// .ControlNS.SWITCH switch = 1;
inline void ControlHeatSeatPara::clear_switch_() {
  switch__ = 0;
}
inline ::ControlNS::SWITCH ControlHeatSeatPara::_internal_switch_() const {
  return static_cast< ::ControlNS::SWITCH >(switch__);
}
inline ::ControlNS::SWITCH ControlHeatSeatPara::switch_() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatSeatPara.switch)
  return _internal_switch_();
}
inline void ControlHeatSeatPara::_internal_set_switch_(::ControlNS::SWITCH value) {
  
  switch__ = value;
}
inline void ControlHeatSeatPara::set_switch_(::ControlNS::SWITCH value) {
  _internal_set_switch_(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatSeatPara.switch)
}

// uint32 level = 2;
inline void ControlHeatSeatPara::clear_level() {
  level_ = 0u;
}
inline uint32_t ControlHeatSeatPara::_internal_level() const {
  return level_;
}
inline uint32_t ControlHeatSeatPara::level() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatSeatPara.level)
  return _internal_level();
}
inline void ControlHeatSeatPara::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void ControlHeatSeatPara::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatSeatPara.level)
}

// -------------------------------------------------------------------

// ControlHeatHandleBarPara

// .ControlNS.SWITCH switch = 1;
inline void ControlHeatHandleBarPara::clear_switch_() {
  switch__ = 0;
}
inline ::ControlNS::SWITCH ControlHeatHandleBarPara::_internal_switch_() const {
  return static_cast< ::ControlNS::SWITCH >(switch__);
}
inline ::ControlNS::SWITCH ControlHeatHandleBarPara::switch_() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatHandleBarPara.switch)
  return _internal_switch_();
}
inline void ControlHeatHandleBarPara::_internal_set_switch_(::ControlNS::SWITCH value) {
  
  switch__ = value;
}
inline void ControlHeatHandleBarPara::set_switch_(::ControlNS::SWITCH value) {
  _internal_set_switch_(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatHandleBarPara.switch)
}

// .ControlNS.ControlHeatHandleBarPara.HandleType type = 2;
inline void ControlHeatHandleBarPara::clear_type() {
  type_ = 0;
}
inline ::ControlNS::ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara::_internal_type() const {
  return static_cast< ::ControlNS::ControlHeatHandleBarPara_HandleType >(type_);
}
inline ::ControlNS::ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara::type() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatHandleBarPara.type)
  return _internal_type();
}
inline void ControlHeatHandleBarPara::_internal_set_type(::ControlNS::ControlHeatHandleBarPara_HandleType value) {
  
  type_ = value;
}
inline void ControlHeatHandleBarPara::set_type(::ControlNS::ControlHeatHandleBarPara_HandleType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatHandleBarPara.type)
}

// uint32 level = 3;
inline void ControlHeatHandleBarPara::clear_level() {
  level_ = 0u;
}
inline uint32_t ControlHeatHandleBarPara::_internal_level() const {
  return level_;
}
inline uint32_t ControlHeatHandleBarPara::level() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatHandleBarPara.level)
  return _internal_level();
}
inline void ControlHeatHandleBarPara::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void ControlHeatHandleBarPara::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatHandleBarPara.level)
}

// -------------------------------------------------------------------

// ControlHeatReserveResponse

// uint32 result = 1;
inline void ControlHeatReserveResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlHeatReserveResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlHeatReserveResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatReserveResponse.result)
  return _internal_result();
}
inline void ControlHeatReserveResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlHeatReserveResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatReserveResponse.result)
}

// -------------------------------------------------------------------

// ControlHeatReservePara

// uint64 appointment = 1;
inline void ControlHeatReservePara::clear_appointment() {
  appointment_ = uint64_t{0u};
}
inline uint64_t ControlHeatReservePara::_internal_appointment() const {
  return appointment_;
}
inline uint64_t ControlHeatReservePara::appointment() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatReservePara.appointment)
  return _internal_appointment();
}
inline void ControlHeatReservePara::_internal_set_appointment(uint64_t value) {
  
  appointment_ = value;
}
inline void ControlHeatReservePara::set_appointment(uint64_t value) {
  _internal_set_appointment(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatReservePara.appointment)
}

// .ControlNS.ControlCommand reservation = 2;
inline void ControlHeatReservePara::clear_reservation() {
  reservation_ = 0;
}
inline ::ControlNS::ControlCommand ControlHeatReservePara::_internal_reservation() const {
  return static_cast< ::ControlNS::ControlCommand >(reservation_);
}
inline ::ControlNS::ControlCommand ControlHeatReservePara::reservation() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatReservePara.reservation)
  return _internal_reservation();
}
inline void ControlHeatReservePara::_internal_set_reservation(::ControlNS::ControlCommand value) {
  
  reservation_ = value;
}
inline void ControlHeatReservePara::set_reservation(::ControlNS::ControlCommand value) {
  _internal_set_reservation(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlHeatReservePara.reservation)
}

// .ControlNS.ControlHeatSeatPara heatSeatPara = 3;
inline bool ControlHeatReservePara::_internal_has_heatseatpara() const {
  return this != internal_default_instance() && heatseatpara_ != nullptr;
}
inline bool ControlHeatReservePara::has_heatseatpara() const {
  return _internal_has_heatseatpara();
}
inline void ControlHeatReservePara::clear_heatseatpara() {
  if (GetArenaForAllocation() == nullptr && heatseatpara_ != nullptr) {
    delete heatseatpara_;
  }
  heatseatpara_ = nullptr;
}
inline const ::ControlNS::ControlHeatSeatPara& ControlHeatReservePara::_internal_heatseatpara() const {
  const ::ControlNS::ControlHeatSeatPara* p = heatseatpara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatSeatPara&>(
      ::ControlNS::_ControlHeatSeatPara_default_instance_);
}
inline const ::ControlNS::ControlHeatSeatPara& ControlHeatReservePara::heatseatpara() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatReservePara.heatSeatPara)
  return _internal_heatseatpara();
}
inline void ControlHeatReservePara::unsafe_arena_set_allocated_heatseatpara(
    ::ControlNS::ControlHeatSeatPara* heatseatpara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heatseatpara_);
  }
  heatseatpara_ = heatseatpara;
  if (heatseatpara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlHeatReservePara.heatSeatPara)
}
inline ::ControlNS::ControlHeatSeatPara* ControlHeatReservePara::release_heatseatpara() {
  
  ::ControlNS::ControlHeatSeatPara* temp = heatseatpara_;
  heatseatpara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatSeatPara* ControlHeatReservePara::unsafe_arena_release_heatseatpara() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlHeatReservePara.heatSeatPara)
  
  ::ControlNS::ControlHeatSeatPara* temp = heatseatpara_;
  heatseatpara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatSeatPara* ControlHeatReservePara::_internal_mutable_heatseatpara() {
  
  if (heatseatpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatSeatPara>(GetArenaForAllocation());
    heatseatpara_ = p;
  }
  return heatseatpara_;
}
inline ::ControlNS::ControlHeatSeatPara* ControlHeatReservePara::mutable_heatseatpara() {
  ::ControlNS::ControlHeatSeatPara* _msg = _internal_mutable_heatseatpara();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlHeatReservePara.heatSeatPara)
  return _msg;
}
inline void ControlHeatReservePara::set_allocated_heatseatpara(::ControlNS::ControlHeatSeatPara* heatseatpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete heatseatpara_;
  }
  if (heatseatpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatSeatPara>::GetOwningArena(heatseatpara);
    if (message_arena != submessage_arena) {
      heatseatpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heatseatpara, submessage_arena);
    }
    
  } else {
    
  }
  heatseatpara_ = heatseatpara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlHeatReservePara.heatSeatPara)
}

// .ControlNS.ControlHeatHandleBarPara heatHandleBarPara = 4;
inline bool ControlHeatReservePara::_internal_has_heathandlebarpara() const {
  return this != internal_default_instance() && heathandlebarpara_ != nullptr;
}
inline bool ControlHeatReservePara::has_heathandlebarpara() const {
  return _internal_has_heathandlebarpara();
}
inline void ControlHeatReservePara::clear_heathandlebarpara() {
  if (GetArenaForAllocation() == nullptr && heathandlebarpara_ != nullptr) {
    delete heathandlebarpara_;
  }
  heathandlebarpara_ = nullptr;
}
inline const ::ControlNS::ControlHeatHandleBarPara& ControlHeatReservePara::_internal_heathandlebarpara() const {
  const ::ControlNS::ControlHeatHandleBarPara* p = heathandlebarpara_;
  return p != nullptr ? *p : reinterpret_cast<const ::ControlNS::ControlHeatHandleBarPara&>(
      ::ControlNS::_ControlHeatHandleBarPara_default_instance_);
}
inline const ::ControlNS::ControlHeatHandleBarPara& ControlHeatReservePara::heathandlebarpara() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlHeatReservePara.heatHandleBarPara)
  return _internal_heathandlebarpara();
}
inline void ControlHeatReservePara::unsafe_arena_set_allocated_heathandlebarpara(
    ::ControlNS::ControlHeatHandleBarPara* heathandlebarpara) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heathandlebarpara_);
  }
  heathandlebarpara_ = heathandlebarpara;
  if (heathandlebarpara) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ControlNS.ControlHeatReservePara.heatHandleBarPara)
}
inline ::ControlNS::ControlHeatHandleBarPara* ControlHeatReservePara::release_heathandlebarpara() {
  
  ::ControlNS::ControlHeatHandleBarPara* temp = heathandlebarpara_;
  heathandlebarpara_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ControlNS::ControlHeatHandleBarPara* ControlHeatReservePara::unsafe_arena_release_heathandlebarpara() {
  // @@protoc_insertion_point(field_release:ControlNS.ControlHeatReservePara.heatHandleBarPara)
  
  ::ControlNS::ControlHeatHandleBarPara* temp = heathandlebarpara_;
  heathandlebarpara_ = nullptr;
  return temp;
}
inline ::ControlNS::ControlHeatHandleBarPara* ControlHeatReservePara::_internal_mutable_heathandlebarpara() {
  
  if (heathandlebarpara_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlNS::ControlHeatHandleBarPara>(GetArenaForAllocation());
    heathandlebarpara_ = p;
  }
  return heathandlebarpara_;
}
inline ::ControlNS::ControlHeatHandleBarPara* ControlHeatReservePara::mutable_heathandlebarpara() {
  ::ControlNS::ControlHeatHandleBarPara* _msg = _internal_mutable_heathandlebarpara();
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlHeatReservePara.heatHandleBarPara)
  return _msg;
}
inline void ControlHeatReservePara::set_allocated_heathandlebarpara(::ControlNS::ControlHeatHandleBarPara* heathandlebarpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete heathandlebarpara_;
  }
  if (heathandlebarpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ControlNS::ControlHeatHandleBarPara>::GetOwningArena(heathandlebarpara);
    if (message_arena != submessage_arena) {
      heathandlebarpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heathandlebarpara, submessage_arena);
    }
    
  } else {
    
  }
  heathandlebarpara_ = heathandlebarpara;
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ControlHeatReservePara.heatHandleBarPara)
}

// -------------------------------------------------------------------

// ControlGetSignalIntensityResponse

// uint32 result = 1;
inline void ControlGetSignalIntensityResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlGetSignalIntensityResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlGetSignalIntensityResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetSignalIntensityResponse.result)
  return _internal_result();
}
inline void ControlGetSignalIntensityResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlGetSignalIntensityResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlGetSignalIntensityResponse.result)
}

// -------------------------------------------------------------------

// ControlGetSignalIntensityPara

// uint32 signalIntensity = 1;
inline void ControlGetSignalIntensityPara::clear_signalintensity() {
  signalintensity_ = 0u;
}
inline uint32_t ControlGetSignalIntensityPara::_internal_signalintensity() const {
  return signalintensity_;
}
inline uint32_t ControlGetSignalIntensityPara::signalintensity() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetSignalIntensityPara.signalIntensity)
  return _internal_signalintensity();
}
inline void ControlGetSignalIntensityPara::_internal_set_signalintensity(uint32_t value) {
  
  signalintensity_ = value;
}
inline void ControlGetSignalIntensityPara::set_signalintensity(uint32_t value) {
  _internal_set_signalintensity(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlGetSignalIntensityPara.signalIntensity)
}

// -------------------------------------------------------------------

// ControlGetAPNNameResponse

// uint32 result = 1;
inline void ControlGetAPNNameResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlGetAPNNameResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlGetAPNNameResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetAPNNameResponse.result)
  return _internal_result();
}
inline void ControlGetAPNNameResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlGetAPNNameResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlGetAPNNameResponse.result)
}

// -------------------------------------------------------------------

// ControlSetAPNNameResponse

// uint32 result = 1;
inline void ControlSetAPNNameResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlSetAPNNameResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlSetAPNNameResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetAPNNameResponse.result)
  return _internal_result();
}
inline void ControlSetAPNNameResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlSetAPNNameResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetAPNNameResponse.result)
}

// -------------------------------------------------------------------

// APN

// uint32 channel = 1;
inline void APN::clear_channel() {
  channel_ = 0u;
}
inline uint32_t APN::_internal_channel() const {
  return channel_;
}
inline uint32_t APN::channel() const {
  // @@protoc_insertion_point(field_get:ControlNS.APN.channel)
  return _internal_channel();
}
inline void APN::_internal_set_channel(uint32_t value) {
  
  channel_ = value;
}
inline void APN::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:ControlNS.APN.channel)
}

// string apn = 2;
inline void APN::clear_apn() {
  apn_.ClearToEmpty();
}
inline const std::string& APN::apn() const {
  // @@protoc_insertion_point(field_get:ControlNS.APN.apn)
  return _internal_apn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void APN::set_apn(ArgT0&& arg0, ArgT... args) {
 
 apn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.APN.apn)
}
inline std::string* APN::mutable_apn() {
  std::string* _s = _internal_mutable_apn();
  // @@protoc_insertion_point(field_mutable:ControlNS.APN.apn)
  return _s;
}
inline const std::string& APN::_internal_apn() const {
  return apn_.Get();
}
inline void APN::_internal_set_apn(const std::string& value) {
  
  apn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* APN::_internal_mutable_apn() {
  
  return apn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* APN::release_apn() {
  // @@protoc_insertion_point(field_release:ControlNS.APN.apn)
  return apn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void APN::set_allocated_apn(std::string* apn) {
  if (apn != nullptr) {
    
  } else {
    
  }
  apn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (apn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    apn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.APN.apn)
}

// -------------------------------------------------------------------

// ControlAPNNamePara

// repeated .ControlNS.APN names = 1;
inline int ControlAPNNamePara::_internal_names_size() const {
  return names_.size();
}
inline int ControlAPNNamePara::names_size() const {
  return _internal_names_size();
}
inline void ControlAPNNamePara::clear_names() {
  names_.Clear();
}
inline ::ControlNS::APN* ControlAPNNamePara::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlAPNNamePara.names)
  return names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::APN >*
ControlAPNNamePara::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:ControlNS.ControlAPNNamePara.names)
  return &names_;
}
inline const ::ControlNS::APN& ControlAPNNamePara::_internal_names(int index) const {
  return names_.Get(index);
}
inline const ::ControlNS::APN& ControlAPNNamePara::names(int index) const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlAPNNamePara.names)
  return _internal_names(index);
}
inline ::ControlNS::APN* ControlAPNNamePara::_internal_add_names() {
  return names_.Add();
}
inline ::ControlNS::APN* ControlAPNNamePara::add_names() {
  ::ControlNS::APN* _add = _internal_add_names();
  // @@protoc_insertion_point(field_add:ControlNS.ControlAPNNamePara.names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::APN >&
ControlAPNNamePara::names() const {
  // @@protoc_insertion_point(field_list:ControlNS.ControlAPNNamePara.names)
  return names_;
}

// -------------------------------------------------------------------

// ControlSetFrequencyResponse

// uint32 result = 1;
inline void ControlSetFrequencyResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlSetFrequencyResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlSetFrequencyResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetFrequencyResponse.result)
  return _internal_result();
}
inline void ControlSetFrequencyResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlSetFrequencyResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetFrequencyResponse.result)
}

// -------------------------------------------------------------------

// ControlSetFrequencyPara

// uint32 frequency = 1;
inline void ControlSetFrequencyPara::clear_frequency() {
  frequency_ = 0u;
}
inline uint32_t ControlSetFrequencyPara::_internal_frequency() const {
  return frequency_;
}
inline uint32_t ControlSetFrequencyPara::frequency() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetFrequencyPara.frequency)
  return _internal_frequency();
}
inline void ControlSetFrequencyPara::_internal_set_frequency(uint32_t value) {
  
  frequency_ = value;
}
inline void ControlSetFrequencyPara::set_frequency(uint32_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetFrequencyPara.frequency)
}

// -------------------------------------------------------------------

// ControlSetSentinelModeResponse

// uint32 result = 1;
inline void ControlSetSentinelModeResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlSetSentinelModeResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlSetSentinelModeResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetSentinelModeResponse.result)
  return _internal_result();
}
inline void ControlSetSentinelModeResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlSetSentinelModeResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetSentinelModeResponse.result)
}

// -------------------------------------------------------------------

// ControlSetSentinelModePara

// .ControlNS.SWITCH switch = 1;
inline void ControlSetSentinelModePara::clear_switch_() {
  switch__ = 0;
}
inline ::ControlNS::SWITCH ControlSetSentinelModePara::_internal_switch_() const {
  return static_cast< ::ControlNS::SWITCH >(switch__);
}
inline ::ControlNS::SWITCH ControlSetSentinelModePara::switch_() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlSetSentinelModePara.switch)
  return _internal_switch_();
}
inline void ControlSetSentinelModePara::_internal_set_switch_(::ControlNS::SWITCH value) {
  
  switch__ = value;
}
inline void ControlSetSentinelModePara::set_switch_(::ControlNS::SWITCH value) {
  _internal_set_switch_(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlSetSentinelModePara.switch)
}

// -------------------------------------------------------------------

// ControlGetECUVersionResponse

// uint32 result = 1;
inline void ControlGetECUVersionResponse::clear_result() {
  result_ = 0u;
}
inline uint32_t ControlGetECUVersionResponse::_internal_result() const {
  return result_;
}
inline uint32_t ControlGetECUVersionResponse::result() const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetECUVersionResponse.result)
  return _internal_result();
}
inline void ControlGetECUVersionResponse::_internal_set_result(uint32_t value) {
  
  result_ = value;
}
inline void ControlGetECUVersionResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ControlNS.ControlGetECUVersionResponse.result)
}

// -------------------------------------------------------------------

// ECUVersion

// .DiagnoseNS.Ecus ecu = 1;
inline void ECUVersion::clear_ecu() {
  ecu_ = 0;
}
inline ::DiagnoseNS::Ecus ECUVersion::_internal_ecu() const {
  return static_cast< ::DiagnoseNS::Ecus >(ecu_);
}
inline ::DiagnoseNS::Ecus ECUVersion::ecu() const {
  // @@protoc_insertion_point(field_get:ControlNS.ECUVersion.ecu)
  return _internal_ecu();
}
inline void ECUVersion::_internal_set_ecu(::DiagnoseNS::Ecus value) {
  
  ecu_ = value;
}
inline void ECUVersion::set_ecu(::DiagnoseNS::Ecus value) {
  _internal_set_ecu(value);
  // @@protoc_insertion_point(field_set:ControlNS.ECUVersion.ecu)
}

// string firmware = 2;
inline void ECUVersion::clear_firmware() {
  firmware_.ClearToEmpty();
}
inline const std::string& ECUVersion::firmware() const {
  // @@protoc_insertion_point(field_get:ControlNS.ECUVersion.firmware)
  return _internal_firmware();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECUVersion::set_firmware(ArgT0&& arg0, ArgT... args) {
 
 firmware_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ECUVersion.firmware)
}
inline std::string* ECUVersion::mutable_firmware() {
  std::string* _s = _internal_mutable_firmware();
  // @@protoc_insertion_point(field_mutable:ControlNS.ECUVersion.firmware)
  return _s;
}
inline const std::string& ECUVersion::_internal_firmware() const {
  return firmware_.Get();
}
inline void ECUVersion::_internal_set_firmware(const std::string& value) {
  
  firmware_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECUVersion::_internal_mutable_firmware() {
  
  return firmware_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECUVersion::release_firmware() {
  // @@protoc_insertion_point(field_release:ControlNS.ECUVersion.firmware)
  return firmware_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECUVersion::set_allocated_firmware(std::string* firmware) {
  if (firmware != nullptr) {
    
  } else {
    
  }
  firmware_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (firmware_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    firmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ECUVersion.firmware)
}

// string software = 3;
inline void ECUVersion::clear_software() {
  software_.ClearToEmpty();
}
inline const std::string& ECUVersion::software() const {
  // @@protoc_insertion_point(field_get:ControlNS.ECUVersion.software)
  return _internal_software();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECUVersion::set_software(ArgT0&& arg0, ArgT... args) {
 
 software_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ECUVersion.software)
}
inline std::string* ECUVersion::mutable_software() {
  std::string* _s = _internal_mutable_software();
  // @@protoc_insertion_point(field_mutable:ControlNS.ECUVersion.software)
  return _s;
}
inline const std::string& ECUVersion::_internal_software() const {
  return software_.Get();
}
inline void ECUVersion::_internal_set_software(const std::string& value) {
  
  software_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECUVersion::_internal_mutable_software() {
  
  return software_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECUVersion::release_software() {
  // @@protoc_insertion_point(field_release:ControlNS.ECUVersion.software)
  return software_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECUVersion::set_allocated_software(std::string* software) {
  if (software != nullptr) {
    
  } else {
    
  }
  software_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), software,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (software_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ECUVersion.software)
}

// string protocol = 4;
inline void ECUVersion::clear_protocol() {
  protocol_.ClearToEmpty();
}
inline const std::string& ECUVersion::protocol() const {
  // @@protoc_insertion_point(field_get:ControlNS.ECUVersion.protocol)
  return _internal_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECUVersion::set_protocol(ArgT0&& arg0, ArgT... args) {
 
 protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ECUVersion.protocol)
}
inline std::string* ECUVersion::mutable_protocol() {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:ControlNS.ECUVersion.protocol)
  return _s;
}
inline const std::string& ECUVersion::_internal_protocol() const {
  return protocol_.Get();
}
inline void ECUVersion::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECUVersion::_internal_mutable_protocol() {
  
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECUVersion::release_protocol() {
  // @@protoc_insertion_point(field_release:ControlNS.ECUVersion.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECUVersion::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (protocol_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ECUVersion.protocol)
}

// string manufacturer = 5;
inline void ECUVersion::clear_manufacturer() {
  manufacturer_.ClearToEmpty();
}
inline const std::string& ECUVersion::manufacturer() const {
  // @@protoc_insertion_point(field_get:ControlNS.ECUVersion.manufacturer)
  return _internal_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECUVersion::set_manufacturer(ArgT0&& arg0, ArgT... args) {
 
 manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ControlNS.ECUVersion.manufacturer)
}
inline std::string* ECUVersion::mutable_manufacturer() {
  std::string* _s = _internal_mutable_manufacturer();
  // @@protoc_insertion_point(field_mutable:ControlNS.ECUVersion.manufacturer)
  return _s;
}
inline const std::string& ECUVersion::_internal_manufacturer() const {
  return manufacturer_.Get();
}
inline void ECUVersion::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECUVersion::_internal_mutable_manufacturer() {
  
  return manufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECUVersion::release_manufacturer() {
  // @@protoc_insertion_point(field_release:ControlNS.ECUVersion.manufacturer)
  return manufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECUVersion::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ControlNS.ECUVersion.manufacturer)
}

// -------------------------------------------------------------------

// ControlGetECUVersionPara

// repeated .ControlNS.ECUVersion info = 1;
inline int ControlGetECUVersionPara::_internal_info_size() const {
  return info_.size();
}
inline int ControlGetECUVersionPara::info_size() const {
  return _internal_info_size();
}
inline void ControlGetECUVersionPara::clear_info() {
  info_.Clear();
}
inline ::ControlNS::ECUVersion* ControlGetECUVersionPara::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ControlNS.ControlGetECUVersionPara.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::ECUVersion >*
ControlGetECUVersionPara::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ControlNS.ControlGetECUVersionPara.info)
  return &info_;
}
inline const ::ControlNS::ECUVersion& ControlGetECUVersionPara::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::ControlNS::ECUVersion& ControlGetECUVersionPara::info(int index) const {
  // @@protoc_insertion_point(field_get:ControlNS.ControlGetECUVersionPara.info)
  return _internal_info(index);
}
inline ::ControlNS::ECUVersion* ControlGetECUVersionPara::_internal_add_info() {
  return info_.Add();
}
inline ::ControlNS::ECUVersion* ControlGetECUVersionPara::add_info() {
  ::ControlNS::ECUVersion* _add = _internal_add_info();
  // @@protoc_insertion_point(field_add:ControlNS.ControlGetECUVersionPara.info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ControlNS::ECUVersion >&
ControlGetECUVersionPara::info() const {
  // @@protoc_insertion_point(field_list:ControlNS.ControlGetECUVersionPara.info)
  return info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ControlNS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ControlNS::ControlHeatHandleBarPara_HandleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlNS::ControlHeatHandleBarPara_HandleType>() {
  return ::ControlNS::ControlHeatHandleBarPara_HandleType_descriptor();
}
template <> struct is_proto_enum< ::ControlNS::ControlCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlNS::ControlCommand>() {
  return ::ControlNS::ControlCommand_descriptor();
}
template <> struct is_proto_enum< ::ControlNS::EngineOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlNS::EngineOpt>() {
  return ::ControlNS::EngineOpt_descriptor();
}
template <> struct is_proto_enum< ::ControlNS::FindCarOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlNS::FindCarOpt>() {
  return ::ControlNS::FindCarOpt_descriptor();
}
template <> struct is_proto_enum< ::ControlNS::CameraOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlNS::CameraOpt>() {
  return ::ControlNS::CameraOpt_descriptor();
}
template <> struct is_proto_enum< ::ControlNS::SWITCH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlNS::SWITCH>() {
  return ::ControlNS::SWITCH_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_2eproto
