// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envelope.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_envelope_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_envelope_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_envelope_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_envelope_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_envelope_2eproto;
namespace EvelopeNS {
class Envelope;
struct EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
}  // namespace EvelopeNS
PROTOBUF_NAMESPACE_OPEN
template<> ::EvelopeNS::Envelope* Arena::CreateMaybeMessage<::EvelopeNS::Envelope>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace EvelopeNS {

enum Source : int {
  TBOX = 0,
  MOBILE = 1,
  OBD = 2,
  Source_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Source_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Source_IsValid(int value);
constexpr Source Source_MIN = TBOX;
constexpr Source Source_MAX = OBD;
constexpr int Source_ARRAYSIZE = Source_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Source_descriptor();
template<typename T>
inline const std::string& Source_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Source>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Source_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Source_descriptor(), enum_t_value);
}
inline bool Source_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Source* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Source>(
    Source_descriptor(), name, value);
}
// ===================================================================

class Envelope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EvelopeNS.Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  ~Envelope() override;
  explicit constexpr Envelope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Envelope(const Envelope& from);
  Envelope(Envelope&& from) noexcept
    : Envelope() {
    *this = ::std::move(from);
  }

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Envelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
               &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Envelope& a, Envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(Envelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Envelope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Envelope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Envelope& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Envelope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EvelopeNS.Envelope";
  }
  protected:
  explicit Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kVidFieldNumber = 3,
    kMsgFieldNumber = 4,
    kTimeFieldNumber = 2,
    kReceiveTimeFieldNumber = 6,
    kReSendFieldNumber = 5,
    kSourceFieldNumber = 7,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string vid = 3;
  void clear_vid();
  const std::string& vid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vid();
  PROTOBUF_NODISCARD std::string* release_vid();
  void set_allocated_vid(std::string* vid);
  private:
  const std::string& _internal_vid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vid(const std::string& value);
  std::string* _internal_mutable_vid();
  public:

  // .MessageNS.Message msg = 4;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::MessageNS::Message& msg() const;
  PROTOBUF_NODISCARD ::MessageNS::Message* release_msg();
  ::MessageNS::Message* mutable_msg();
  void set_allocated_msg(::MessageNS::Message* msg);
  private:
  const ::MessageNS::Message& _internal_msg() const;
  ::MessageNS::Message* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::MessageNS::Message* msg);
  ::MessageNS::Message* unsafe_arena_release_msg();

  // int64 time = 2;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int64 receiveTime = 6;
  void clear_receivetime();
  int64_t receivetime() const;
  void set_receivetime(int64_t value);
  private:
  int64_t _internal_receivetime() const;
  void _internal_set_receivetime(int64_t value);
  public:

  // bool reSend = 5;
  void clear_resend();
  bool resend() const;
  void set_resend(bool value);
  private:
  bool _internal_resend() const;
  void _internal_set_resend(bool value);
  public:

  // .EvelopeNS.Source source = 7;
  void clear_source();
  ::EvelopeNS::Source source() const;
  void set_source(::EvelopeNS::Source value);
  private:
  ::EvelopeNS::Source _internal_source() const;
  void _internal_set_source(::EvelopeNS::Source value);
  public:

  // @@protoc_insertion_point(class_scope:EvelopeNS.Envelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vid_;
  ::MessageNS::Message* msg_;
  int64_t time_;
  int64_t receivetime_;
  bool resend_;
  int source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_envelope_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Envelope

// string version = 1;
inline void Envelope::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Envelope::version() const {
  // @@protoc_insertion_point(field_get:EvelopeNS.Envelope.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EvelopeNS.Envelope.version)
}
inline std::string* Envelope::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:EvelopeNS.Envelope.version)
  return _s;
}
inline const std::string& Envelope::_internal_version() const {
  return version_.Get();
}
inline void Envelope::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Envelope::release_version() {
  // @@protoc_insertion_point(field_release:EvelopeNS.Envelope.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Envelope::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EvelopeNS.Envelope.version)
}

// int64 time = 2;
inline void Envelope::clear_time() {
  time_ = int64_t{0};
}
inline int64_t Envelope::_internal_time() const {
  return time_;
}
inline int64_t Envelope::time() const {
  // @@protoc_insertion_point(field_get:EvelopeNS.Envelope.time)
  return _internal_time();
}
inline void Envelope::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void Envelope::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:EvelopeNS.Envelope.time)
}

// string vid = 3;
inline void Envelope::clear_vid() {
  vid_.ClearToEmpty();
}
inline const std::string& Envelope::vid() const {
  // @@protoc_insertion_point(field_get:EvelopeNS.Envelope.vid)
  return _internal_vid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_vid(ArgT0&& arg0, ArgT... args) {
 
 vid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EvelopeNS.Envelope.vid)
}
inline std::string* Envelope::mutable_vid() {
  std::string* _s = _internal_mutable_vid();
  // @@protoc_insertion_point(field_mutable:EvelopeNS.Envelope.vid)
  return _s;
}
inline const std::string& Envelope::_internal_vid() const {
  return vid_.Get();
}
inline void Envelope::_internal_set_vid(const std::string& value) {
  
  vid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_vid() {
  
  return vid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Envelope::release_vid() {
  // @@protoc_insertion_point(field_release:EvelopeNS.Envelope.vid)
  return vid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Envelope::set_allocated_vid(std::string* vid) {
  if (vid != nullptr) {
    
  } else {
    
  }
  vid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EvelopeNS.Envelope.vid)
}

// .MessageNS.Message msg = 4;
inline bool Envelope::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool Envelope::has_msg() const {
  return _internal_has_msg();
}
inline const ::MessageNS::Message& Envelope::_internal_msg() const {
  const ::MessageNS::Message* p = msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::MessageNS::Message&>(
      ::MessageNS::_Message_default_instance_);
}
inline const ::MessageNS::Message& Envelope::msg() const {
  // @@protoc_insertion_point(field_get:EvelopeNS.Envelope.msg)
  return _internal_msg();
}
inline void Envelope::unsafe_arena_set_allocated_msg(
    ::MessageNS::Message* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EvelopeNS.Envelope.msg)
}
inline ::MessageNS::Message* Envelope::release_msg() {
  
  ::MessageNS::Message* temp = msg_;
  msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MessageNS::Message* Envelope::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:EvelopeNS.Envelope.msg)
  
  ::MessageNS::Message* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::MessageNS::Message* Envelope::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageNS::Message>(GetArenaForAllocation());
    msg_ = p;
  }
  return msg_;
}
inline ::MessageNS::Message* Envelope::mutable_msg() {
  ::MessageNS::Message* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:EvelopeNS.Envelope.msg)
  return _msg;
}
inline void Envelope::set_allocated_msg(::MessageNS::Message* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg));
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:EvelopeNS.Envelope.msg)
}

// bool reSend = 5;
inline void Envelope::clear_resend() {
  resend_ = false;
}
inline bool Envelope::_internal_resend() const {
  return resend_;
}
inline bool Envelope::resend() const {
  // @@protoc_insertion_point(field_get:EvelopeNS.Envelope.reSend)
  return _internal_resend();
}
inline void Envelope::_internal_set_resend(bool value) {
  
  resend_ = value;
}
inline void Envelope::set_resend(bool value) {
  _internal_set_resend(value);
  // @@protoc_insertion_point(field_set:EvelopeNS.Envelope.reSend)
}

// int64 receiveTime = 6;
inline void Envelope::clear_receivetime() {
  receivetime_ = int64_t{0};
}
inline int64_t Envelope::_internal_receivetime() const {
  return receivetime_;
}
inline int64_t Envelope::receivetime() const {
  // @@protoc_insertion_point(field_get:EvelopeNS.Envelope.receiveTime)
  return _internal_receivetime();
}
inline void Envelope::_internal_set_receivetime(int64_t value) {
  
  receivetime_ = value;
}
inline void Envelope::set_receivetime(int64_t value) {
  _internal_set_receivetime(value);
  // @@protoc_insertion_point(field_set:EvelopeNS.Envelope.receiveTime)
}

// .EvelopeNS.Source source = 7;
inline void Envelope::clear_source() {
  source_ = 0;
}
inline ::EvelopeNS::Source Envelope::_internal_source() const {
  return static_cast< ::EvelopeNS::Source >(source_);
}
inline ::EvelopeNS::Source Envelope::source() const {
  // @@protoc_insertion_point(field_get:EvelopeNS.Envelope.source)
  return _internal_source();
}
inline void Envelope::_internal_set_source(::EvelopeNS::Source value) {
  
  source_ = value;
}
inline void Envelope::set_source(::EvelopeNS::Source value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:EvelopeNS.Envelope.source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace EvelopeNS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EvelopeNS::Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EvelopeNS::Source>() {
  return ::EvelopeNS::Source_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_envelope_2eproto
