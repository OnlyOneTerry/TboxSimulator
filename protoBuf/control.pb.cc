// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#include "control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ControlNS {
constexpr Control::Control(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controlresponse_(nullptr)
  , para_(nullptr)
  , command_(0u)
  , controlcommand_(0)

  , paratype_(0u){}
struct ControlDefaultTypeInternal {
  constexpr ControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlDefaultTypeInternal() {}
  union {
    Control _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlDefaultTypeInternal _Control_default_instance_;
constexpr ControlResponse::ControlResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlengineresponse_(nullptr)
  , controlfindcarresponse_(nullptr)
  , controlgearreportresponse_(nullptr)
  , controlgetpositionresponse_(nullptr)
  , controlgettpmsresponse_(nullptr)
  , controltakeparkingphotoresponse_(nullptr)
  , controlsetroundfenceresponse_(nullptr)
  , controlheatseatresponse_(nullptr)
  , controlheathandlebarresponse_(nullptr)
  , controlheatreserveresponse_(nullptr)
  , controlgetsignalintensityresponse_(nullptr)
  , controlgetapnnameresponse_(nullptr)
  , controlsetfrequencyresponse_(nullptr)
  , controlsetapnnameresponse_(nullptr)
  , controlsetsentinelmoderesponse_(nullptr)
  , controlgetecuversionresponse_(nullptr){}
struct ControlResponseDefaultTypeInternal {
  constexpr ControlResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlResponseDefaultTypeInternal() {}
  union {
    ControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
constexpr Parameters::Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controlenginepara_(nullptr)
  , controlfindcarpara_(nullptr)
  , controlgetpositionpara_(nullptr)
  , controlgettmpspara_(nullptr)
  , controltakeparkingphotopara_(nullptr)
  , controlsetroundfencepara_(nullptr)
  , controlsetpolygonfencepara_(nullptr)
  , controlheatseatpara_(nullptr)
  , controlheathandlebarpara_(nullptr)
  , controlheatreservepara_(nullptr)
  , controlgetsignalintensitypara_(nullptr)
  , controlapnnamepara_(nullptr)
  , controlsetfrequencypara_(nullptr)
  , controlclearfencepara_(nullptr)
  , controlsetsentinelmodepara_(nullptr)
  , controlgetecuversionpara_(nullptr){}
struct ParametersDefaultTypeInternal {
  constexpr ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParametersDefaultTypeInternal() {}
  union {
    Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParametersDefaultTypeInternal _Parameters_default_instance_;
constexpr ControlEngineResponse::ControlEngineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlEngineResponseDefaultTypeInternal {
  constexpr ControlEngineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlEngineResponseDefaultTypeInternal() {}
  union {
    ControlEngineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlEngineResponseDefaultTypeInternal _ControlEngineResponse_default_instance_;
constexpr ControlEnginePara::ControlEnginePara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enginstart_(0)
{}
struct ControlEngineParaDefaultTypeInternal {
  constexpr ControlEngineParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlEngineParaDefaultTypeInternal() {}
  union {
    ControlEnginePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlEngineParaDefaultTypeInternal _ControlEnginePara_default_instance_;
constexpr ControlGetPositionResponse::ControlGetPositionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlGetPositionResponseDefaultTypeInternal {
  constexpr ControlGetPositionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetPositionResponseDefaultTypeInternal() {}
  union {
    ControlGetPositionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetPositionResponseDefaultTypeInternal _ControlGetPositionResponse_default_instance_;
constexpr ControlFindCarResponse::ControlFindCarResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlFindCarResponseDefaultTypeInternal {
  constexpr ControlFindCarResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlFindCarResponseDefaultTypeInternal() {}
  union {
    ControlFindCarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlFindCarResponseDefaultTypeInternal _ControlFindCarResponse_default_instance_;
constexpr ControlFindCarPara::ControlFindCarPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : findcaropt_(0)
{}
struct ControlFindCarParaDefaultTypeInternal {
  constexpr ControlFindCarParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlFindCarParaDefaultTypeInternal() {}
  union {
    ControlFindCarPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlFindCarParaDefaultTypeInternal _ControlFindCarPara_default_instance_;
constexpr ControlGearReportResponse::ControlGearReportResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlGearReportResponseDefaultTypeInternal {
  constexpr ControlGearReportResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGearReportResponseDefaultTypeInternal() {}
  union {
    ControlGearReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGearReportResponseDefaultTypeInternal _ControlGearReportResponse_default_instance_;
constexpr ControlGetPositionPara::ControlGetPositionPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ControlGetPositionParaDefaultTypeInternal {
  constexpr ControlGetPositionParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetPositionParaDefaultTypeInternal() {}
  union {
    ControlGetPositionPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetPositionParaDefaultTypeInternal _ControlGetPositionPara_default_instance_;
constexpr ControlGetTPMSResponse::ControlGetTPMSResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlGetTPMSResponseDefaultTypeInternal {
  constexpr ControlGetTPMSResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetTPMSResponseDefaultTypeInternal() {}
  union {
    ControlGetTPMSResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetTPMSResponseDefaultTypeInternal _ControlGetTPMSResponse_default_instance_;
constexpr ControlGetTPMSPara::ControlGetTPMSPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tpmsinfo_(nullptr){}
struct ControlGetTPMSParaDefaultTypeInternal {
  constexpr ControlGetTPMSParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetTPMSParaDefaultTypeInternal() {}
  union {
    ControlGetTPMSPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetTPMSParaDefaultTypeInternal _ControlGetTPMSPara_default_instance_;
constexpr ControlTakeParkingPhotoResponse::ControlTakeParkingPhotoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlTakeParkingPhotoResponseDefaultTypeInternal {
  constexpr ControlTakeParkingPhotoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlTakeParkingPhotoResponseDefaultTypeInternal() {}
  union {
    ControlTakeParkingPhotoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlTakeParkingPhotoResponseDefaultTypeInternal _ControlTakeParkingPhotoResponse_default_instance_;
constexpr ControlTakeParkingPhotoPara::ControlTakeParkingPhotoPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cameraopt_(0)
{}
struct ControlTakeParkingPhotoParaDefaultTypeInternal {
  constexpr ControlTakeParkingPhotoParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlTakeParkingPhotoParaDefaultTypeInternal() {}
  union {
    ControlTakeParkingPhotoPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlTakeParkingPhotoParaDefaultTypeInternal _ControlTakeParkingPhotoPara_default_instance_;
constexpr ControlSetFenceResponse::ControlSetFenceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlSetFenceResponseDefaultTypeInternal {
  constexpr ControlSetFenceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetFenceResponseDefaultTypeInternal() {}
  union {
    ControlSetFenceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetFenceResponseDefaultTypeInternal _ControlSetFenceResponse_default_instance_;
constexpr ControlSetRoundFencePara::ControlSetRoundFencePara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fenceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , center_(nullptr)
  , start_(uint64_t{0u})
  , radius_(0u)
  , speed_(0u)
  , end_(uint64_t{0u})
  , direction_(0u){}
struct ControlSetRoundFenceParaDefaultTypeInternal {
  constexpr ControlSetRoundFenceParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetRoundFenceParaDefaultTypeInternal() {}
  union {
    ControlSetRoundFencePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetRoundFenceParaDefaultTypeInternal _ControlSetRoundFencePara_default_instance_;
constexpr ControlSetPolygonFencePara::ControlSetPolygonFencePara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , fenceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_(uint64_t{0u})
  , end_(uint64_t{0u})
  , speed_(0u)
  , direction_(0u){}
struct ControlSetPolygonFenceParaDefaultTypeInternal {
  constexpr ControlSetPolygonFenceParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetPolygonFenceParaDefaultTypeInternal() {}
  union {
    ControlSetPolygonFencePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetPolygonFenceParaDefaultTypeInternal _ControlSetPolygonFencePara_default_instance_;
constexpr ControlClearFencePara::ControlClearFencePara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fenceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ControlClearFenceParaDefaultTypeInternal {
  constexpr ControlClearFenceParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlClearFenceParaDefaultTypeInternal() {}
  union {
    ControlClearFencePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlClearFenceParaDefaultTypeInternal _ControlClearFencePara_default_instance_;
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0u)
  , longitude_(0u)
  , hemisphere_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr ControlHeatSeatResponse::ControlHeatSeatResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlHeatSeatResponseDefaultTypeInternal {
  constexpr ControlHeatSeatResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlHeatSeatResponseDefaultTypeInternal() {}
  union {
    ControlHeatSeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlHeatSeatResponseDefaultTypeInternal _ControlHeatSeatResponse_default_instance_;
constexpr ControlHeatHandleBarResponse::ControlHeatHandleBarResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlHeatHandleBarResponseDefaultTypeInternal {
  constexpr ControlHeatHandleBarResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlHeatHandleBarResponseDefaultTypeInternal() {}
  union {
    ControlHeatHandleBarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlHeatHandleBarResponseDefaultTypeInternal _ControlHeatHandleBarResponse_default_instance_;
constexpr ControlHeatSeatPara::ControlHeatSeatPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : switch__(0)

  , level_(0u){}
struct ControlHeatSeatParaDefaultTypeInternal {
  constexpr ControlHeatSeatParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlHeatSeatParaDefaultTypeInternal() {}
  union {
    ControlHeatSeatPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlHeatSeatParaDefaultTypeInternal _ControlHeatSeatPara_default_instance_;
constexpr ControlHeatHandleBarPara::ControlHeatHandleBarPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : switch__(0)

  , type_(0)

  , level_(0u){}
struct ControlHeatHandleBarParaDefaultTypeInternal {
  constexpr ControlHeatHandleBarParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlHeatHandleBarParaDefaultTypeInternal() {}
  union {
    ControlHeatHandleBarPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlHeatHandleBarParaDefaultTypeInternal _ControlHeatHandleBarPara_default_instance_;
constexpr ControlHeatReserveResponse::ControlHeatReserveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlHeatReserveResponseDefaultTypeInternal {
  constexpr ControlHeatReserveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlHeatReserveResponseDefaultTypeInternal() {}
  union {
    ControlHeatReserveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlHeatReserveResponseDefaultTypeInternal _ControlHeatReserveResponse_default_instance_;
constexpr ControlHeatReservePara::ControlHeatReservePara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heatseatpara_(nullptr)
  , heathandlebarpara_(nullptr)
  , appointment_(uint64_t{0u})
  , reservation_(0)
{}
struct ControlHeatReserveParaDefaultTypeInternal {
  constexpr ControlHeatReserveParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlHeatReserveParaDefaultTypeInternal() {}
  union {
    ControlHeatReservePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlHeatReserveParaDefaultTypeInternal _ControlHeatReservePara_default_instance_;
constexpr ControlGetSignalIntensityResponse::ControlGetSignalIntensityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlGetSignalIntensityResponseDefaultTypeInternal {
  constexpr ControlGetSignalIntensityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetSignalIntensityResponseDefaultTypeInternal() {}
  union {
    ControlGetSignalIntensityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetSignalIntensityResponseDefaultTypeInternal _ControlGetSignalIntensityResponse_default_instance_;
constexpr ControlGetSignalIntensityPara::ControlGetSignalIntensityPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signalintensity_(0u){}
struct ControlGetSignalIntensityParaDefaultTypeInternal {
  constexpr ControlGetSignalIntensityParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetSignalIntensityParaDefaultTypeInternal() {}
  union {
    ControlGetSignalIntensityPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetSignalIntensityParaDefaultTypeInternal _ControlGetSignalIntensityPara_default_instance_;
constexpr ControlGetAPNNameResponse::ControlGetAPNNameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlGetAPNNameResponseDefaultTypeInternal {
  constexpr ControlGetAPNNameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetAPNNameResponseDefaultTypeInternal() {}
  union {
    ControlGetAPNNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetAPNNameResponseDefaultTypeInternal _ControlGetAPNNameResponse_default_instance_;
constexpr ControlSetAPNNameResponse::ControlSetAPNNameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlSetAPNNameResponseDefaultTypeInternal {
  constexpr ControlSetAPNNameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetAPNNameResponseDefaultTypeInternal() {}
  union {
    ControlSetAPNNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetAPNNameResponseDefaultTypeInternal _ControlSetAPNNameResponse_default_instance_;
constexpr APN::APN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(0u){}
struct APNDefaultTypeInternal {
  constexpr APNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~APNDefaultTypeInternal() {}
  union {
    APN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT APNDefaultTypeInternal _APN_default_instance_;
constexpr ControlAPNNamePara::ControlAPNNamePara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_(){}
struct ControlAPNNameParaDefaultTypeInternal {
  constexpr ControlAPNNameParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlAPNNameParaDefaultTypeInternal() {}
  union {
    ControlAPNNamePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlAPNNameParaDefaultTypeInternal _ControlAPNNamePara_default_instance_;
constexpr ControlSetFrequencyResponse::ControlSetFrequencyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlSetFrequencyResponseDefaultTypeInternal {
  constexpr ControlSetFrequencyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetFrequencyResponseDefaultTypeInternal() {}
  union {
    ControlSetFrequencyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetFrequencyResponseDefaultTypeInternal _ControlSetFrequencyResponse_default_instance_;
constexpr ControlSetFrequencyPara::ControlSetFrequencyPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frequency_(0u){}
struct ControlSetFrequencyParaDefaultTypeInternal {
  constexpr ControlSetFrequencyParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetFrequencyParaDefaultTypeInternal() {}
  union {
    ControlSetFrequencyPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetFrequencyParaDefaultTypeInternal _ControlSetFrequencyPara_default_instance_;
constexpr ControlSetSentinelModeResponse::ControlSetSentinelModeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlSetSentinelModeResponseDefaultTypeInternal {
  constexpr ControlSetSentinelModeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetSentinelModeResponseDefaultTypeInternal() {}
  union {
    ControlSetSentinelModeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetSentinelModeResponseDefaultTypeInternal _ControlSetSentinelModeResponse_default_instance_;
constexpr ControlSetSentinelModePara::ControlSetSentinelModePara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : switch__(0)
{}
struct ControlSetSentinelModeParaDefaultTypeInternal {
  constexpr ControlSetSentinelModeParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSetSentinelModeParaDefaultTypeInternal() {}
  union {
    ControlSetSentinelModePara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSetSentinelModeParaDefaultTypeInternal _ControlSetSentinelModePara_default_instance_;
constexpr ControlGetECUVersionResponse::ControlGetECUVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct ControlGetECUVersionResponseDefaultTypeInternal {
  constexpr ControlGetECUVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetECUVersionResponseDefaultTypeInternal() {}
  union {
    ControlGetECUVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetECUVersionResponseDefaultTypeInternal _ControlGetECUVersionResponse_default_instance_;
constexpr ECUVersion::ECUVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : firmware_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , software_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , manufacturer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ecu_(0)
{}
struct ECUVersionDefaultTypeInternal {
  constexpr ECUVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECUVersionDefaultTypeInternal() {}
  union {
    ECUVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECUVersionDefaultTypeInternal _ECUVersion_default_instance_;
constexpr ControlGetECUVersionPara::ControlGetECUVersionPara(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(){}
struct ControlGetECUVersionParaDefaultTypeInternal {
  constexpr ControlGetECUVersionParaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlGetECUVersionParaDefaultTypeInternal() {}
  union {
    ControlGetECUVersionPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlGetECUVersionParaDefaultTypeInternal _ControlGetECUVersionPara_default_instance_;
}  // namespace ControlNS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_2eproto[38];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_control_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_2eproto = nullptr;

const uint32_t TableStruct_control_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::Control, taskid_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Control, command_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Control, controlcommand_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Control, controlresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Control, paratype_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Control, para_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlengineresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlfindcarresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlgearreportresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlgetpositionresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlgettpmsresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controltakeparkingphotoresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlsetroundfenceresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlheatseatresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlheathandlebarresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlheatreserveresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlgetsignalintensityresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlgetapnnameresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlsetfrequencyresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlsetapnnameresponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlsetsentinelmoderesponse_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlResponse, controlgetecuversionresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlenginepara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlfindcarpara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlgetpositionpara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlgettmpspara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controltakeparkingphotopara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlsetroundfencepara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlsetpolygonfencepara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlheatseatpara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlheathandlebarpara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlheatreservepara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlgetsignalintensitypara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlapnnamepara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlsetfrequencypara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlclearfencepara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlsetsentinelmodepara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Parameters, controlgetecuversionpara_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlEngineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlEngineResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlEnginePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlEnginePara, enginstart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetPositionResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlFindCarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlFindCarResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlFindCarPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlFindCarPara, findcaropt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGearReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGearReportResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetPositionPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetPositionPara, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetTPMSResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetTPMSResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetTPMSPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetTPMSPara, tpmsinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlTakeParkingPhotoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlTakeParkingPhotoResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlTakeParkingPhotoPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlTakeParkingPhotoPara, cameraopt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetFenceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetFenceResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, center_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, radius_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, start_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, end_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, speed_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, direction_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetRoundFencePara, fenceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetPolygonFencePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetPolygonFencePara, points_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetPolygonFencePara, start_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetPolygonFencePara, end_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetPolygonFencePara, speed_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetPolygonFencePara, direction_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetPolygonFencePara, fenceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlClearFencePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlClearFencePara, fenceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::Point, latitude_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Point, longitude_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::Point, hemisphere_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatSeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatSeatResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatHandleBarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatHandleBarResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatSeatPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatSeatPara, switch__),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatSeatPara, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatHandleBarPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatHandleBarPara, switch__),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatHandleBarPara, type_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatHandleBarPara, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatReserveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatReserveResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatReservePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatReservePara, appointment_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatReservePara, reservation_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatReservePara, heatseatpara_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlHeatReservePara, heathandlebarpara_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetSignalIntensityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetSignalIntensityResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetSignalIntensityPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetSignalIntensityPara, signalintensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetAPNNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetAPNNameResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetAPNNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetAPNNameResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::APN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::APN, channel_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::APN, apn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlAPNNamePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlAPNNamePara, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetFrequencyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetFrequencyResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetFrequencyPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetFrequencyPara, frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetSentinelModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetSentinelModeResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetSentinelModePara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlSetSentinelModePara, switch__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetECUVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetECUVersionResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ECUVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ECUVersion, ecu_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ECUVersion, firmware_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ECUVersion, software_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ECUVersion, protocol_),
  PROTOBUF_FIELD_OFFSET(::ControlNS::ECUVersion, manufacturer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetECUVersionPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ControlNS::ControlGetECUVersionPara, info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ControlNS::Control)},
  { 12, -1, -1, sizeof(::ControlNS::ControlResponse)},
  { 34, -1, -1, sizeof(::ControlNS::Parameters)},
  { 56, -1, -1, sizeof(::ControlNS::ControlEngineResponse)},
  { 63, -1, -1, sizeof(::ControlNS::ControlEnginePara)},
  { 70, -1, -1, sizeof(::ControlNS::ControlGetPositionResponse)},
  { 77, -1, -1, sizeof(::ControlNS::ControlFindCarResponse)},
  { 84, -1, -1, sizeof(::ControlNS::ControlFindCarPara)},
  { 91, -1, -1, sizeof(::ControlNS::ControlGearReportResponse)},
  { 98, -1, -1, sizeof(::ControlNS::ControlGetPositionPara)},
  { 105, -1, -1, sizeof(::ControlNS::ControlGetTPMSResponse)},
  { 112, -1, -1, sizeof(::ControlNS::ControlGetTPMSPara)},
  { 119, -1, -1, sizeof(::ControlNS::ControlTakeParkingPhotoResponse)},
  { 126, -1, -1, sizeof(::ControlNS::ControlTakeParkingPhotoPara)},
  { 133, -1, -1, sizeof(::ControlNS::ControlSetFenceResponse)},
  { 140, -1, -1, sizeof(::ControlNS::ControlSetRoundFencePara)},
  { 153, -1, -1, sizeof(::ControlNS::ControlSetPolygonFencePara)},
  { 165, -1, -1, sizeof(::ControlNS::ControlClearFencePara)},
  { 172, -1, -1, sizeof(::ControlNS::Point)},
  { 181, -1, -1, sizeof(::ControlNS::ControlHeatSeatResponse)},
  { 188, -1, -1, sizeof(::ControlNS::ControlHeatHandleBarResponse)},
  { 195, -1, -1, sizeof(::ControlNS::ControlHeatSeatPara)},
  { 203, -1, -1, sizeof(::ControlNS::ControlHeatHandleBarPara)},
  { 212, -1, -1, sizeof(::ControlNS::ControlHeatReserveResponse)},
  { 219, -1, -1, sizeof(::ControlNS::ControlHeatReservePara)},
  { 229, -1, -1, sizeof(::ControlNS::ControlGetSignalIntensityResponse)},
  { 236, -1, -1, sizeof(::ControlNS::ControlGetSignalIntensityPara)},
  { 243, -1, -1, sizeof(::ControlNS::ControlGetAPNNameResponse)},
  { 250, -1, -1, sizeof(::ControlNS::ControlSetAPNNameResponse)},
  { 257, -1, -1, sizeof(::ControlNS::APN)},
  { 265, -1, -1, sizeof(::ControlNS::ControlAPNNamePara)},
  { 272, -1, -1, sizeof(::ControlNS::ControlSetFrequencyResponse)},
  { 279, -1, -1, sizeof(::ControlNS::ControlSetFrequencyPara)},
  { 286, -1, -1, sizeof(::ControlNS::ControlSetSentinelModeResponse)},
  { 293, -1, -1, sizeof(::ControlNS::ControlSetSentinelModePara)},
  { 300, -1, -1, sizeof(::ControlNS::ControlGetECUVersionResponse)},
  { 307, -1, -1, sizeof(::ControlNS::ECUVersion)},
  { 318, -1, -1, sizeof(::ControlNS::ControlGetECUVersionPara)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlEngineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlEnginePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlFindCarResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlFindCarPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGearReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetPositionPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetTPMSResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetTPMSPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlTakeParkingPhotoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlTakeParkingPhotoPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetFenceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetRoundFencePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetPolygonFencePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlClearFencePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlHeatSeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlHeatHandleBarResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlHeatSeatPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlHeatHandleBarPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlHeatReserveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlHeatReservePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetSignalIntensityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetSignalIntensityPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetAPNNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetAPNNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_APN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlAPNNamePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetFrequencyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetFrequencyPara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetSentinelModeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlSetSentinelModePara_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetECUVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ECUVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ControlNS::_ControlGetECUVersionPara_default_instance_),
};

const char descriptor_table_protodef_control_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcontrol.proto\022\tControlNS\032\014status.proto"
  "\032\016diagnose.proto\"\311\001\n\007Control\022\016\n\006taskID\030\001"
  " \001(\t\022\017\n\007command\030\002 \001(\r\0221\n\016controlCommand\030"
  "\003 \001(\0162\031.ControlNS.ControlCommand\0223\n\017cont"
  "rolResponse\030\004 \001(\0132\032.ControlNS.ControlRes"
  "ponse\022\020\n\010paraType\030\005 \001(\r\022#\n\004para\030\006 \001(\0132\025."
  "ControlNS.Parameters\"\304\t\n\017ControlResponse"
  "\022\?\n\025controlEngineResponse\030\001 \001(\0132 .Contro"
  "lNS.ControlEngineResponse\022A\n\026controlFind"
  "CarResponse\030\002 \001(\0132!.ControlNS.ControlFin"
  "dCarResponse\022G\n\031controlGearReportRespons"
  "e\030\003 \001(\0132$.ControlNS.ControlGearReportRes"
  "ponse\022I\n\032controlGetPositionResponse\030\004 \001("
  "\0132%.ControlNS.ControlGetPositionResponse"
  "\022A\n\026controlGetTPMSResponse\030\005 \001(\0132!.Contr"
  "olNS.ControlGetTPMSResponse\022S\n\037controlTa"
  "keParkingPhotoResponse\030\006 \001(\0132*.ControlNS"
  ".ControlTakeParkingPhotoResponse\022H\n\034cont"
  "rolSetRoundFenceResponse\030\007 \001(\0132\".Control"
  "NS.ControlSetFenceResponse\022C\n\027controlHea"
  "tSeatResponse\030\010 \001(\0132\".ControlNS.ControlH"
  "eatSeatResponse\022M\n\034controlHeatHandleBarR"
  "esponse\030\t \001(\0132\'.ControlNS.ControlHeatHan"
  "dleBarResponse\022I\n\032controlHeatReserveResp"
  "onse\030\n \001(\0132%.ControlNS.ControlHeatReserv"
  "eResponse\022W\n!controlGetSignalIntensityRe"
  "sponse\030\013 \001(\0132,.ControlNS.ControlGetSigna"
  "lIntensityResponse\022G\n\031controlGetAPNNameR"
  "esponse\030\014 \001(\0132$.ControlNS.ControlGetAPNN"
  "ameResponse\022K\n\033controlSetFrequencyRespon"
  "se\030\r \001(\0132&.ControlNS.ControlSetFrequency"
  "Response\022G\n\031controlSetAPNNameResponse\030\016 "
  "\001(\0132$.ControlNS.ControlSetAPNNameRespons"
  "e\022Q\n\036controlSetSentinelModeResponse\030\017 \001("
  "\0132).ControlNS.ControlSetSentinelModeResp"
  "onse\022M\n\034controlGetECUVersionResponse\030\020 \001"
  "(\0132\'.ControlNS.ControlGetECUVersionRespo"
  "nse\"\310\010\n\nParameters\0227\n\021controlEnginePara\030"
  "\001 \001(\0132\034.ControlNS.ControlEnginePara\0229\n\022c"
  "ontrolFindCarPara\030\002 \001(\0132\035.ControlNS.Cont"
  "rolFindCarPara\022A\n\026controlGetPositionPara"
  "\030\003 \001(\0132!.ControlNS.ControlGetPositionPar"
  "a\0229\n\022controlGetTMPSPara\030\004 \001(\0132\035.ControlN"
  "S.ControlGetTPMSPara\022K\n\033controlTakeParki"
  "ngPhotoPara\030\005 \001(\0132&.ControlNS.ControlTak"
  "eParkingPhotoPara\022E\n\030controlSetRoundFenc"
  "ePara\030\006 \001(\0132#.ControlNS.ControlSetRoundF"
  "encePara\022I\n\032controlSetPolygonFencePara\030\007"
  " \001(\0132%.ControlNS.ControlSetPolygonFenceP"
  "ara\022;\n\023controlHeatSeatPara\030\010 \001(\0132\036.Contr"
  "olNS.ControlHeatSeatPara\022E\n\030controlHeatH"
  "andleBarPara\030\t \001(\0132#.ControlNS.ControlHe"
  "atHandleBarPara\022A\n\026controlHeatReservePar"
  "a\030\n \001(\0132!.ControlNS.ControlHeatReservePa"
  "ra\022O\n\035controlGetSignalIntensityPara\030\013 \001("
  "\0132(.ControlNS.ControlGetSignalIntensityP"
  "ara\0229\n\022controlAPNNamePara\030\014 \001(\0132\035.Contro"
  "lNS.ControlAPNNamePara\022C\n\027controlSetFreq"
  "uencyPara\030\r \001(\0132\".ControlNS.ControlSetFr"
  "equencyPara\022\?\n\025controlClearFencePara\030\016 \001"
  "(\0132 .ControlNS.ControlClearFencePara\022I\n\032"
  "controlSetSentinelModePara\030\017 \001(\0132%.Contr"
  "olNS.ControlSetSentinelModePara\022E\n\030contr"
  "olGetECUVersionPara\030\020 \001(\0132#.ControlNS.Co"
  "ntrolGetECUVersionPara\"\'\n\025ControlEngineR"
  "esponse\022\016\n\006result\030\001 \001(\r\"=\n\021ControlEngine"
  "Para\022(\n\nenginStart\030\001 \001(\0162\024.ControlNS.Eng"
  "ineOpt\",\n\032ControlGetPositionResponse\022\016\n\006"
  "result\030\001 \001(\r\"(\n\026ControlFindCarResponse\022\016"
  "\n\006result\030\001 \001(\r\"\?\n\022ControlFindCarPara\022)\n\n"
  "findCarOpt\030\001 \001(\0162\025.ControlNS.FindCarOpt\""
  "+\n\031ControlGearReportResponse\022\016\n\006result\030\001"
  " \001(\r\"*\n\026ControlGetPositionPara\022\020\n\010locati"
  "on\030\001 \001(\014\"(\n\026ControlGetTPMSResponse\022\016\n\006re"
  "sult\030\001 \001(\r\":\n\022ControlGetTPMSPara\022$\n\010tpms"
  "Info\030\001 \001(\0132\022.StatusNS.TpmsInfo\"1\n\037Contro"
  "lTakeParkingPhotoResponse\022\016\n\006result\030\001 \001("
  "\r\"F\n\033ControlTakeParkingPhotoPara\022\'\n\tcame"
  "raOpt\030\001 \001(\0162\024.ControlNS.CameraOpt\")\n\027Con"
  "trolSetFenceResponse\022\016\n\006result\030\001 \001(\r\"\233\001\n"
  "\030ControlSetRoundFencePara\022 \n\006center\030\001 \001("
  "\0132\020.ControlNS.Point\022\016\n\006radius\030\002 \001(\r\022\r\n\005s"
  "tart\030\003 \001(\004\022\013\n\003end\030\004 \001(\004\022\r\n\005speed\030\005 \001(\r\022\021"
  "\n\tdirection\030\006 \001(\r\022\017\n\007fenceID\030\007 \001(\t\"\215\001\n\032C"
  "ontrolSetPolygonFencePara\022 \n\006points\030\001 \003("
  "\0132\020.ControlNS.Point\022\r\n\005start\030\002 \001(\004\022\013\n\003en"
  "d\030\003 \001(\004\022\r\n\005speed\030\004 \001(\r\022\021\n\tdirection\030\005 \001("
  "\r\022\017\n\007fenceID\030\006 \001(\t\"(\n\025ControlClearFenceP"
  "ara\022\017\n\007fenceID\030\001 \001(\t\"@\n\005Point\022\020\n\010latitud"
  "e\030\001 \001(\r\022\021\n\tlongitude\030\002 \001(\r\022\022\n\nhemisphere"
  "\030\003 \001(\005\")\n\027ControlHeatSeatResponse\022\016\n\006res"
  "ult\030\001 \001(\r\".\n\034ControlHeatHandleBarRespons"
  "e\022\016\n\006result\030\001 \001(\r\"G\n\023ControlHeatSeatPara"
  "\022!\n\006switch\030\001 \001(\0162\021.ControlNS.SWITCH\022\r\n\005l"
  "evel\030\002 \001(\r\"\266\001\n\030ControlHeatHandleBarPara\022"
  "!\n\006switch\030\001 \001(\0162\021.ControlNS.SWITCH\022<\n\004ty"
  "pe\030\002 \001(\0162..ControlNS.ControlHeatHandleBa"
  "rPara.HandleType\022\r\n\005level\030\003 \001(\r\"*\n\nHandl"
  "eType\022\007\n\003ALL\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\",\n\032C"
  "ontrolHeatReserveResponse\022\016\n\006result\030\001 \001("
  "\r\"\323\001\n\026ControlHeatReservePara\022\023\n\013appointm"
  "ent\030\001 \001(\004\022.\n\013reservation\030\002 \001(\0162\031.Control"
  "NS.ControlCommand\0224\n\014heatSeatPara\030\003 \001(\0132"
  "\036.ControlNS.ControlHeatSeatPara\022>\n\021heatH"
  "andleBarPara\030\004 \001(\0132#.ControlNS.ControlHe"
  "atHandleBarPara\"3\n!ControlGetSignalInten"
  "sityResponse\022\016\n\006result\030\001 \001(\r\"8\n\035ControlG"
  "etSignalIntensityPara\022\027\n\017signalIntensity"
  "\030\001 \001(\r\"+\n\031ControlGetAPNNameResponse\022\016\n\006r"
  "esult\030\001 \001(\r\"+\n\031ControlSetAPNNameResponse"
  "\022\016\n\006result\030\001 \001(\r\"#\n\003APN\022\017\n\007channel\030\001 \001(\r"
  "\022\013\n\003apn\030\002 \001(\t\"3\n\022ControlAPNNamePara\022\035\n\005n"
  "ames\030\001 \003(\0132\016.ControlNS.APN\"-\n\033ControlSet"
  "FrequencyResponse\022\016\n\006result\030\001 \001(\r\",\n\027Con"
  "trolSetFrequencyPara\022\021\n\tfrequency\030\001 \001(\r\""
  "0\n\036ControlSetSentinelModeResponse\022\016\n\006res"
  "ult\030\001 \001(\r\"\?\n\032ControlSetSentinelModePara\022"
  "!\n\006switch\030\001 \001(\0162\021.ControlNS.SWITCH\".\n\034Co"
  "ntrolGetECUVersionResponse\022\016\n\006result\030\001 \001"
  "(\r\"w\n\nECUVersion\022\035\n\003ecu\030\001 \001(\0162\020.Diagnose"
  "NS.Ecus\022\020\n\010firmware\030\002 \001(\t\022\020\n\010software\030\003 "
  "\001(\t\022\020\n\010protocol\030\004 \001(\t\022\024\n\014manufacturer\030\005 "
  "\001(\t\"\?\n\030ControlGetECUVersionPara\022#\n\004info\030"
  "\001 \003(\0132\025.ControlNS.ECUVersion*\230\004\n\016Control"
  "Command\022\014\n\010IN_VALID\020\000\022\032\n\026CONTROL_ENGINE_"
  "COMMAND\020\001\022\034\n\030CONTROL_FIND_CAR_COMMAND\020\002\022"
  "\026\n\022ENABLE_GEAR_REPORT\020\003\022\030\n\024CONTROL_GET_P"
  "OSITION\020\004\022\035\n\031CONTROL_GET_TIER_PRESSURE\020\005"
  "\022\036\n\032CONTROL_TAKE_PARKING_PHOTO\020\006\022\033\n\027CONT"
  "ROL_SET_ROUND_FENCE\020\007\022\035\n\031CONTROL_SET_POL"
  "YGON_FENCE\020\010\022\027\n\023CONTROL_CLEAR_FENCE\020\t\022\025\n"
  "\021CONTROL_HEAT_SEAT\020\n\022\032\n\026CONTROL_HEAT_HAN"
  "DLEBAR\020\013\022\030\n\024CONTROL_HEAT_RESERVE\020\014\022 \n\034CO"
  "NTROL_GET_SIGNAL_INTENSITY\020\r\022\030\n\024CONTROL_"
  "GET_APN_NAME\020\016\022\031\n\025CONTROL_SET_FREQUENCY\020"
  "\017\022\030\n\024CONTROL_SET_APN_NAME\020\020\022\035\n\031CONTROL_S"
  "ET_SENTINEL_MODE\020\021\022\033\n\027CONTROL_GET_ECU_VE"
  "RSION\020\022* \n\tEngineOpt\022\t\n\005START\020\000\022\010\n\004STOP\020"
  "\001*1\n\nFindCarOpt\022\t\n\005LIGHT\020\000\022\010\n\004HORN\020\001\022\016\n\n"
  "LIGHT_HORN\020\002*>\n\tCameraOpt\022\007\n\003ALL\020\000\022\t\n\005FR"
  "ONT\020\001\022\010\n\004REAR\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004*\031\n\006"
  "SWITCH\022\007\n\003OFF\020\000\022\006\n\002ON\020\001B\035\n\rcom.iov.proto"
  "B\014ControlProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_2eproto_deps[2] = {
  &::descriptor_table_diagnose_2eproto,
  &::descriptor_table_status_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_2eproto = {
  false, false, 5702, descriptor_table_protodef_control_2eproto, "control.proto", 
  &descriptor_table_control_2eproto_once, descriptor_table_control_2eproto_deps, 2, 38,
  schemas, file_default_instances, TableStruct_control_2eproto::offsets,
  file_level_metadata_control_2eproto, file_level_enum_descriptors_control_2eproto, file_level_service_descriptors_control_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_control_2eproto_getter() {
  return &descriptor_table_control_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_control_2eproto(&descriptor_table_control_2eproto);
namespace ControlNS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlHeatHandleBarPara_HandleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[0];
}
bool ControlHeatHandleBarPara_HandleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara::ALL;
constexpr ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara::LEFT;
constexpr ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara::RIGHT;
constexpr ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara::HandleType_MIN;
constexpr ControlHeatHandleBarPara_HandleType ControlHeatHandleBarPara::HandleType_MAX;
constexpr int ControlHeatHandleBarPara::HandleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[1];
}
bool ControlCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineOpt_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[2];
}
bool EngineOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FindCarOpt_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[3];
}
bool FindCarOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraOpt_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[4];
}
bool CameraOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SWITCH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[5];
}
bool SWITCH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Control::_Internal {
 public:
  static const ::ControlNS::ControlResponse& controlresponse(const Control* msg);
  static const ::ControlNS::Parameters& para(const Control* msg);
};

const ::ControlNS::ControlResponse&
Control::_Internal::controlresponse(const Control* msg) {
  return *msg->controlresponse_;
}
const ::ControlNS::Parameters&
Control::_Internal::para(const Control* msg) {
  return *msg->para_;
}
Control::Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.Control)
}
Control::Control(const Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_controlresponse()) {
    controlresponse_ = new ::ControlNS::ControlResponse(*from.controlresponse_);
  } else {
    controlresponse_ = nullptr;
  }
  if (from._internal_has_para()) {
    para_ = new ::ControlNS::Parameters(*from.para_);
  } else {
    para_ = nullptr;
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&paratype_) -
    reinterpret_cast<char*>(&command_)) + sizeof(paratype_));
  // @@protoc_insertion_point(copy_constructor:ControlNS.Control)
}

inline void Control::SharedCtor() {
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlresponse_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&paratype_) -
    reinterpret_cast<char*>(&controlresponse_)) + sizeof(paratype_));
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:ControlNS.Control)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete controlresponse_;
  if (this != internal_default_instance()) delete para_;
}

void Control::ArenaDtor(void* object) {
  Control* _this = reinterpret_cast< Control* >(object);
  (void)_this;
}
void Control::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.Control)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && controlresponse_ != nullptr) {
    delete controlresponse_;
  }
  controlresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && para_ != nullptr) {
    delete para_;
  }
  para_ = nullptr;
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paratype_) -
      reinterpret_cast<char*>(&command_)) + sizeof(paratype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.Control.taskID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlCommand controlCommand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_controlcommand(static_cast<::ControlNS::ControlCommand>(val));
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlResponse controlResponse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 paraType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          paratype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.Parameters para = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_para(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Control::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.Control)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.Control.taskID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // uint32 command = 2;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_command(), target);
  }

  // .ControlNS.ControlCommand controlCommand = 3;
  if (this->_internal_controlcommand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_controlcommand(), target);
  }

  // .ControlNS.ControlResponse controlResponse = 4;
  if (this->_internal_has_controlresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::controlresponse(this), target, stream);
  }

  // uint32 paraType = 5;
  if (this->_internal_paratype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_paratype(), target);
  }

  // .ControlNS.Parameters para = 6;
  if (this->_internal_has_para()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::para(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.Control)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .ControlNS.ControlResponse controlResponse = 4;
  if (this->_internal_has_controlresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlresponse_);
  }

  // .ControlNS.Parameters para = 6;
  if (this->_internal_has_para()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *para_);
  }

  // uint32 command = 2;
  if (this->_internal_command() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_command());
  }

  // .ControlNS.ControlCommand controlCommand = 3;
  if (this->_internal_controlcommand() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_controlcommand());
  }

  // uint32 paraType = 5;
  if (this->_internal_paratype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_paratype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control::GetClassData() const { return &_class_data_; }

void Control::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Control *>(to)->MergeFrom(
      static_cast<const Control &>(from));
}


void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.Control)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_has_controlresponse()) {
    _internal_mutable_controlresponse()->::ControlNS::ControlResponse::MergeFrom(from._internal_controlresponse());
  }
  if (from._internal_has_para()) {
    _internal_mutable_para()->::ControlNS::Parameters::MergeFrom(from._internal_para());
  }
  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  if (from._internal_controlcommand() != 0) {
    _internal_set_controlcommand(from._internal_controlcommand());
  }
  if (from._internal_paratype() != 0) {
    _internal_set_paratype(from._internal_paratype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::InternalSwap(Control* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control, paratype_)
      + sizeof(Control::paratype_)
      - PROTOBUF_FIELD_OFFSET(Control, controlresponse_)>(
          reinterpret_cast<char*>(&controlresponse_),
          reinterpret_cast<char*>(&other->controlresponse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[0]);
}

// ===================================================================

class ControlResponse::_Internal {
 public:
  static const ::ControlNS::ControlEngineResponse& controlengineresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlFindCarResponse& controlfindcarresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlGearReportResponse& controlgearreportresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlGetPositionResponse& controlgetpositionresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlGetTPMSResponse& controlgettpmsresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlTakeParkingPhotoResponse& controltakeparkingphotoresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlSetFenceResponse& controlsetroundfenceresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlHeatSeatResponse& controlheatseatresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlHeatHandleBarResponse& controlheathandlebarresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlHeatReserveResponse& controlheatreserveresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlGetSignalIntensityResponse& controlgetsignalintensityresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlGetAPNNameResponse& controlgetapnnameresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlSetFrequencyResponse& controlsetfrequencyresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlSetAPNNameResponse& controlsetapnnameresponse(const ControlResponse* msg);
  static const ::ControlNS::ControlSetSentinelModeResponse& controlsetsentinelmoderesponse(const ControlResponse* msg);
  static const ::ControlNS::ControlGetECUVersionResponse& controlgetecuversionresponse(const ControlResponse* msg);
};

const ::ControlNS::ControlEngineResponse&
ControlResponse::_Internal::controlengineresponse(const ControlResponse* msg) {
  return *msg->controlengineresponse_;
}
const ::ControlNS::ControlFindCarResponse&
ControlResponse::_Internal::controlfindcarresponse(const ControlResponse* msg) {
  return *msg->controlfindcarresponse_;
}
const ::ControlNS::ControlGearReportResponse&
ControlResponse::_Internal::controlgearreportresponse(const ControlResponse* msg) {
  return *msg->controlgearreportresponse_;
}
const ::ControlNS::ControlGetPositionResponse&
ControlResponse::_Internal::controlgetpositionresponse(const ControlResponse* msg) {
  return *msg->controlgetpositionresponse_;
}
const ::ControlNS::ControlGetTPMSResponse&
ControlResponse::_Internal::controlgettpmsresponse(const ControlResponse* msg) {
  return *msg->controlgettpmsresponse_;
}
const ::ControlNS::ControlTakeParkingPhotoResponse&
ControlResponse::_Internal::controltakeparkingphotoresponse(const ControlResponse* msg) {
  return *msg->controltakeparkingphotoresponse_;
}
const ::ControlNS::ControlSetFenceResponse&
ControlResponse::_Internal::controlsetroundfenceresponse(const ControlResponse* msg) {
  return *msg->controlsetroundfenceresponse_;
}
const ::ControlNS::ControlHeatSeatResponse&
ControlResponse::_Internal::controlheatseatresponse(const ControlResponse* msg) {
  return *msg->controlheatseatresponse_;
}
const ::ControlNS::ControlHeatHandleBarResponse&
ControlResponse::_Internal::controlheathandlebarresponse(const ControlResponse* msg) {
  return *msg->controlheathandlebarresponse_;
}
const ::ControlNS::ControlHeatReserveResponse&
ControlResponse::_Internal::controlheatreserveresponse(const ControlResponse* msg) {
  return *msg->controlheatreserveresponse_;
}
const ::ControlNS::ControlGetSignalIntensityResponse&
ControlResponse::_Internal::controlgetsignalintensityresponse(const ControlResponse* msg) {
  return *msg->controlgetsignalintensityresponse_;
}
const ::ControlNS::ControlGetAPNNameResponse&
ControlResponse::_Internal::controlgetapnnameresponse(const ControlResponse* msg) {
  return *msg->controlgetapnnameresponse_;
}
const ::ControlNS::ControlSetFrequencyResponse&
ControlResponse::_Internal::controlsetfrequencyresponse(const ControlResponse* msg) {
  return *msg->controlsetfrequencyresponse_;
}
const ::ControlNS::ControlSetAPNNameResponse&
ControlResponse::_Internal::controlsetapnnameresponse(const ControlResponse* msg) {
  return *msg->controlsetapnnameresponse_;
}
const ::ControlNS::ControlSetSentinelModeResponse&
ControlResponse::_Internal::controlsetsentinelmoderesponse(const ControlResponse* msg) {
  return *msg->controlsetsentinelmoderesponse_;
}
const ::ControlNS::ControlGetECUVersionResponse&
ControlResponse::_Internal::controlgetecuversionresponse(const ControlResponse* msg) {
  return *msg->controlgetecuversionresponse_;
}
ControlResponse::ControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlResponse)
}
ControlResponse::ControlResponse(const ControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlengineresponse()) {
    controlengineresponse_ = new ::ControlNS::ControlEngineResponse(*from.controlengineresponse_);
  } else {
    controlengineresponse_ = nullptr;
  }
  if (from._internal_has_controlfindcarresponse()) {
    controlfindcarresponse_ = new ::ControlNS::ControlFindCarResponse(*from.controlfindcarresponse_);
  } else {
    controlfindcarresponse_ = nullptr;
  }
  if (from._internal_has_controlgearreportresponse()) {
    controlgearreportresponse_ = new ::ControlNS::ControlGearReportResponse(*from.controlgearreportresponse_);
  } else {
    controlgearreportresponse_ = nullptr;
  }
  if (from._internal_has_controlgetpositionresponse()) {
    controlgetpositionresponse_ = new ::ControlNS::ControlGetPositionResponse(*from.controlgetpositionresponse_);
  } else {
    controlgetpositionresponse_ = nullptr;
  }
  if (from._internal_has_controlgettpmsresponse()) {
    controlgettpmsresponse_ = new ::ControlNS::ControlGetTPMSResponse(*from.controlgettpmsresponse_);
  } else {
    controlgettpmsresponse_ = nullptr;
  }
  if (from._internal_has_controltakeparkingphotoresponse()) {
    controltakeparkingphotoresponse_ = new ::ControlNS::ControlTakeParkingPhotoResponse(*from.controltakeparkingphotoresponse_);
  } else {
    controltakeparkingphotoresponse_ = nullptr;
  }
  if (from._internal_has_controlsetroundfenceresponse()) {
    controlsetroundfenceresponse_ = new ::ControlNS::ControlSetFenceResponse(*from.controlsetroundfenceresponse_);
  } else {
    controlsetroundfenceresponse_ = nullptr;
  }
  if (from._internal_has_controlheatseatresponse()) {
    controlheatseatresponse_ = new ::ControlNS::ControlHeatSeatResponse(*from.controlheatseatresponse_);
  } else {
    controlheatseatresponse_ = nullptr;
  }
  if (from._internal_has_controlheathandlebarresponse()) {
    controlheathandlebarresponse_ = new ::ControlNS::ControlHeatHandleBarResponse(*from.controlheathandlebarresponse_);
  } else {
    controlheathandlebarresponse_ = nullptr;
  }
  if (from._internal_has_controlheatreserveresponse()) {
    controlheatreserveresponse_ = new ::ControlNS::ControlHeatReserveResponse(*from.controlheatreserveresponse_);
  } else {
    controlheatreserveresponse_ = nullptr;
  }
  if (from._internal_has_controlgetsignalintensityresponse()) {
    controlgetsignalintensityresponse_ = new ::ControlNS::ControlGetSignalIntensityResponse(*from.controlgetsignalintensityresponse_);
  } else {
    controlgetsignalintensityresponse_ = nullptr;
  }
  if (from._internal_has_controlgetapnnameresponse()) {
    controlgetapnnameresponse_ = new ::ControlNS::ControlGetAPNNameResponse(*from.controlgetapnnameresponse_);
  } else {
    controlgetapnnameresponse_ = nullptr;
  }
  if (from._internal_has_controlsetfrequencyresponse()) {
    controlsetfrequencyresponse_ = new ::ControlNS::ControlSetFrequencyResponse(*from.controlsetfrequencyresponse_);
  } else {
    controlsetfrequencyresponse_ = nullptr;
  }
  if (from._internal_has_controlsetapnnameresponse()) {
    controlsetapnnameresponse_ = new ::ControlNS::ControlSetAPNNameResponse(*from.controlsetapnnameresponse_);
  } else {
    controlsetapnnameresponse_ = nullptr;
  }
  if (from._internal_has_controlsetsentinelmoderesponse()) {
    controlsetsentinelmoderesponse_ = new ::ControlNS::ControlSetSentinelModeResponse(*from.controlsetsentinelmoderesponse_);
  } else {
    controlsetsentinelmoderesponse_ = nullptr;
  }
  if (from._internal_has_controlgetecuversionresponse()) {
    controlgetecuversionresponse_ = new ::ControlNS::ControlGetECUVersionResponse(*from.controlgetecuversionresponse_);
  } else {
    controlgetecuversionresponse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlResponse)
}

inline void ControlResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlengineresponse_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controlgetecuversionresponse_) -
    reinterpret_cast<char*>(&controlengineresponse_)) + sizeof(controlgetecuversionresponse_));
}

ControlResponse::~ControlResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controlengineresponse_;
  if (this != internal_default_instance()) delete controlfindcarresponse_;
  if (this != internal_default_instance()) delete controlgearreportresponse_;
  if (this != internal_default_instance()) delete controlgetpositionresponse_;
  if (this != internal_default_instance()) delete controlgettpmsresponse_;
  if (this != internal_default_instance()) delete controltakeparkingphotoresponse_;
  if (this != internal_default_instance()) delete controlsetroundfenceresponse_;
  if (this != internal_default_instance()) delete controlheatseatresponse_;
  if (this != internal_default_instance()) delete controlheathandlebarresponse_;
  if (this != internal_default_instance()) delete controlheatreserveresponse_;
  if (this != internal_default_instance()) delete controlgetsignalintensityresponse_;
  if (this != internal_default_instance()) delete controlgetapnnameresponse_;
  if (this != internal_default_instance()) delete controlsetfrequencyresponse_;
  if (this != internal_default_instance()) delete controlsetapnnameresponse_;
  if (this != internal_default_instance()) delete controlsetsentinelmoderesponse_;
  if (this != internal_default_instance()) delete controlgetecuversionresponse_;
}

void ControlResponse::ArenaDtor(void* object) {
  ControlResponse* _this = reinterpret_cast< ControlResponse* >(object);
  (void)_this;
}
void ControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controlengineresponse_ != nullptr) {
    delete controlengineresponse_;
  }
  controlengineresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlfindcarresponse_ != nullptr) {
    delete controlfindcarresponse_;
  }
  controlfindcarresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgearreportresponse_ != nullptr) {
    delete controlgearreportresponse_;
  }
  controlgearreportresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgetpositionresponse_ != nullptr) {
    delete controlgetpositionresponse_;
  }
  controlgetpositionresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgettpmsresponse_ != nullptr) {
    delete controlgettpmsresponse_;
  }
  controlgettpmsresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controltakeparkingphotoresponse_ != nullptr) {
    delete controltakeparkingphotoresponse_;
  }
  controltakeparkingphotoresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetroundfenceresponse_ != nullptr) {
    delete controlsetroundfenceresponse_;
  }
  controlsetroundfenceresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlheatseatresponse_ != nullptr) {
    delete controlheatseatresponse_;
  }
  controlheatseatresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlheathandlebarresponse_ != nullptr) {
    delete controlheathandlebarresponse_;
  }
  controlheathandlebarresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlheatreserveresponse_ != nullptr) {
    delete controlheatreserveresponse_;
  }
  controlheatreserveresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgetsignalintensityresponse_ != nullptr) {
    delete controlgetsignalintensityresponse_;
  }
  controlgetsignalintensityresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgetapnnameresponse_ != nullptr) {
    delete controlgetapnnameresponse_;
  }
  controlgetapnnameresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetfrequencyresponse_ != nullptr) {
    delete controlsetfrequencyresponse_;
  }
  controlsetfrequencyresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetapnnameresponse_ != nullptr) {
    delete controlsetapnnameresponse_;
  }
  controlsetapnnameresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetsentinelmoderesponse_ != nullptr) {
    delete controlsetsentinelmoderesponse_;
  }
  controlsetsentinelmoderesponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgetecuversionresponse_ != nullptr) {
    delete controlgetecuversionresponse_;
  }
  controlgetecuversionresponse_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.ControlEngineResponse controlEngineResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlengineresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlFindCarResponse controlFindCarResponse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlfindcarresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGearReportResponse controlGearReportResponse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgearreportresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetPositionResponse controlGetPositionResponse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgetpositionresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetTPMSResponse controlGetTPMSResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgettpmsresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlTakeParkingPhotoResponse controlTakeParkingPhotoResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_controltakeparkingphotoresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetFenceResponse controlSetRoundFenceResponse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetroundfenceresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatSeatResponse controlHeatSeatResponse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlheatseatresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatHandleBarResponse controlHeatHandleBarResponse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlheathandlebarresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatReserveResponse controlHeatReserveResponse = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlheatreserveresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetSignalIntensityResponse controlGetSignalIntensityResponse = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgetsignalintensityresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetAPNNameResponse controlGetAPNNameResponse = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgetapnnameresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetFrequencyResponse controlSetFrequencyResponse = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetfrequencyresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetAPNNameResponse controlSetAPNNameResponse = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetapnnameresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetSentinelModeResponse controlSetSentinelModeResponse = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetsentinelmoderesponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetECUVersionResponse controlGetECUVersionResponse = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgetecuversionresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.ControlEngineResponse controlEngineResponse = 1;
  if (this->_internal_has_controlengineresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlengineresponse(this), target, stream);
  }

  // .ControlNS.ControlFindCarResponse controlFindCarResponse = 2;
  if (this->_internal_has_controlfindcarresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::controlfindcarresponse(this), target, stream);
  }

  // .ControlNS.ControlGearReportResponse controlGearReportResponse = 3;
  if (this->_internal_has_controlgearreportresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::controlgearreportresponse(this), target, stream);
  }

  // .ControlNS.ControlGetPositionResponse controlGetPositionResponse = 4;
  if (this->_internal_has_controlgetpositionresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::controlgetpositionresponse(this), target, stream);
  }

  // .ControlNS.ControlGetTPMSResponse controlGetTPMSResponse = 5;
  if (this->_internal_has_controlgettpmsresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::controlgettpmsresponse(this), target, stream);
  }

  // .ControlNS.ControlTakeParkingPhotoResponse controlTakeParkingPhotoResponse = 6;
  if (this->_internal_has_controltakeparkingphotoresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::controltakeparkingphotoresponse(this), target, stream);
  }

  // .ControlNS.ControlSetFenceResponse controlSetRoundFenceResponse = 7;
  if (this->_internal_has_controlsetroundfenceresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::controlsetroundfenceresponse(this), target, stream);
  }

  // .ControlNS.ControlHeatSeatResponse controlHeatSeatResponse = 8;
  if (this->_internal_has_controlheatseatresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::controlheatseatresponse(this), target, stream);
  }

  // .ControlNS.ControlHeatHandleBarResponse controlHeatHandleBarResponse = 9;
  if (this->_internal_has_controlheathandlebarresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::controlheathandlebarresponse(this), target, stream);
  }

  // .ControlNS.ControlHeatReserveResponse controlHeatReserveResponse = 10;
  if (this->_internal_has_controlheatreserveresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::controlheatreserveresponse(this), target, stream);
  }

  // .ControlNS.ControlGetSignalIntensityResponse controlGetSignalIntensityResponse = 11;
  if (this->_internal_has_controlgetsignalintensityresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::controlgetsignalintensityresponse(this), target, stream);
  }

  // .ControlNS.ControlGetAPNNameResponse controlGetAPNNameResponse = 12;
  if (this->_internal_has_controlgetapnnameresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::controlgetapnnameresponse(this), target, stream);
  }

  // .ControlNS.ControlSetFrequencyResponse controlSetFrequencyResponse = 13;
  if (this->_internal_has_controlsetfrequencyresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::controlsetfrequencyresponse(this), target, stream);
  }

  // .ControlNS.ControlSetAPNNameResponse controlSetAPNNameResponse = 14;
  if (this->_internal_has_controlsetapnnameresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::controlsetapnnameresponse(this), target, stream);
  }

  // .ControlNS.ControlSetSentinelModeResponse controlSetSentinelModeResponse = 15;
  if (this->_internal_has_controlsetsentinelmoderesponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::controlsetsentinelmoderesponse(this), target, stream);
  }

  // .ControlNS.ControlGetECUVersionResponse controlGetECUVersionResponse = 16;
  if (this->_internal_has_controlgetecuversionresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::controlgetecuversionresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlResponse)
  return target;
}

size_t ControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.ControlEngineResponse controlEngineResponse = 1;
  if (this->_internal_has_controlengineresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlengineresponse_);
  }

  // .ControlNS.ControlFindCarResponse controlFindCarResponse = 2;
  if (this->_internal_has_controlfindcarresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlfindcarresponse_);
  }

  // .ControlNS.ControlGearReportResponse controlGearReportResponse = 3;
  if (this->_internal_has_controlgearreportresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgearreportresponse_);
  }

  // .ControlNS.ControlGetPositionResponse controlGetPositionResponse = 4;
  if (this->_internal_has_controlgetpositionresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgetpositionresponse_);
  }

  // .ControlNS.ControlGetTPMSResponse controlGetTPMSResponse = 5;
  if (this->_internal_has_controlgettpmsresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgettpmsresponse_);
  }

  // .ControlNS.ControlTakeParkingPhotoResponse controlTakeParkingPhotoResponse = 6;
  if (this->_internal_has_controltakeparkingphotoresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controltakeparkingphotoresponse_);
  }

  // .ControlNS.ControlSetFenceResponse controlSetRoundFenceResponse = 7;
  if (this->_internal_has_controlsetroundfenceresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetroundfenceresponse_);
  }

  // .ControlNS.ControlHeatSeatResponse controlHeatSeatResponse = 8;
  if (this->_internal_has_controlheatseatresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlheatseatresponse_);
  }

  // .ControlNS.ControlHeatHandleBarResponse controlHeatHandleBarResponse = 9;
  if (this->_internal_has_controlheathandlebarresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlheathandlebarresponse_);
  }

  // .ControlNS.ControlHeatReserveResponse controlHeatReserveResponse = 10;
  if (this->_internal_has_controlheatreserveresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlheatreserveresponse_);
  }

  // .ControlNS.ControlGetSignalIntensityResponse controlGetSignalIntensityResponse = 11;
  if (this->_internal_has_controlgetsignalintensityresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgetsignalintensityresponse_);
  }

  // .ControlNS.ControlGetAPNNameResponse controlGetAPNNameResponse = 12;
  if (this->_internal_has_controlgetapnnameresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgetapnnameresponse_);
  }

  // .ControlNS.ControlSetFrequencyResponse controlSetFrequencyResponse = 13;
  if (this->_internal_has_controlsetfrequencyresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetfrequencyresponse_);
  }

  // .ControlNS.ControlSetAPNNameResponse controlSetAPNNameResponse = 14;
  if (this->_internal_has_controlsetapnnameresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetapnnameresponse_);
  }

  // .ControlNS.ControlSetSentinelModeResponse controlSetSentinelModeResponse = 15;
  if (this->_internal_has_controlsetsentinelmoderesponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetsentinelmoderesponse_);
  }

  // .ControlNS.ControlGetECUVersionResponse controlGetECUVersionResponse = 16;
  if (this->_internal_has_controlgetecuversionresponse()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgetecuversionresponse_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlResponse::GetClassData() const { return &_class_data_; }

void ControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlResponse *>(to)->MergeFrom(
      static_cast<const ControlResponse &>(from));
}


void ControlResponse::MergeFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlengineresponse()) {
    _internal_mutable_controlengineresponse()->::ControlNS::ControlEngineResponse::MergeFrom(from._internal_controlengineresponse());
  }
  if (from._internal_has_controlfindcarresponse()) {
    _internal_mutable_controlfindcarresponse()->::ControlNS::ControlFindCarResponse::MergeFrom(from._internal_controlfindcarresponse());
  }
  if (from._internal_has_controlgearreportresponse()) {
    _internal_mutable_controlgearreportresponse()->::ControlNS::ControlGearReportResponse::MergeFrom(from._internal_controlgearreportresponse());
  }
  if (from._internal_has_controlgetpositionresponse()) {
    _internal_mutable_controlgetpositionresponse()->::ControlNS::ControlGetPositionResponse::MergeFrom(from._internal_controlgetpositionresponse());
  }
  if (from._internal_has_controlgettpmsresponse()) {
    _internal_mutable_controlgettpmsresponse()->::ControlNS::ControlGetTPMSResponse::MergeFrom(from._internal_controlgettpmsresponse());
  }
  if (from._internal_has_controltakeparkingphotoresponse()) {
    _internal_mutable_controltakeparkingphotoresponse()->::ControlNS::ControlTakeParkingPhotoResponse::MergeFrom(from._internal_controltakeparkingphotoresponse());
  }
  if (from._internal_has_controlsetroundfenceresponse()) {
    _internal_mutable_controlsetroundfenceresponse()->::ControlNS::ControlSetFenceResponse::MergeFrom(from._internal_controlsetroundfenceresponse());
  }
  if (from._internal_has_controlheatseatresponse()) {
    _internal_mutable_controlheatseatresponse()->::ControlNS::ControlHeatSeatResponse::MergeFrom(from._internal_controlheatseatresponse());
  }
  if (from._internal_has_controlheathandlebarresponse()) {
    _internal_mutable_controlheathandlebarresponse()->::ControlNS::ControlHeatHandleBarResponse::MergeFrom(from._internal_controlheathandlebarresponse());
  }
  if (from._internal_has_controlheatreserveresponse()) {
    _internal_mutable_controlheatreserveresponse()->::ControlNS::ControlHeatReserveResponse::MergeFrom(from._internal_controlheatreserveresponse());
  }
  if (from._internal_has_controlgetsignalintensityresponse()) {
    _internal_mutable_controlgetsignalintensityresponse()->::ControlNS::ControlGetSignalIntensityResponse::MergeFrom(from._internal_controlgetsignalintensityresponse());
  }
  if (from._internal_has_controlgetapnnameresponse()) {
    _internal_mutable_controlgetapnnameresponse()->::ControlNS::ControlGetAPNNameResponse::MergeFrom(from._internal_controlgetapnnameresponse());
  }
  if (from._internal_has_controlsetfrequencyresponse()) {
    _internal_mutable_controlsetfrequencyresponse()->::ControlNS::ControlSetFrequencyResponse::MergeFrom(from._internal_controlsetfrequencyresponse());
  }
  if (from._internal_has_controlsetapnnameresponse()) {
    _internal_mutable_controlsetapnnameresponse()->::ControlNS::ControlSetAPNNameResponse::MergeFrom(from._internal_controlsetapnnameresponse());
  }
  if (from._internal_has_controlsetsentinelmoderesponse()) {
    _internal_mutable_controlsetsentinelmoderesponse()->::ControlNS::ControlSetSentinelModeResponse::MergeFrom(from._internal_controlsetsentinelmoderesponse());
  }
  if (from._internal_has_controlgetecuversionresponse()) {
    _internal_mutable_controlgetecuversionresponse()->::ControlNS::ControlGetECUVersionResponse::MergeFrom(from._internal_controlgetecuversionresponse());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlResponse::CopyFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlResponse::IsInitialized() const {
  return true;
}

void ControlResponse::InternalSwap(ControlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlResponse, controlgetecuversionresponse_)
      + sizeof(ControlResponse::controlgetecuversionresponse_)
      - PROTOBUF_FIELD_OFFSET(ControlResponse, controlengineresponse_)>(
          reinterpret_cast<char*>(&controlengineresponse_),
          reinterpret_cast<char*>(&other->controlengineresponse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[1]);
}

// ===================================================================

class Parameters::_Internal {
 public:
  static const ::ControlNS::ControlEnginePara& controlenginepara(const Parameters* msg);
  static const ::ControlNS::ControlFindCarPara& controlfindcarpara(const Parameters* msg);
  static const ::ControlNS::ControlGetPositionPara& controlgetpositionpara(const Parameters* msg);
  static const ::ControlNS::ControlGetTPMSPara& controlgettmpspara(const Parameters* msg);
  static const ::ControlNS::ControlTakeParkingPhotoPara& controltakeparkingphotopara(const Parameters* msg);
  static const ::ControlNS::ControlSetRoundFencePara& controlsetroundfencepara(const Parameters* msg);
  static const ::ControlNS::ControlSetPolygonFencePara& controlsetpolygonfencepara(const Parameters* msg);
  static const ::ControlNS::ControlHeatSeatPara& controlheatseatpara(const Parameters* msg);
  static const ::ControlNS::ControlHeatHandleBarPara& controlheathandlebarpara(const Parameters* msg);
  static const ::ControlNS::ControlHeatReservePara& controlheatreservepara(const Parameters* msg);
  static const ::ControlNS::ControlGetSignalIntensityPara& controlgetsignalintensitypara(const Parameters* msg);
  static const ::ControlNS::ControlAPNNamePara& controlapnnamepara(const Parameters* msg);
  static const ::ControlNS::ControlSetFrequencyPara& controlsetfrequencypara(const Parameters* msg);
  static const ::ControlNS::ControlClearFencePara& controlclearfencepara(const Parameters* msg);
  static const ::ControlNS::ControlSetSentinelModePara& controlsetsentinelmodepara(const Parameters* msg);
  static const ::ControlNS::ControlGetECUVersionPara& controlgetecuversionpara(const Parameters* msg);
};

const ::ControlNS::ControlEnginePara&
Parameters::_Internal::controlenginepara(const Parameters* msg) {
  return *msg->controlenginepara_;
}
const ::ControlNS::ControlFindCarPara&
Parameters::_Internal::controlfindcarpara(const Parameters* msg) {
  return *msg->controlfindcarpara_;
}
const ::ControlNS::ControlGetPositionPara&
Parameters::_Internal::controlgetpositionpara(const Parameters* msg) {
  return *msg->controlgetpositionpara_;
}
const ::ControlNS::ControlGetTPMSPara&
Parameters::_Internal::controlgettmpspara(const Parameters* msg) {
  return *msg->controlgettmpspara_;
}
const ::ControlNS::ControlTakeParkingPhotoPara&
Parameters::_Internal::controltakeparkingphotopara(const Parameters* msg) {
  return *msg->controltakeparkingphotopara_;
}
const ::ControlNS::ControlSetRoundFencePara&
Parameters::_Internal::controlsetroundfencepara(const Parameters* msg) {
  return *msg->controlsetroundfencepara_;
}
const ::ControlNS::ControlSetPolygonFencePara&
Parameters::_Internal::controlsetpolygonfencepara(const Parameters* msg) {
  return *msg->controlsetpolygonfencepara_;
}
const ::ControlNS::ControlHeatSeatPara&
Parameters::_Internal::controlheatseatpara(const Parameters* msg) {
  return *msg->controlheatseatpara_;
}
const ::ControlNS::ControlHeatHandleBarPara&
Parameters::_Internal::controlheathandlebarpara(const Parameters* msg) {
  return *msg->controlheathandlebarpara_;
}
const ::ControlNS::ControlHeatReservePara&
Parameters::_Internal::controlheatreservepara(const Parameters* msg) {
  return *msg->controlheatreservepara_;
}
const ::ControlNS::ControlGetSignalIntensityPara&
Parameters::_Internal::controlgetsignalintensitypara(const Parameters* msg) {
  return *msg->controlgetsignalintensitypara_;
}
const ::ControlNS::ControlAPNNamePara&
Parameters::_Internal::controlapnnamepara(const Parameters* msg) {
  return *msg->controlapnnamepara_;
}
const ::ControlNS::ControlSetFrequencyPara&
Parameters::_Internal::controlsetfrequencypara(const Parameters* msg) {
  return *msg->controlsetfrequencypara_;
}
const ::ControlNS::ControlClearFencePara&
Parameters::_Internal::controlclearfencepara(const Parameters* msg) {
  return *msg->controlclearfencepara_;
}
const ::ControlNS::ControlSetSentinelModePara&
Parameters::_Internal::controlsetsentinelmodepara(const Parameters* msg) {
  return *msg->controlsetsentinelmodepara_;
}
const ::ControlNS::ControlGetECUVersionPara&
Parameters::_Internal::controlgetecuversionpara(const Parameters* msg) {
  return *msg->controlgetecuversionpara_;
}
Parameters::Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_controlenginepara()) {
    controlenginepara_ = new ::ControlNS::ControlEnginePara(*from.controlenginepara_);
  } else {
    controlenginepara_ = nullptr;
  }
  if (from._internal_has_controlfindcarpara()) {
    controlfindcarpara_ = new ::ControlNS::ControlFindCarPara(*from.controlfindcarpara_);
  } else {
    controlfindcarpara_ = nullptr;
  }
  if (from._internal_has_controlgetpositionpara()) {
    controlgetpositionpara_ = new ::ControlNS::ControlGetPositionPara(*from.controlgetpositionpara_);
  } else {
    controlgetpositionpara_ = nullptr;
  }
  if (from._internal_has_controlgettmpspara()) {
    controlgettmpspara_ = new ::ControlNS::ControlGetTPMSPara(*from.controlgettmpspara_);
  } else {
    controlgettmpspara_ = nullptr;
  }
  if (from._internal_has_controltakeparkingphotopara()) {
    controltakeparkingphotopara_ = new ::ControlNS::ControlTakeParkingPhotoPara(*from.controltakeparkingphotopara_);
  } else {
    controltakeparkingphotopara_ = nullptr;
  }
  if (from._internal_has_controlsetroundfencepara()) {
    controlsetroundfencepara_ = new ::ControlNS::ControlSetRoundFencePara(*from.controlsetroundfencepara_);
  } else {
    controlsetroundfencepara_ = nullptr;
  }
  if (from._internal_has_controlsetpolygonfencepara()) {
    controlsetpolygonfencepara_ = new ::ControlNS::ControlSetPolygonFencePara(*from.controlsetpolygonfencepara_);
  } else {
    controlsetpolygonfencepara_ = nullptr;
  }
  if (from._internal_has_controlheatseatpara()) {
    controlheatseatpara_ = new ::ControlNS::ControlHeatSeatPara(*from.controlheatseatpara_);
  } else {
    controlheatseatpara_ = nullptr;
  }
  if (from._internal_has_controlheathandlebarpara()) {
    controlheathandlebarpara_ = new ::ControlNS::ControlHeatHandleBarPara(*from.controlheathandlebarpara_);
  } else {
    controlheathandlebarpara_ = nullptr;
  }
  if (from._internal_has_controlheatreservepara()) {
    controlheatreservepara_ = new ::ControlNS::ControlHeatReservePara(*from.controlheatreservepara_);
  } else {
    controlheatreservepara_ = nullptr;
  }
  if (from._internal_has_controlgetsignalintensitypara()) {
    controlgetsignalintensitypara_ = new ::ControlNS::ControlGetSignalIntensityPara(*from.controlgetsignalintensitypara_);
  } else {
    controlgetsignalintensitypara_ = nullptr;
  }
  if (from._internal_has_controlapnnamepara()) {
    controlapnnamepara_ = new ::ControlNS::ControlAPNNamePara(*from.controlapnnamepara_);
  } else {
    controlapnnamepara_ = nullptr;
  }
  if (from._internal_has_controlsetfrequencypara()) {
    controlsetfrequencypara_ = new ::ControlNS::ControlSetFrequencyPara(*from.controlsetfrequencypara_);
  } else {
    controlsetfrequencypara_ = nullptr;
  }
  if (from._internal_has_controlclearfencepara()) {
    controlclearfencepara_ = new ::ControlNS::ControlClearFencePara(*from.controlclearfencepara_);
  } else {
    controlclearfencepara_ = nullptr;
  }
  if (from._internal_has_controlsetsentinelmodepara()) {
    controlsetsentinelmodepara_ = new ::ControlNS::ControlSetSentinelModePara(*from.controlsetsentinelmodepara_);
  } else {
    controlsetsentinelmodepara_ = nullptr;
  }
  if (from._internal_has_controlgetecuversionpara()) {
    controlgetecuversionpara_ = new ::ControlNS::ControlGetECUVersionPara(*from.controlgetecuversionpara_);
  } else {
    controlgetecuversionpara_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ControlNS.Parameters)
}

inline void Parameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controlenginepara_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controlgetecuversionpara_) -
    reinterpret_cast<char*>(&controlenginepara_)) + sizeof(controlgetecuversionpara_));
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:ControlNS.Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete controlenginepara_;
  if (this != internal_default_instance()) delete controlfindcarpara_;
  if (this != internal_default_instance()) delete controlgetpositionpara_;
  if (this != internal_default_instance()) delete controlgettmpspara_;
  if (this != internal_default_instance()) delete controltakeparkingphotopara_;
  if (this != internal_default_instance()) delete controlsetroundfencepara_;
  if (this != internal_default_instance()) delete controlsetpolygonfencepara_;
  if (this != internal_default_instance()) delete controlheatseatpara_;
  if (this != internal_default_instance()) delete controlheathandlebarpara_;
  if (this != internal_default_instance()) delete controlheatreservepara_;
  if (this != internal_default_instance()) delete controlgetsignalintensitypara_;
  if (this != internal_default_instance()) delete controlapnnamepara_;
  if (this != internal_default_instance()) delete controlsetfrequencypara_;
  if (this != internal_default_instance()) delete controlclearfencepara_;
  if (this != internal_default_instance()) delete controlsetsentinelmodepara_;
  if (this != internal_default_instance()) delete controlgetecuversionpara_;
}

void Parameters::ArenaDtor(void* object) {
  Parameters* _this = reinterpret_cast< Parameters* >(object);
  (void)_this;
}
void Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.Parameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && controlenginepara_ != nullptr) {
    delete controlenginepara_;
  }
  controlenginepara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlfindcarpara_ != nullptr) {
    delete controlfindcarpara_;
  }
  controlfindcarpara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgetpositionpara_ != nullptr) {
    delete controlgetpositionpara_;
  }
  controlgetpositionpara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgettmpspara_ != nullptr) {
    delete controlgettmpspara_;
  }
  controlgettmpspara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controltakeparkingphotopara_ != nullptr) {
    delete controltakeparkingphotopara_;
  }
  controltakeparkingphotopara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetroundfencepara_ != nullptr) {
    delete controlsetroundfencepara_;
  }
  controlsetroundfencepara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetpolygonfencepara_ != nullptr) {
    delete controlsetpolygonfencepara_;
  }
  controlsetpolygonfencepara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlheatseatpara_ != nullptr) {
    delete controlheatseatpara_;
  }
  controlheatseatpara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlheathandlebarpara_ != nullptr) {
    delete controlheathandlebarpara_;
  }
  controlheathandlebarpara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlheatreservepara_ != nullptr) {
    delete controlheatreservepara_;
  }
  controlheatreservepara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgetsignalintensitypara_ != nullptr) {
    delete controlgetsignalintensitypara_;
  }
  controlgetsignalintensitypara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlapnnamepara_ != nullptr) {
    delete controlapnnamepara_;
  }
  controlapnnamepara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetfrequencypara_ != nullptr) {
    delete controlsetfrequencypara_;
  }
  controlsetfrequencypara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlclearfencepara_ != nullptr) {
    delete controlclearfencepara_;
  }
  controlclearfencepara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlsetsentinelmodepara_ != nullptr) {
    delete controlsetsentinelmodepara_;
  }
  controlsetsentinelmodepara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && controlgetecuversionpara_ != nullptr) {
    delete controlgetecuversionpara_;
  }
  controlgetecuversionpara_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.ControlEnginePara controlEnginePara = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlenginepara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlFindCarPara controlFindCarPara = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlfindcarpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetPositionPara controlGetPositionPara = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgetpositionpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetTPMSPara controlGetTMPSPara = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgettmpspara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlTakeParkingPhotoPara controlTakeParkingPhotoPara = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_controltakeparkingphotopara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetRoundFencePara controlSetRoundFencePara = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetroundfencepara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetPolygonFencePara controlSetPolygonFencePara = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetpolygonfencepara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatSeatPara controlHeatSeatPara = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlheatseatpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatHandleBarPara controlHeatHandleBarPara = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlheathandlebarpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatReservePara controlHeatReservePara = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlheatreservepara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetSignalIntensityPara controlGetSignalIntensityPara = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgetsignalintensitypara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlAPNNamePara controlAPNNamePara = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlapnnamepara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetFrequencyPara controlSetFrequencyPara = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetfrequencypara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlClearFencePara controlClearFencePara = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlclearfencepara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlSetSentinelModePara controlSetSentinelModePara = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlsetsentinelmodepara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlGetECUVersionPara controlGetECUVersionPara = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_controlgetecuversionpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.Parameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.ControlEnginePara controlEnginePara = 1;
  if (this->_internal_has_controlenginepara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::controlenginepara(this), target, stream);
  }

  // .ControlNS.ControlFindCarPara controlFindCarPara = 2;
  if (this->_internal_has_controlfindcarpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::controlfindcarpara(this), target, stream);
  }

  // .ControlNS.ControlGetPositionPara controlGetPositionPara = 3;
  if (this->_internal_has_controlgetpositionpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::controlgetpositionpara(this), target, stream);
  }

  // .ControlNS.ControlGetTPMSPara controlGetTMPSPara = 4;
  if (this->_internal_has_controlgettmpspara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::controlgettmpspara(this), target, stream);
  }

  // .ControlNS.ControlTakeParkingPhotoPara controlTakeParkingPhotoPara = 5;
  if (this->_internal_has_controltakeparkingphotopara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::controltakeparkingphotopara(this), target, stream);
  }

  // .ControlNS.ControlSetRoundFencePara controlSetRoundFencePara = 6;
  if (this->_internal_has_controlsetroundfencepara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::controlsetroundfencepara(this), target, stream);
  }

  // .ControlNS.ControlSetPolygonFencePara controlSetPolygonFencePara = 7;
  if (this->_internal_has_controlsetpolygonfencepara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::controlsetpolygonfencepara(this), target, stream);
  }

  // .ControlNS.ControlHeatSeatPara controlHeatSeatPara = 8;
  if (this->_internal_has_controlheatseatpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::controlheatseatpara(this), target, stream);
  }

  // .ControlNS.ControlHeatHandleBarPara controlHeatHandleBarPara = 9;
  if (this->_internal_has_controlheathandlebarpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::controlheathandlebarpara(this), target, stream);
  }

  // .ControlNS.ControlHeatReservePara controlHeatReservePara = 10;
  if (this->_internal_has_controlheatreservepara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::controlheatreservepara(this), target, stream);
  }

  // .ControlNS.ControlGetSignalIntensityPara controlGetSignalIntensityPara = 11;
  if (this->_internal_has_controlgetsignalintensitypara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::controlgetsignalintensitypara(this), target, stream);
  }

  // .ControlNS.ControlAPNNamePara controlAPNNamePara = 12;
  if (this->_internal_has_controlapnnamepara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::controlapnnamepara(this), target, stream);
  }

  // .ControlNS.ControlSetFrequencyPara controlSetFrequencyPara = 13;
  if (this->_internal_has_controlsetfrequencypara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::controlsetfrequencypara(this), target, stream);
  }

  // .ControlNS.ControlClearFencePara controlClearFencePara = 14;
  if (this->_internal_has_controlclearfencepara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::controlclearfencepara(this), target, stream);
  }

  // .ControlNS.ControlSetSentinelModePara controlSetSentinelModePara = 15;
  if (this->_internal_has_controlsetsentinelmodepara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::controlsetsentinelmodepara(this), target, stream);
  }

  // .ControlNS.ControlGetECUVersionPara controlGetECUVersionPara = 16;
  if (this->_internal_has_controlgetecuversionpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::controlgetecuversionpara(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.Parameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.ControlEnginePara controlEnginePara = 1;
  if (this->_internal_has_controlenginepara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlenginepara_);
  }

  // .ControlNS.ControlFindCarPara controlFindCarPara = 2;
  if (this->_internal_has_controlfindcarpara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlfindcarpara_);
  }

  // .ControlNS.ControlGetPositionPara controlGetPositionPara = 3;
  if (this->_internal_has_controlgetpositionpara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgetpositionpara_);
  }

  // .ControlNS.ControlGetTPMSPara controlGetTMPSPara = 4;
  if (this->_internal_has_controlgettmpspara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgettmpspara_);
  }

  // .ControlNS.ControlTakeParkingPhotoPara controlTakeParkingPhotoPara = 5;
  if (this->_internal_has_controltakeparkingphotopara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controltakeparkingphotopara_);
  }

  // .ControlNS.ControlSetRoundFencePara controlSetRoundFencePara = 6;
  if (this->_internal_has_controlsetroundfencepara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetroundfencepara_);
  }

  // .ControlNS.ControlSetPolygonFencePara controlSetPolygonFencePara = 7;
  if (this->_internal_has_controlsetpolygonfencepara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetpolygonfencepara_);
  }

  // .ControlNS.ControlHeatSeatPara controlHeatSeatPara = 8;
  if (this->_internal_has_controlheatseatpara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlheatseatpara_);
  }

  // .ControlNS.ControlHeatHandleBarPara controlHeatHandleBarPara = 9;
  if (this->_internal_has_controlheathandlebarpara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlheathandlebarpara_);
  }

  // .ControlNS.ControlHeatReservePara controlHeatReservePara = 10;
  if (this->_internal_has_controlheatreservepara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlheatreservepara_);
  }

  // .ControlNS.ControlGetSignalIntensityPara controlGetSignalIntensityPara = 11;
  if (this->_internal_has_controlgetsignalintensitypara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgetsignalintensitypara_);
  }

  // .ControlNS.ControlAPNNamePara controlAPNNamePara = 12;
  if (this->_internal_has_controlapnnamepara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlapnnamepara_);
  }

  // .ControlNS.ControlSetFrequencyPara controlSetFrequencyPara = 13;
  if (this->_internal_has_controlsetfrequencypara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetfrequencypara_);
  }

  // .ControlNS.ControlClearFencePara controlClearFencePara = 14;
  if (this->_internal_has_controlclearfencepara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlclearfencepara_);
  }

  // .ControlNS.ControlSetSentinelModePara controlSetSentinelModePara = 15;
  if (this->_internal_has_controlsetsentinelmodepara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlsetsentinelmodepara_);
  }

  // .ControlNS.ControlGetECUVersionPara controlGetECUVersionPara = 16;
  if (this->_internal_has_controlgetecuversionpara()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *controlgetecuversionpara_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameters::GetClassData() const { return &_class_data_; }

void Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parameters *>(to)->MergeFrom(
      static_cast<const Parameters &>(from));
}


void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controlenginepara()) {
    _internal_mutable_controlenginepara()->::ControlNS::ControlEnginePara::MergeFrom(from._internal_controlenginepara());
  }
  if (from._internal_has_controlfindcarpara()) {
    _internal_mutable_controlfindcarpara()->::ControlNS::ControlFindCarPara::MergeFrom(from._internal_controlfindcarpara());
  }
  if (from._internal_has_controlgetpositionpara()) {
    _internal_mutable_controlgetpositionpara()->::ControlNS::ControlGetPositionPara::MergeFrom(from._internal_controlgetpositionpara());
  }
  if (from._internal_has_controlgettmpspara()) {
    _internal_mutable_controlgettmpspara()->::ControlNS::ControlGetTPMSPara::MergeFrom(from._internal_controlgettmpspara());
  }
  if (from._internal_has_controltakeparkingphotopara()) {
    _internal_mutable_controltakeparkingphotopara()->::ControlNS::ControlTakeParkingPhotoPara::MergeFrom(from._internal_controltakeparkingphotopara());
  }
  if (from._internal_has_controlsetroundfencepara()) {
    _internal_mutable_controlsetroundfencepara()->::ControlNS::ControlSetRoundFencePara::MergeFrom(from._internal_controlsetroundfencepara());
  }
  if (from._internal_has_controlsetpolygonfencepara()) {
    _internal_mutable_controlsetpolygonfencepara()->::ControlNS::ControlSetPolygonFencePara::MergeFrom(from._internal_controlsetpolygonfencepara());
  }
  if (from._internal_has_controlheatseatpara()) {
    _internal_mutable_controlheatseatpara()->::ControlNS::ControlHeatSeatPara::MergeFrom(from._internal_controlheatseatpara());
  }
  if (from._internal_has_controlheathandlebarpara()) {
    _internal_mutable_controlheathandlebarpara()->::ControlNS::ControlHeatHandleBarPara::MergeFrom(from._internal_controlheathandlebarpara());
  }
  if (from._internal_has_controlheatreservepara()) {
    _internal_mutable_controlheatreservepara()->::ControlNS::ControlHeatReservePara::MergeFrom(from._internal_controlheatreservepara());
  }
  if (from._internal_has_controlgetsignalintensitypara()) {
    _internal_mutable_controlgetsignalintensitypara()->::ControlNS::ControlGetSignalIntensityPara::MergeFrom(from._internal_controlgetsignalintensitypara());
  }
  if (from._internal_has_controlapnnamepara()) {
    _internal_mutable_controlapnnamepara()->::ControlNS::ControlAPNNamePara::MergeFrom(from._internal_controlapnnamepara());
  }
  if (from._internal_has_controlsetfrequencypara()) {
    _internal_mutable_controlsetfrequencypara()->::ControlNS::ControlSetFrequencyPara::MergeFrom(from._internal_controlsetfrequencypara());
  }
  if (from._internal_has_controlclearfencepara()) {
    _internal_mutable_controlclearfencepara()->::ControlNS::ControlClearFencePara::MergeFrom(from._internal_controlclearfencepara());
  }
  if (from._internal_has_controlsetsentinelmodepara()) {
    _internal_mutable_controlsetsentinelmodepara()->::ControlNS::ControlSetSentinelModePara::MergeFrom(from._internal_controlsetsentinelmodepara());
  }
  if (from._internal_has_controlgetecuversionpara()) {
    _internal_mutable_controlgetecuversionpara()->::ControlNS::ControlGetECUVersionPara::MergeFrom(from._internal_controlgetecuversionpara());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameters, controlgetecuversionpara_)
      + sizeof(Parameters::controlgetecuversionpara_)
      - PROTOBUF_FIELD_OFFSET(Parameters, controlenginepara_)>(
          reinterpret_cast<char*>(&controlenginepara_),
          reinterpret_cast<char*>(&other->controlenginepara_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[2]);
}

// ===================================================================

class ControlEngineResponse::_Internal {
 public:
};

ControlEngineResponse::ControlEngineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlEngineResponse)
}
ControlEngineResponse::ControlEngineResponse(const ControlEngineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlEngineResponse)
}

inline void ControlEngineResponse::SharedCtor() {
result_ = 0u;
}

ControlEngineResponse::~ControlEngineResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlEngineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlEngineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlEngineResponse::ArenaDtor(void* object) {
  ControlEngineResponse* _this = reinterpret_cast< ControlEngineResponse* >(object);
  (void)_this;
}
void ControlEngineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlEngineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlEngineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlEngineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlEngineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlEngineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlEngineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlEngineResponse)
  return target;
}

size_t ControlEngineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlEngineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlEngineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlEngineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlEngineResponse::GetClassData() const { return &_class_data_; }

void ControlEngineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlEngineResponse *>(to)->MergeFrom(
      static_cast<const ControlEngineResponse &>(from));
}


void ControlEngineResponse::MergeFrom(const ControlEngineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlEngineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlEngineResponse::CopyFrom(const ControlEngineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlEngineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlEngineResponse::IsInitialized() const {
  return true;
}

void ControlEngineResponse::InternalSwap(ControlEngineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlEngineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[3]);
}

// ===================================================================

class ControlEnginePara::_Internal {
 public:
};

ControlEnginePara::ControlEnginePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlEnginePara)
}
ControlEnginePara::ControlEnginePara(const ControlEnginePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enginstart_ = from.enginstart_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlEnginePara)
}

inline void ControlEnginePara::SharedCtor() {
enginstart_ = 0;
}

ControlEnginePara::~ControlEnginePara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlEnginePara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlEnginePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlEnginePara::ArenaDtor(void* object) {
  ControlEnginePara* _this = reinterpret_cast< ControlEnginePara* >(object);
  (void)_this;
}
void ControlEnginePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlEnginePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlEnginePara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlEnginePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enginstart_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlEnginePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.EngineOpt enginStart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enginstart(static_cast<::ControlNS::EngineOpt>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlEnginePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlEnginePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.EngineOpt enginStart = 1;
  if (this->_internal_enginstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_enginstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlEnginePara)
  return target;
}

size_t ControlEnginePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlEnginePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.EngineOpt enginStart = 1;
  if (this->_internal_enginstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enginstart());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlEnginePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlEnginePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlEnginePara::GetClassData() const { return &_class_data_; }

void ControlEnginePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlEnginePara *>(to)->MergeFrom(
      static_cast<const ControlEnginePara &>(from));
}


void ControlEnginePara::MergeFrom(const ControlEnginePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlEnginePara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enginstart() != 0) {
    _internal_set_enginstart(from._internal_enginstart());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlEnginePara::CopyFrom(const ControlEnginePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlEnginePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlEnginePara::IsInitialized() const {
  return true;
}

void ControlEnginePara::InternalSwap(ControlEnginePara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enginstart_, other->enginstart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlEnginePara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[4]);
}

// ===================================================================

class ControlGetPositionResponse::_Internal {
 public:
};

ControlGetPositionResponse::ControlGetPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetPositionResponse)
}
ControlGetPositionResponse::ControlGetPositionResponse(const ControlGetPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetPositionResponse)
}

inline void ControlGetPositionResponse::SharedCtor() {
result_ = 0u;
}

ControlGetPositionResponse::~ControlGetPositionResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetPositionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetPositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGetPositionResponse::ArenaDtor(void* object) {
  ControlGetPositionResponse* _this = reinterpret_cast< ControlGetPositionResponse* >(object);
  (void)_this;
}
void ControlGetPositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetPositionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetPositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetPositionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetPositionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetPositionResponse)
  return target;
}

size_t ControlGetPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetPositionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetPositionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetPositionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetPositionResponse::GetClassData() const { return &_class_data_; }

void ControlGetPositionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetPositionResponse *>(to)->MergeFrom(
      static_cast<const ControlGetPositionResponse &>(from));
}


void ControlGetPositionResponse::MergeFrom(const ControlGetPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetPositionResponse::CopyFrom(const ControlGetPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetPositionResponse::IsInitialized() const {
  return true;
}

void ControlGetPositionResponse::InternalSwap(ControlGetPositionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetPositionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[5]);
}

// ===================================================================

class ControlFindCarResponse::_Internal {
 public:
};

ControlFindCarResponse::ControlFindCarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlFindCarResponse)
}
ControlFindCarResponse::ControlFindCarResponse(const ControlFindCarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlFindCarResponse)
}

inline void ControlFindCarResponse::SharedCtor() {
result_ = 0u;
}

ControlFindCarResponse::~ControlFindCarResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlFindCarResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlFindCarResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlFindCarResponse::ArenaDtor(void* object) {
  ControlFindCarResponse* _this = reinterpret_cast< ControlFindCarResponse* >(object);
  (void)_this;
}
void ControlFindCarResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlFindCarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlFindCarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlFindCarResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFindCarResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlFindCarResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlFindCarResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlFindCarResponse)
  return target;
}

size_t ControlFindCarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlFindCarResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlFindCarResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlFindCarResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlFindCarResponse::GetClassData() const { return &_class_data_; }

void ControlFindCarResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlFindCarResponse *>(to)->MergeFrom(
      static_cast<const ControlFindCarResponse &>(from));
}


void ControlFindCarResponse::MergeFrom(const ControlFindCarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlFindCarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlFindCarResponse::CopyFrom(const ControlFindCarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlFindCarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFindCarResponse::IsInitialized() const {
  return true;
}

void ControlFindCarResponse::InternalSwap(ControlFindCarResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFindCarResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[6]);
}

// ===================================================================

class ControlFindCarPara::_Internal {
 public:
};

ControlFindCarPara::ControlFindCarPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlFindCarPara)
}
ControlFindCarPara::ControlFindCarPara(const ControlFindCarPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  findcaropt_ = from.findcaropt_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlFindCarPara)
}

inline void ControlFindCarPara::SharedCtor() {
findcaropt_ = 0;
}

ControlFindCarPara::~ControlFindCarPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlFindCarPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlFindCarPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlFindCarPara::ArenaDtor(void* object) {
  ControlFindCarPara* _this = reinterpret_cast< ControlFindCarPara* >(object);
  (void)_this;
}
void ControlFindCarPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlFindCarPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlFindCarPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlFindCarPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  findcaropt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFindCarPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.FindCarOpt findCarOpt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_findcaropt(static_cast<::ControlNS::FindCarOpt>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlFindCarPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlFindCarPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.FindCarOpt findCarOpt = 1;
  if (this->_internal_findcaropt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_findcaropt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlFindCarPara)
  return target;
}

size_t ControlFindCarPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlFindCarPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.FindCarOpt findCarOpt = 1;
  if (this->_internal_findcaropt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_findcaropt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlFindCarPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlFindCarPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlFindCarPara::GetClassData() const { return &_class_data_; }

void ControlFindCarPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlFindCarPara *>(to)->MergeFrom(
      static_cast<const ControlFindCarPara &>(from));
}


void ControlFindCarPara::MergeFrom(const ControlFindCarPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlFindCarPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_findcaropt() != 0) {
    _internal_set_findcaropt(from._internal_findcaropt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlFindCarPara::CopyFrom(const ControlFindCarPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlFindCarPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFindCarPara::IsInitialized() const {
  return true;
}

void ControlFindCarPara::InternalSwap(ControlFindCarPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(findcaropt_, other->findcaropt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFindCarPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[7]);
}

// ===================================================================

class ControlGearReportResponse::_Internal {
 public:
};

ControlGearReportResponse::ControlGearReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGearReportResponse)
}
ControlGearReportResponse::ControlGearReportResponse(const ControlGearReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGearReportResponse)
}

inline void ControlGearReportResponse::SharedCtor() {
result_ = 0u;
}

ControlGearReportResponse::~ControlGearReportResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGearReportResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGearReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGearReportResponse::ArenaDtor(void* object) {
  ControlGearReportResponse* _this = reinterpret_cast< ControlGearReportResponse* >(object);
  (void)_this;
}
void ControlGearReportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGearReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGearReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGearReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGearReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGearReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGearReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGearReportResponse)
  return target;
}

size_t ControlGearReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGearReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGearReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGearReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGearReportResponse::GetClassData() const { return &_class_data_; }

void ControlGearReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGearReportResponse *>(to)->MergeFrom(
      static_cast<const ControlGearReportResponse &>(from));
}


void ControlGearReportResponse::MergeFrom(const ControlGearReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGearReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGearReportResponse::CopyFrom(const ControlGearReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGearReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGearReportResponse::IsInitialized() const {
  return true;
}

void ControlGearReportResponse::InternalSwap(ControlGearReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGearReportResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[8]);
}

// ===================================================================

class ControlGetPositionPara::_Internal {
 public:
};

ControlGetPositionPara::ControlGetPositionPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetPositionPara)
}
ControlGetPositionPara::ControlGetPositionPara(const ControlGetPositionPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetPositionPara)
}

inline void ControlGetPositionPara::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControlGetPositionPara::~ControlGetPositionPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetPositionPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetPositionPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlGetPositionPara::ArenaDtor(void* object) {
  ControlGetPositionPara* _this = reinterpret_cast< ControlGetPositionPara* >(object);
  (void)_this;
}
void ControlGetPositionPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetPositionPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetPositionPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetPositionPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetPositionPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetPositionPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetPositionPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes location = 1;
  if (!this->_internal_location().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetPositionPara)
  return target;
}

size_t ControlGetPositionPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetPositionPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetPositionPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetPositionPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetPositionPara::GetClassData() const { return &_class_data_; }

void ControlGetPositionPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetPositionPara *>(to)->MergeFrom(
      static_cast<const ControlGetPositionPara &>(from));
}


void ControlGetPositionPara::MergeFrom(const ControlGetPositionPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetPositionPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetPositionPara::CopyFrom(const ControlGetPositionPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetPositionPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetPositionPara::IsInitialized() const {
  return true;
}

void ControlGetPositionPara::InternalSwap(ControlGetPositionPara* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetPositionPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[9]);
}

// ===================================================================

class ControlGetTPMSResponse::_Internal {
 public:
};

ControlGetTPMSResponse::ControlGetTPMSResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetTPMSResponse)
}
ControlGetTPMSResponse::ControlGetTPMSResponse(const ControlGetTPMSResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetTPMSResponse)
}

inline void ControlGetTPMSResponse::SharedCtor() {
result_ = 0u;
}

ControlGetTPMSResponse::~ControlGetTPMSResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetTPMSResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetTPMSResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGetTPMSResponse::ArenaDtor(void* object) {
  ControlGetTPMSResponse* _this = reinterpret_cast< ControlGetTPMSResponse* >(object);
  (void)_this;
}
void ControlGetTPMSResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetTPMSResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetTPMSResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetTPMSResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetTPMSResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetTPMSResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetTPMSResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetTPMSResponse)
  return target;
}

size_t ControlGetTPMSResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetTPMSResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetTPMSResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetTPMSResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetTPMSResponse::GetClassData() const { return &_class_data_; }

void ControlGetTPMSResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetTPMSResponse *>(to)->MergeFrom(
      static_cast<const ControlGetTPMSResponse &>(from));
}


void ControlGetTPMSResponse::MergeFrom(const ControlGetTPMSResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetTPMSResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetTPMSResponse::CopyFrom(const ControlGetTPMSResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetTPMSResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetTPMSResponse::IsInitialized() const {
  return true;
}

void ControlGetTPMSResponse::InternalSwap(ControlGetTPMSResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetTPMSResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[10]);
}

// ===================================================================

class ControlGetTPMSPara::_Internal {
 public:
  static const ::StatusNS::TpmsInfo& tpmsinfo(const ControlGetTPMSPara* msg);
};

const ::StatusNS::TpmsInfo&
ControlGetTPMSPara::_Internal::tpmsinfo(const ControlGetTPMSPara* msg) {
  return *msg->tpmsinfo_;
}
void ControlGetTPMSPara::clear_tpmsinfo() {
  if (GetArenaForAllocation() == nullptr && tpmsinfo_ != nullptr) {
    delete tpmsinfo_;
  }
  tpmsinfo_ = nullptr;
}
ControlGetTPMSPara::ControlGetTPMSPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetTPMSPara)
}
ControlGetTPMSPara::ControlGetTPMSPara(const ControlGetTPMSPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tpmsinfo()) {
    tpmsinfo_ = new ::StatusNS::TpmsInfo(*from.tpmsinfo_);
  } else {
    tpmsinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetTPMSPara)
}

inline void ControlGetTPMSPara::SharedCtor() {
tpmsinfo_ = nullptr;
}

ControlGetTPMSPara::~ControlGetTPMSPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetTPMSPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetTPMSPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tpmsinfo_;
}

void ControlGetTPMSPara::ArenaDtor(void* object) {
  ControlGetTPMSPara* _this = reinterpret_cast< ControlGetTPMSPara* >(object);
  (void)_this;
}
void ControlGetTPMSPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetTPMSPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetTPMSPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetTPMSPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tpmsinfo_ != nullptr) {
    delete tpmsinfo_;
  }
  tpmsinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetTPMSPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StatusNS.TpmsInfo tpmsInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tpmsinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetTPMSPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetTPMSPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StatusNS.TpmsInfo tpmsInfo = 1;
  if (this->_internal_has_tpmsinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tpmsinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetTPMSPara)
  return target;
}

size_t ControlGetTPMSPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetTPMSPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StatusNS.TpmsInfo tpmsInfo = 1;
  if (this->_internal_has_tpmsinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tpmsinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetTPMSPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetTPMSPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetTPMSPara::GetClassData() const { return &_class_data_; }

void ControlGetTPMSPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetTPMSPara *>(to)->MergeFrom(
      static_cast<const ControlGetTPMSPara &>(from));
}


void ControlGetTPMSPara::MergeFrom(const ControlGetTPMSPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetTPMSPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tpmsinfo()) {
    _internal_mutable_tpmsinfo()->::StatusNS::TpmsInfo::MergeFrom(from._internal_tpmsinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetTPMSPara::CopyFrom(const ControlGetTPMSPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetTPMSPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetTPMSPara::IsInitialized() const {
  return true;
}

void ControlGetTPMSPara::InternalSwap(ControlGetTPMSPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tpmsinfo_, other->tpmsinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetTPMSPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[11]);
}

// ===================================================================

class ControlTakeParkingPhotoResponse::_Internal {
 public:
};

ControlTakeParkingPhotoResponse::ControlTakeParkingPhotoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlTakeParkingPhotoResponse)
}
ControlTakeParkingPhotoResponse::ControlTakeParkingPhotoResponse(const ControlTakeParkingPhotoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlTakeParkingPhotoResponse)
}

inline void ControlTakeParkingPhotoResponse::SharedCtor() {
result_ = 0u;
}

ControlTakeParkingPhotoResponse::~ControlTakeParkingPhotoResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlTakeParkingPhotoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlTakeParkingPhotoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlTakeParkingPhotoResponse::ArenaDtor(void* object) {
  ControlTakeParkingPhotoResponse* _this = reinterpret_cast< ControlTakeParkingPhotoResponse* >(object);
  (void)_this;
}
void ControlTakeParkingPhotoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlTakeParkingPhotoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlTakeParkingPhotoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlTakeParkingPhotoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlTakeParkingPhotoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlTakeParkingPhotoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlTakeParkingPhotoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlTakeParkingPhotoResponse)
  return target;
}

size_t ControlTakeParkingPhotoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlTakeParkingPhotoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlTakeParkingPhotoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlTakeParkingPhotoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlTakeParkingPhotoResponse::GetClassData() const { return &_class_data_; }

void ControlTakeParkingPhotoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlTakeParkingPhotoResponse *>(to)->MergeFrom(
      static_cast<const ControlTakeParkingPhotoResponse &>(from));
}


void ControlTakeParkingPhotoResponse::MergeFrom(const ControlTakeParkingPhotoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlTakeParkingPhotoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlTakeParkingPhotoResponse::CopyFrom(const ControlTakeParkingPhotoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlTakeParkingPhotoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlTakeParkingPhotoResponse::IsInitialized() const {
  return true;
}

void ControlTakeParkingPhotoResponse::InternalSwap(ControlTakeParkingPhotoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlTakeParkingPhotoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[12]);
}

// ===================================================================

class ControlTakeParkingPhotoPara::_Internal {
 public:
};

ControlTakeParkingPhotoPara::ControlTakeParkingPhotoPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlTakeParkingPhotoPara)
}
ControlTakeParkingPhotoPara::ControlTakeParkingPhotoPara(const ControlTakeParkingPhotoPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cameraopt_ = from.cameraopt_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlTakeParkingPhotoPara)
}

inline void ControlTakeParkingPhotoPara::SharedCtor() {
cameraopt_ = 0;
}

ControlTakeParkingPhotoPara::~ControlTakeParkingPhotoPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlTakeParkingPhotoPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlTakeParkingPhotoPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlTakeParkingPhotoPara::ArenaDtor(void* object) {
  ControlTakeParkingPhotoPara* _this = reinterpret_cast< ControlTakeParkingPhotoPara* >(object);
  (void)_this;
}
void ControlTakeParkingPhotoPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlTakeParkingPhotoPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlTakeParkingPhotoPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlTakeParkingPhotoPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraopt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlTakeParkingPhotoPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.CameraOpt cameraOpt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cameraopt(static_cast<::ControlNS::CameraOpt>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlTakeParkingPhotoPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlTakeParkingPhotoPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.CameraOpt cameraOpt = 1;
  if (this->_internal_cameraopt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cameraopt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlTakeParkingPhotoPara)
  return target;
}

size_t ControlTakeParkingPhotoPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlTakeParkingPhotoPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.CameraOpt cameraOpt = 1;
  if (this->_internal_cameraopt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cameraopt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlTakeParkingPhotoPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlTakeParkingPhotoPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlTakeParkingPhotoPara::GetClassData() const { return &_class_data_; }

void ControlTakeParkingPhotoPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlTakeParkingPhotoPara *>(to)->MergeFrom(
      static_cast<const ControlTakeParkingPhotoPara &>(from));
}


void ControlTakeParkingPhotoPara::MergeFrom(const ControlTakeParkingPhotoPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlTakeParkingPhotoPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cameraopt() != 0) {
    _internal_set_cameraopt(from._internal_cameraopt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlTakeParkingPhotoPara::CopyFrom(const ControlTakeParkingPhotoPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlTakeParkingPhotoPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlTakeParkingPhotoPara::IsInitialized() const {
  return true;
}

void ControlTakeParkingPhotoPara::InternalSwap(ControlTakeParkingPhotoPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cameraopt_, other->cameraopt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlTakeParkingPhotoPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[13]);
}

// ===================================================================

class ControlSetFenceResponse::_Internal {
 public:
};

ControlSetFenceResponse::ControlSetFenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetFenceResponse)
}
ControlSetFenceResponse::ControlSetFenceResponse(const ControlSetFenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetFenceResponse)
}

inline void ControlSetFenceResponse::SharedCtor() {
result_ = 0u;
}

ControlSetFenceResponse::~ControlSetFenceResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetFenceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetFenceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlSetFenceResponse::ArenaDtor(void* object) {
  ControlSetFenceResponse* _this = reinterpret_cast< ControlSetFenceResponse* >(object);
  (void)_this;
}
void ControlSetFenceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetFenceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetFenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetFenceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetFenceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetFenceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetFenceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetFenceResponse)
  return target;
}

size_t ControlSetFenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetFenceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetFenceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetFenceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetFenceResponse::GetClassData() const { return &_class_data_; }

void ControlSetFenceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetFenceResponse *>(to)->MergeFrom(
      static_cast<const ControlSetFenceResponse &>(from));
}


void ControlSetFenceResponse::MergeFrom(const ControlSetFenceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetFenceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetFenceResponse::CopyFrom(const ControlSetFenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetFenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetFenceResponse::IsInitialized() const {
  return true;
}

void ControlSetFenceResponse::InternalSwap(ControlSetFenceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetFenceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[14]);
}

// ===================================================================

class ControlSetRoundFencePara::_Internal {
 public:
  static const ::ControlNS::Point& center(const ControlSetRoundFencePara* msg);
};

const ::ControlNS::Point&
ControlSetRoundFencePara::_Internal::center(const ControlSetRoundFencePara* msg) {
  return *msg->center_;
}
ControlSetRoundFencePara::ControlSetRoundFencePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetRoundFencePara)
}
ControlSetRoundFencePara::ControlSetRoundFencePara(const ControlSetRoundFencePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fenceid().empty()) {
    fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fenceid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_center()) {
    center_ = new ::ControlNS::Point(*from.center_);
  } else {
    center_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&start_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetRoundFencePara)
}

inline void ControlSetRoundFencePara::SharedCtor() {
fenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&center_)) + sizeof(direction_));
}

ControlSetRoundFencePara::~ControlSetRoundFencePara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetRoundFencePara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetRoundFencePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fenceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_;
}

void ControlSetRoundFencePara::ArenaDtor(void* object) {
  ControlSetRoundFencePara* _this = reinterpret_cast< ControlSetRoundFencePara* >(object);
  (void)_this;
}
void ControlSetRoundFencePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetRoundFencePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetRoundFencePara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetRoundFencePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fenceid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&start_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetRoundFencePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.Point center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fenceID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fenceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.ControlSetRoundFencePara.fenceID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetRoundFencePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetRoundFencePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.Point center = 1;
  if (this->_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // uint32 radius = 2;
  if (this->_internal_radius() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radius(), target);
  }

  // uint64 start = 3;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_start(), target);
  }

  // uint64 end = 4;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_end(), target);
  }

  // uint32 speed = 5;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_speed(), target);
  }

  // uint32 direction = 6;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_direction(), target);
  }

  // string fenceID = 7;
  if (!this->_internal_fenceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fenceid().data(), static_cast<int>(this->_internal_fenceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.ControlSetRoundFencePara.fenceID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_fenceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetRoundFencePara)
  return target;
}

size_t ControlSetRoundFencePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetRoundFencePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fenceID = 7;
  if (!this->_internal_fenceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fenceid());
  }

  // .ControlNS.Point center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // uint64 start = 3;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint32 radius = 2;
  if (this->_internal_radius() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_radius());
  }

  // uint32 speed = 5;
  if (this->_internal_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint64 end = 4;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_end());
  }

  // uint32 direction = 6;
  if (this->_internal_direction() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetRoundFencePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetRoundFencePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetRoundFencePara::GetClassData() const { return &_class_data_; }

void ControlSetRoundFencePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetRoundFencePara *>(to)->MergeFrom(
      static_cast<const ControlSetRoundFencePara &>(from));
}


void ControlSetRoundFencePara::MergeFrom(const ControlSetRoundFencePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetRoundFencePara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fenceid().empty()) {
    _internal_set_fenceid(from._internal_fenceid());
  }
  if (from._internal_has_center()) {
    _internal_mutable_center()->::ControlNS::Point::MergeFrom(from._internal_center());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_radius() != 0) {
    _internal_set_radius(from._internal_radius());
  }
  if (from._internal_speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetRoundFencePara::CopyFrom(const ControlSetRoundFencePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetRoundFencePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetRoundFencePara::IsInitialized() const {
  return true;
}

void ControlSetRoundFencePara::InternalSwap(ControlSetRoundFencePara* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fenceid_, lhs_arena,
      &other->fenceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlSetRoundFencePara, direction_)
      + sizeof(ControlSetRoundFencePara::direction_)
      - PROTOBUF_FIELD_OFFSET(ControlSetRoundFencePara, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetRoundFencePara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[15]);
}

// ===================================================================

class ControlSetPolygonFencePara::_Internal {
 public:
};

ControlSetPolygonFencePara::ControlSetPolygonFencePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetPolygonFencePara)
}
ControlSetPolygonFencePara::ControlSetPolygonFencePara(const ControlSetPolygonFencePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fenceid().empty()) {
    fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fenceid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&start_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetPolygonFencePara)
}

inline void ControlSetPolygonFencePara::SharedCtor() {
fenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&start_)) + sizeof(direction_));
}

ControlSetPolygonFencePara::~ControlSetPolygonFencePara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetPolygonFencePara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetPolygonFencePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fenceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlSetPolygonFencePara::ArenaDtor(void* object) {
  ControlSetPolygonFencePara* _this = reinterpret_cast< ControlSetPolygonFencePara* >(object);
  (void)_this;
}
void ControlSetPolygonFencePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetPolygonFencePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetPolygonFencePara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetPolygonFencePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  fenceid_.ClearToEmpty();
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&start_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetPolygonFencePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ControlNS.Point points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fenceID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_fenceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.ControlSetPolygonFencePara.fenceID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetPolygonFencePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetPolygonFencePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ControlNS.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // uint64 start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start(), target);
  }

  // uint64 end = 3;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end(), target);
  }

  // uint32 speed = 4;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_speed(), target);
  }

  // uint32 direction = 5;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_direction(), target);
  }

  // string fenceID = 6;
  if (!this->_internal_fenceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fenceid().data(), static_cast<int>(this->_internal_fenceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.ControlSetPolygonFencePara.fenceID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fenceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetPolygonFencePara)
  return target;
}

size_t ControlSetPolygonFencePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetPolygonFencePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ControlNS.Point points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fenceID = 6;
  if (!this->_internal_fenceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fenceid());
  }

  // uint64 start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 end = 3;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_end());
  }

  // uint32 speed = 4;
  if (this->_internal_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint32 direction = 5;
  if (this->_internal_direction() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetPolygonFencePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetPolygonFencePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetPolygonFencePara::GetClassData() const { return &_class_data_; }

void ControlSetPolygonFencePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetPolygonFencePara *>(to)->MergeFrom(
      static_cast<const ControlSetPolygonFencePara &>(from));
}


void ControlSetPolygonFencePara::MergeFrom(const ControlSetPolygonFencePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetPolygonFencePara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!from._internal_fenceid().empty()) {
    _internal_set_fenceid(from._internal_fenceid());
  }
  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from._internal_speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from._internal_direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetPolygonFencePara::CopyFrom(const ControlSetPolygonFencePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetPolygonFencePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetPolygonFencePara::IsInitialized() const {
  return true;
}

void ControlSetPolygonFencePara::InternalSwap(ControlSetPolygonFencePara* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fenceid_, lhs_arena,
      &other->fenceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlSetPolygonFencePara, direction_)
      + sizeof(ControlSetPolygonFencePara::direction_)
      - PROTOBUF_FIELD_OFFSET(ControlSetPolygonFencePara, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetPolygonFencePara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[16]);
}

// ===================================================================

class ControlClearFencePara::_Internal {
 public:
};

ControlClearFencePara::ControlClearFencePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlClearFencePara)
}
ControlClearFencePara::ControlClearFencePara(const ControlClearFencePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fenceid().empty()) {
    fenceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fenceid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlClearFencePara)
}

inline void ControlClearFencePara::SharedCtor() {
fenceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fenceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControlClearFencePara::~ControlClearFencePara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlClearFencePara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlClearFencePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fenceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlClearFencePara::ArenaDtor(void* object) {
  ControlClearFencePara* _this = reinterpret_cast< ControlClearFencePara* >(object);
  (void)_this;
}
void ControlClearFencePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlClearFencePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlClearFencePara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlClearFencePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fenceid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlClearFencePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fenceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fenceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.ControlClearFencePara.fenceID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlClearFencePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlClearFencePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fenceID = 1;
  if (!this->_internal_fenceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fenceid().data(), static_cast<int>(this->_internal_fenceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.ControlClearFencePara.fenceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fenceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlClearFencePara)
  return target;
}

size_t ControlClearFencePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlClearFencePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fenceID = 1;
  if (!this->_internal_fenceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fenceid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlClearFencePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlClearFencePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlClearFencePara::GetClassData() const { return &_class_data_; }

void ControlClearFencePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlClearFencePara *>(to)->MergeFrom(
      static_cast<const ControlClearFencePara &>(from));
}


void ControlClearFencePara::MergeFrom(const ControlClearFencePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlClearFencePara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fenceid().empty()) {
    _internal_set_fenceid(from._internal_fenceid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlClearFencePara::CopyFrom(const ControlClearFencePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlClearFencePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlClearFencePara::IsInitialized() const {
  return true;
}

void ControlClearFencePara::InternalSwap(ControlClearFencePara* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fenceid_, lhs_arena,
      &other->fenceid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlClearFencePara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[17]);
}

// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&hemisphere_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(hemisphere_));
  // @@protoc_insertion_point(copy_constructor:ControlNS.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hemisphere_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(hemisphere_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ControlNS.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hemisphere_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(hemisphere_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hemisphere = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hemisphere_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 latitude = 1;
  if (this->_internal_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_latitude(), target);
  }

  // uint32 longitude = 2;
  if (this->_internal_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_longitude(), target);
  }

  // int32 hemisphere = 3;
  if (this->_internal_hemisphere() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hemisphere(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 latitude = 1;
  if (this->_internal_latitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_latitude());
  }

  // uint32 longitude = 2;
  if (this->_internal_longitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_longitude());
  }

  // int32 hemisphere = 3;
  if (this->_internal_hemisphere() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hemisphere());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_hemisphere() != 0) {
    _internal_set_hemisphere(from._internal_hemisphere());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, hemisphere_)
      + sizeof(Point::hemisphere_)
      - PROTOBUF_FIELD_OFFSET(Point, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[18]);
}

// ===================================================================

class ControlHeatSeatResponse::_Internal {
 public:
};

ControlHeatSeatResponse::ControlHeatSeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlHeatSeatResponse)
}
ControlHeatSeatResponse::ControlHeatSeatResponse(const ControlHeatSeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlHeatSeatResponse)
}

inline void ControlHeatSeatResponse::SharedCtor() {
result_ = 0u;
}

ControlHeatSeatResponse::~ControlHeatSeatResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlHeatSeatResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlHeatSeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlHeatSeatResponse::ArenaDtor(void* object) {
  ControlHeatSeatResponse* _this = reinterpret_cast< ControlHeatSeatResponse* >(object);
  (void)_this;
}
void ControlHeatSeatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlHeatSeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlHeatSeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlHeatSeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlHeatSeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlHeatSeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlHeatSeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlHeatSeatResponse)
  return target;
}

size_t ControlHeatSeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlHeatSeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlHeatSeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlHeatSeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlHeatSeatResponse::GetClassData() const { return &_class_data_; }

void ControlHeatSeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlHeatSeatResponse *>(to)->MergeFrom(
      static_cast<const ControlHeatSeatResponse &>(from));
}


void ControlHeatSeatResponse::MergeFrom(const ControlHeatSeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlHeatSeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlHeatSeatResponse::CopyFrom(const ControlHeatSeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlHeatSeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlHeatSeatResponse::IsInitialized() const {
  return true;
}

void ControlHeatSeatResponse::InternalSwap(ControlHeatSeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlHeatSeatResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[19]);
}

// ===================================================================

class ControlHeatHandleBarResponse::_Internal {
 public:
};

ControlHeatHandleBarResponse::ControlHeatHandleBarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlHeatHandleBarResponse)
}
ControlHeatHandleBarResponse::ControlHeatHandleBarResponse(const ControlHeatHandleBarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlHeatHandleBarResponse)
}

inline void ControlHeatHandleBarResponse::SharedCtor() {
result_ = 0u;
}

ControlHeatHandleBarResponse::~ControlHeatHandleBarResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlHeatHandleBarResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlHeatHandleBarResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlHeatHandleBarResponse::ArenaDtor(void* object) {
  ControlHeatHandleBarResponse* _this = reinterpret_cast< ControlHeatHandleBarResponse* >(object);
  (void)_this;
}
void ControlHeatHandleBarResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlHeatHandleBarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlHeatHandleBarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlHeatHandleBarResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlHeatHandleBarResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlHeatHandleBarResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlHeatHandleBarResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlHeatHandleBarResponse)
  return target;
}

size_t ControlHeatHandleBarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlHeatHandleBarResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlHeatHandleBarResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlHeatHandleBarResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlHeatHandleBarResponse::GetClassData() const { return &_class_data_; }

void ControlHeatHandleBarResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlHeatHandleBarResponse *>(to)->MergeFrom(
      static_cast<const ControlHeatHandleBarResponse &>(from));
}


void ControlHeatHandleBarResponse::MergeFrom(const ControlHeatHandleBarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlHeatHandleBarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlHeatHandleBarResponse::CopyFrom(const ControlHeatHandleBarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlHeatHandleBarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlHeatHandleBarResponse::IsInitialized() const {
  return true;
}

void ControlHeatHandleBarResponse::InternalSwap(ControlHeatHandleBarResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlHeatHandleBarResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[20]);
}

// ===================================================================

class ControlHeatSeatPara::_Internal {
 public:
};

ControlHeatSeatPara::ControlHeatSeatPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlHeatSeatPara)
}
ControlHeatSeatPara::ControlHeatSeatPara(const ControlHeatSeatPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&switch__, &from.switch__,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&switch__)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlHeatSeatPara)
}

inline void ControlHeatSeatPara::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&switch__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&switch__)) + sizeof(level_));
}

ControlHeatSeatPara::~ControlHeatSeatPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlHeatSeatPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlHeatSeatPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlHeatSeatPara::ArenaDtor(void* object) {
  ControlHeatSeatPara* _this = reinterpret_cast< ControlHeatSeatPara* >(object);
  (void)_this;
}
void ControlHeatSeatPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlHeatSeatPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlHeatSeatPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlHeatSeatPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&switch__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&switch__)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlHeatSeatPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.SWITCH switch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_switch_(static_cast<::ControlNS::SWITCH>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlHeatSeatPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlHeatSeatPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.SWITCH switch = 1;
  if (this->_internal_switch_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_switch_(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlHeatSeatPara)
  return target;
}

size_t ControlHeatSeatPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlHeatSeatPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.SWITCH switch = 1;
  if (this->_internal_switch_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_switch_());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlHeatSeatPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlHeatSeatPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlHeatSeatPara::GetClassData() const { return &_class_data_; }

void ControlHeatSeatPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlHeatSeatPara *>(to)->MergeFrom(
      static_cast<const ControlHeatSeatPara &>(from));
}


void ControlHeatSeatPara::MergeFrom(const ControlHeatSeatPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlHeatSeatPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_switch_() != 0) {
    _internal_set_switch_(from._internal_switch_());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlHeatSeatPara::CopyFrom(const ControlHeatSeatPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlHeatSeatPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlHeatSeatPara::IsInitialized() const {
  return true;
}

void ControlHeatSeatPara::InternalSwap(ControlHeatSeatPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlHeatSeatPara, level_)
      + sizeof(ControlHeatSeatPara::level_)
      - PROTOBUF_FIELD_OFFSET(ControlHeatSeatPara, switch__)>(
          reinterpret_cast<char*>(&switch__),
          reinterpret_cast<char*>(&other->switch__));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlHeatSeatPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[21]);
}

// ===================================================================

class ControlHeatHandleBarPara::_Internal {
 public:
};

ControlHeatHandleBarPara::ControlHeatHandleBarPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlHeatHandleBarPara)
}
ControlHeatHandleBarPara::ControlHeatHandleBarPara(const ControlHeatHandleBarPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&switch__, &from.switch__,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&switch__)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlHeatHandleBarPara)
}

inline void ControlHeatHandleBarPara::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&switch__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&switch__)) + sizeof(level_));
}

ControlHeatHandleBarPara::~ControlHeatHandleBarPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlHeatHandleBarPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlHeatHandleBarPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlHeatHandleBarPara::ArenaDtor(void* object) {
  ControlHeatHandleBarPara* _this = reinterpret_cast< ControlHeatHandleBarPara* >(object);
  (void)_this;
}
void ControlHeatHandleBarPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlHeatHandleBarPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlHeatHandleBarPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlHeatHandleBarPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&switch__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&switch__)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlHeatHandleBarPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.SWITCH switch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_switch_(static_cast<::ControlNS::SWITCH>(val));
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatHandleBarPara.HandleType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ControlNS::ControlHeatHandleBarPara_HandleType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlHeatHandleBarPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlHeatHandleBarPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.SWITCH switch = 1;
  if (this->_internal_switch_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_switch_(), target);
  }

  // .ControlNS.ControlHeatHandleBarPara.HandleType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlHeatHandleBarPara)
  return target;
}

size_t ControlHeatHandleBarPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlHeatHandleBarPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.SWITCH switch = 1;
  if (this->_internal_switch_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_switch_());
  }

  // .ControlNS.ControlHeatHandleBarPara.HandleType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlHeatHandleBarPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlHeatHandleBarPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlHeatHandleBarPara::GetClassData() const { return &_class_data_; }

void ControlHeatHandleBarPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlHeatHandleBarPara *>(to)->MergeFrom(
      static_cast<const ControlHeatHandleBarPara &>(from));
}


void ControlHeatHandleBarPara::MergeFrom(const ControlHeatHandleBarPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlHeatHandleBarPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_switch_() != 0) {
    _internal_set_switch_(from._internal_switch_());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlHeatHandleBarPara::CopyFrom(const ControlHeatHandleBarPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlHeatHandleBarPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlHeatHandleBarPara::IsInitialized() const {
  return true;
}

void ControlHeatHandleBarPara::InternalSwap(ControlHeatHandleBarPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlHeatHandleBarPara, level_)
      + sizeof(ControlHeatHandleBarPara::level_)
      - PROTOBUF_FIELD_OFFSET(ControlHeatHandleBarPara, switch__)>(
          reinterpret_cast<char*>(&switch__),
          reinterpret_cast<char*>(&other->switch__));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlHeatHandleBarPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[22]);
}

// ===================================================================

class ControlHeatReserveResponse::_Internal {
 public:
};

ControlHeatReserveResponse::ControlHeatReserveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlHeatReserveResponse)
}
ControlHeatReserveResponse::ControlHeatReserveResponse(const ControlHeatReserveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlHeatReserveResponse)
}

inline void ControlHeatReserveResponse::SharedCtor() {
result_ = 0u;
}

ControlHeatReserveResponse::~ControlHeatReserveResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlHeatReserveResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlHeatReserveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlHeatReserveResponse::ArenaDtor(void* object) {
  ControlHeatReserveResponse* _this = reinterpret_cast< ControlHeatReserveResponse* >(object);
  (void)_this;
}
void ControlHeatReserveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlHeatReserveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlHeatReserveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlHeatReserveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlHeatReserveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlHeatReserveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlHeatReserveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlHeatReserveResponse)
  return target;
}

size_t ControlHeatReserveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlHeatReserveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlHeatReserveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlHeatReserveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlHeatReserveResponse::GetClassData() const { return &_class_data_; }

void ControlHeatReserveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlHeatReserveResponse *>(to)->MergeFrom(
      static_cast<const ControlHeatReserveResponse &>(from));
}


void ControlHeatReserveResponse::MergeFrom(const ControlHeatReserveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlHeatReserveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlHeatReserveResponse::CopyFrom(const ControlHeatReserveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlHeatReserveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlHeatReserveResponse::IsInitialized() const {
  return true;
}

void ControlHeatReserveResponse::InternalSwap(ControlHeatReserveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlHeatReserveResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[23]);
}

// ===================================================================

class ControlHeatReservePara::_Internal {
 public:
  static const ::ControlNS::ControlHeatSeatPara& heatseatpara(const ControlHeatReservePara* msg);
  static const ::ControlNS::ControlHeatHandleBarPara& heathandlebarpara(const ControlHeatReservePara* msg);
};

const ::ControlNS::ControlHeatSeatPara&
ControlHeatReservePara::_Internal::heatseatpara(const ControlHeatReservePara* msg) {
  return *msg->heatseatpara_;
}
const ::ControlNS::ControlHeatHandleBarPara&
ControlHeatReservePara::_Internal::heathandlebarpara(const ControlHeatReservePara* msg) {
  return *msg->heathandlebarpara_;
}
ControlHeatReservePara::ControlHeatReservePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlHeatReservePara)
}
ControlHeatReservePara::ControlHeatReservePara(const ControlHeatReservePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_heatseatpara()) {
    heatseatpara_ = new ::ControlNS::ControlHeatSeatPara(*from.heatseatpara_);
  } else {
    heatseatpara_ = nullptr;
  }
  if (from._internal_has_heathandlebarpara()) {
    heathandlebarpara_ = new ::ControlNS::ControlHeatHandleBarPara(*from.heathandlebarpara_);
  } else {
    heathandlebarpara_ = nullptr;
  }
  ::memcpy(&appointment_, &from.appointment_,
    static_cast<size_t>(reinterpret_cast<char*>(&reservation_) -
    reinterpret_cast<char*>(&appointment_)) + sizeof(reservation_));
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlHeatReservePara)
}

inline void ControlHeatReservePara::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heatseatpara_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reservation_) -
    reinterpret_cast<char*>(&heatseatpara_)) + sizeof(reservation_));
}

ControlHeatReservePara::~ControlHeatReservePara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlHeatReservePara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlHeatReservePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete heatseatpara_;
  if (this != internal_default_instance()) delete heathandlebarpara_;
}

void ControlHeatReservePara::ArenaDtor(void* object) {
  ControlHeatReservePara* _this = reinterpret_cast< ControlHeatReservePara* >(object);
  (void)_this;
}
void ControlHeatReservePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlHeatReservePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlHeatReservePara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlHeatReservePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && heatseatpara_ != nullptr) {
    delete heatseatpara_;
  }
  heatseatpara_ = nullptr;
  if (GetArenaForAllocation() == nullptr && heathandlebarpara_ != nullptr) {
    delete heathandlebarpara_;
  }
  heathandlebarpara_ = nullptr;
  ::memset(&appointment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reservation_) -
      reinterpret_cast<char*>(&appointment_)) + sizeof(reservation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlHeatReservePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 appointment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          appointment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlCommand reservation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reservation(static_cast<::ControlNS::ControlCommand>(val));
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatSeatPara heatSeatPara = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heatseatpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ControlNS.ControlHeatHandleBarPara heatHandleBarPara = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heathandlebarpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlHeatReservePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlHeatReservePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 appointment = 1;
  if (this->_internal_appointment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_appointment(), target);
  }

  // .ControlNS.ControlCommand reservation = 2;
  if (this->_internal_reservation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reservation(), target);
  }

  // .ControlNS.ControlHeatSeatPara heatSeatPara = 3;
  if (this->_internal_has_heatseatpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::heatseatpara(this), target, stream);
  }

  // .ControlNS.ControlHeatHandleBarPara heatHandleBarPara = 4;
  if (this->_internal_has_heathandlebarpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heathandlebarpara(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlHeatReservePara)
  return target;
}

size_t ControlHeatReservePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlHeatReservePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.ControlHeatSeatPara heatSeatPara = 3;
  if (this->_internal_has_heatseatpara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heatseatpara_);
  }

  // .ControlNS.ControlHeatHandleBarPara heatHandleBarPara = 4;
  if (this->_internal_has_heathandlebarpara()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heathandlebarpara_);
  }

  // uint64 appointment = 1;
  if (this->_internal_appointment() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_appointment());
  }

  // .ControlNS.ControlCommand reservation = 2;
  if (this->_internal_reservation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reservation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlHeatReservePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlHeatReservePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlHeatReservePara::GetClassData() const { return &_class_data_; }

void ControlHeatReservePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlHeatReservePara *>(to)->MergeFrom(
      static_cast<const ControlHeatReservePara &>(from));
}


void ControlHeatReservePara::MergeFrom(const ControlHeatReservePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlHeatReservePara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_heatseatpara()) {
    _internal_mutable_heatseatpara()->::ControlNS::ControlHeatSeatPara::MergeFrom(from._internal_heatseatpara());
  }
  if (from._internal_has_heathandlebarpara()) {
    _internal_mutable_heathandlebarpara()->::ControlNS::ControlHeatHandleBarPara::MergeFrom(from._internal_heathandlebarpara());
  }
  if (from._internal_appointment() != 0) {
    _internal_set_appointment(from._internal_appointment());
  }
  if (from._internal_reservation() != 0) {
    _internal_set_reservation(from._internal_reservation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlHeatReservePara::CopyFrom(const ControlHeatReservePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlHeatReservePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlHeatReservePara::IsInitialized() const {
  return true;
}

void ControlHeatReservePara::InternalSwap(ControlHeatReservePara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlHeatReservePara, reservation_)
      + sizeof(ControlHeatReservePara::reservation_)
      - PROTOBUF_FIELD_OFFSET(ControlHeatReservePara, heatseatpara_)>(
          reinterpret_cast<char*>(&heatseatpara_),
          reinterpret_cast<char*>(&other->heatseatpara_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlHeatReservePara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[24]);
}

// ===================================================================

class ControlGetSignalIntensityResponse::_Internal {
 public:
};

ControlGetSignalIntensityResponse::ControlGetSignalIntensityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetSignalIntensityResponse)
}
ControlGetSignalIntensityResponse::ControlGetSignalIntensityResponse(const ControlGetSignalIntensityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetSignalIntensityResponse)
}

inline void ControlGetSignalIntensityResponse::SharedCtor() {
result_ = 0u;
}

ControlGetSignalIntensityResponse::~ControlGetSignalIntensityResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetSignalIntensityResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetSignalIntensityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGetSignalIntensityResponse::ArenaDtor(void* object) {
  ControlGetSignalIntensityResponse* _this = reinterpret_cast< ControlGetSignalIntensityResponse* >(object);
  (void)_this;
}
void ControlGetSignalIntensityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetSignalIntensityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetSignalIntensityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetSignalIntensityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetSignalIntensityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetSignalIntensityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetSignalIntensityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetSignalIntensityResponse)
  return target;
}

size_t ControlGetSignalIntensityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetSignalIntensityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetSignalIntensityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetSignalIntensityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetSignalIntensityResponse::GetClassData() const { return &_class_data_; }

void ControlGetSignalIntensityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetSignalIntensityResponse *>(to)->MergeFrom(
      static_cast<const ControlGetSignalIntensityResponse &>(from));
}


void ControlGetSignalIntensityResponse::MergeFrom(const ControlGetSignalIntensityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetSignalIntensityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetSignalIntensityResponse::CopyFrom(const ControlGetSignalIntensityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetSignalIntensityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetSignalIntensityResponse::IsInitialized() const {
  return true;
}

void ControlGetSignalIntensityResponse::InternalSwap(ControlGetSignalIntensityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetSignalIntensityResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[25]);
}

// ===================================================================

class ControlGetSignalIntensityPara::_Internal {
 public:
};

ControlGetSignalIntensityPara::ControlGetSignalIntensityPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetSignalIntensityPara)
}
ControlGetSignalIntensityPara::ControlGetSignalIntensityPara(const ControlGetSignalIntensityPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signalintensity_ = from.signalintensity_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetSignalIntensityPara)
}

inline void ControlGetSignalIntensityPara::SharedCtor() {
signalintensity_ = 0u;
}

ControlGetSignalIntensityPara::~ControlGetSignalIntensityPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetSignalIntensityPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetSignalIntensityPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGetSignalIntensityPara::ArenaDtor(void* object) {
  ControlGetSignalIntensityPara* _this = reinterpret_cast< ControlGetSignalIntensityPara* >(object);
  (void)_this;
}
void ControlGetSignalIntensityPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetSignalIntensityPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetSignalIntensityPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetSignalIntensityPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalintensity_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetSignalIntensityPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 signalIntensity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          signalintensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetSignalIntensityPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetSignalIntensityPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signalIntensity = 1;
  if (this->_internal_signalintensity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signalintensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetSignalIntensityPara)
  return target;
}

size_t ControlGetSignalIntensityPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetSignalIntensityPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 signalIntensity = 1;
  if (this->_internal_signalintensity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_signalintensity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetSignalIntensityPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetSignalIntensityPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetSignalIntensityPara::GetClassData() const { return &_class_data_; }

void ControlGetSignalIntensityPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetSignalIntensityPara *>(to)->MergeFrom(
      static_cast<const ControlGetSignalIntensityPara &>(from));
}


void ControlGetSignalIntensityPara::MergeFrom(const ControlGetSignalIntensityPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetSignalIntensityPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_signalintensity() != 0) {
    _internal_set_signalintensity(from._internal_signalintensity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetSignalIntensityPara::CopyFrom(const ControlGetSignalIntensityPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetSignalIntensityPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetSignalIntensityPara::IsInitialized() const {
  return true;
}

void ControlGetSignalIntensityPara::InternalSwap(ControlGetSignalIntensityPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(signalintensity_, other->signalintensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetSignalIntensityPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[26]);
}

// ===================================================================

class ControlGetAPNNameResponse::_Internal {
 public:
};

ControlGetAPNNameResponse::ControlGetAPNNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetAPNNameResponse)
}
ControlGetAPNNameResponse::ControlGetAPNNameResponse(const ControlGetAPNNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetAPNNameResponse)
}

inline void ControlGetAPNNameResponse::SharedCtor() {
result_ = 0u;
}

ControlGetAPNNameResponse::~ControlGetAPNNameResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetAPNNameResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetAPNNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGetAPNNameResponse::ArenaDtor(void* object) {
  ControlGetAPNNameResponse* _this = reinterpret_cast< ControlGetAPNNameResponse* >(object);
  (void)_this;
}
void ControlGetAPNNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetAPNNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetAPNNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetAPNNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetAPNNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetAPNNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetAPNNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetAPNNameResponse)
  return target;
}

size_t ControlGetAPNNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetAPNNameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetAPNNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetAPNNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetAPNNameResponse::GetClassData() const { return &_class_data_; }

void ControlGetAPNNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetAPNNameResponse *>(to)->MergeFrom(
      static_cast<const ControlGetAPNNameResponse &>(from));
}


void ControlGetAPNNameResponse::MergeFrom(const ControlGetAPNNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetAPNNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetAPNNameResponse::CopyFrom(const ControlGetAPNNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetAPNNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetAPNNameResponse::IsInitialized() const {
  return true;
}

void ControlGetAPNNameResponse::InternalSwap(ControlGetAPNNameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetAPNNameResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[27]);
}

// ===================================================================

class ControlSetAPNNameResponse::_Internal {
 public:
};

ControlSetAPNNameResponse::ControlSetAPNNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetAPNNameResponse)
}
ControlSetAPNNameResponse::ControlSetAPNNameResponse(const ControlSetAPNNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetAPNNameResponse)
}

inline void ControlSetAPNNameResponse::SharedCtor() {
result_ = 0u;
}

ControlSetAPNNameResponse::~ControlSetAPNNameResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetAPNNameResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetAPNNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlSetAPNNameResponse::ArenaDtor(void* object) {
  ControlSetAPNNameResponse* _this = reinterpret_cast< ControlSetAPNNameResponse* >(object);
  (void)_this;
}
void ControlSetAPNNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetAPNNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetAPNNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetAPNNameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetAPNNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetAPNNameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetAPNNameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetAPNNameResponse)
  return target;
}

size_t ControlSetAPNNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetAPNNameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetAPNNameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetAPNNameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetAPNNameResponse::GetClassData() const { return &_class_data_; }

void ControlSetAPNNameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetAPNNameResponse *>(to)->MergeFrom(
      static_cast<const ControlSetAPNNameResponse &>(from));
}


void ControlSetAPNNameResponse::MergeFrom(const ControlSetAPNNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetAPNNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetAPNNameResponse::CopyFrom(const ControlSetAPNNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetAPNNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetAPNNameResponse::IsInitialized() const {
  return true;
}

void ControlSetAPNNameResponse::InternalSwap(ControlSetAPNNameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetAPNNameResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[28]);
}

// ===================================================================

class APN::_Internal {
 public:
};

APN::APN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.APN)
}
APN::APN(const APN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  apn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    apn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apn().empty()) {
    apn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_apn(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.APN)
}

inline void APN::SharedCtor() {
apn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  apn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_ = 0u;
}

APN::~APN() {
  // @@protoc_insertion_point(destructor:ControlNS.APN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void APN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  apn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void APN::ArenaDtor(void* object) {
  APN* _this = reinterpret_cast< APN* >(object);
  (void)_this;
}
void APN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void APN::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.APN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apn_.ClearToEmpty();
  channel_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string apn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_apn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.APN.apn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.APN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // string apn = 2;
  if (!this->_internal_apn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apn().data(), static_cast<int>(this->_internal_apn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.APN.apn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_apn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.APN)
  return target;
}

size_t APN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.APN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string apn = 2;
  if (!this->_internal_apn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apn());
  }

  // uint32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    APN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APN::GetClassData() const { return &_class_data_; }

void APN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<APN *>(to)->MergeFrom(
      static_cast<const APN &>(from));
}


void APN::MergeFrom(const APN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.APN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_apn().empty()) {
    _internal_set_apn(from._internal_apn());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APN::CopyFrom(const APN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.APN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APN::IsInitialized() const {
  return true;
}

void APN::InternalSwap(APN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &apn_, lhs_arena,
      &other->apn_, rhs_arena
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[29]);
}

// ===================================================================

class ControlAPNNamePara::_Internal {
 public:
};

ControlAPNNamePara::ControlAPNNamePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlAPNNamePara)
}
ControlAPNNamePara::ControlAPNNamePara(const ControlAPNNamePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlAPNNamePara)
}

inline void ControlAPNNamePara::SharedCtor() {
}

ControlAPNNamePara::~ControlAPNNamePara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlAPNNamePara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlAPNNamePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlAPNNamePara::ArenaDtor(void* object) {
  ControlAPNNamePara* _this = reinterpret_cast< ControlAPNNamePara* >(object);
  (void)_this;
}
void ControlAPNNamePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlAPNNamePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlAPNNamePara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlAPNNamePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlAPNNamePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ControlNS.APN names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlAPNNamePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlAPNNamePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ControlNS.APN names = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_names(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlAPNNamePara)
  return target;
}

size_t ControlAPNNamePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlAPNNamePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ControlNS.APN names = 1;
  total_size += 1UL * this->_internal_names_size();
  for (const auto& msg : this->names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlAPNNamePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlAPNNamePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlAPNNamePara::GetClassData() const { return &_class_data_; }

void ControlAPNNamePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlAPNNamePara *>(to)->MergeFrom(
      static_cast<const ControlAPNNamePara &>(from));
}


void ControlAPNNamePara::MergeFrom(const ControlAPNNamePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlAPNNamePara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlAPNNamePara::CopyFrom(const ControlAPNNamePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlAPNNamePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlAPNNamePara::IsInitialized() const {
  return true;
}

void ControlAPNNamePara::InternalSwap(ControlAPNNamePara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlAPNNamePara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[30]);
}

// ===================================================================

class ControlSetFrequencyResponse::_Internal {
 public:
};

ControlSetFrequencyResponse::ControlSetFrequencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetFrequencyResponse)
}
ControlSetFrequencyResponse::ControlSetFrequencyResponse(const ControlSetFrequencyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetFrequencyResponse)
}

inline void ControlSetFrequencyResponse::SharedCtor() {
result_ = 0u;
}

ControlSetFrequencyResponse::~ControlSetFrequencyResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetFrequencyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetFrequencyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlSetFrequencyResponse::ArenaDtor(void* object) {
  ControlSetFrequencyResponse* _this = reinterpret_cast< ControlSetFrequencyResponse* >(object);
  (void)_this;
}
void ControlSetFrequencyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetFrequencyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetFrequencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetFrequencyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetFrequencyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetFrequencyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetFrequencyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetFrequencyResponse)
  return target;
}

size_t ControlSetFrequencyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetFrequencyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetFrequencyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetFrequencyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetFrequencyResponse::GetClassData() const { return &_class_data_; }

void ControlSetFrequencyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetFrequencyResponse *>(to)->MergeFrom(
      static_cast<const ControlSetFrequencyResponse &>(from));
}


void ControlSetFrequencyResponse::MergeFrom(const ControlSetFrequencyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetFrequencyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetFrequencyResponse::CopyFrom(const ControlSetFrequencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetFrequencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetFrequencyResponse::IsInitialized() const {
  return true;
}

void ControlSetFrequencyResponse::InternalSwap(ControlSetFrequencyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetFrequencyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[31]);
}

// ===================================================================

class ControlSetFrequencyPara::_Internal {
 public:
};

ControlSetFrequencyPara::ControlSetFrequencyPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetFrequencyPara)
}
ControlSetFrequencyPara::ControlSetFrequencyPara(const ControlSetFrequencyPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frequency_ = from.frequency_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetFrequencyPara)
}

inline void ControlSetFrequencyPara::SharedCtor() {
frequency_ = 0u;
}

ControlSetFrequencyPara::~ControlSetFrequencyPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetFrequencyPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetFrequencyPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlSetFrequencyPara::ArenaDtor(void* object) {
  ControlSetFrequencyPara* _this = reinterpret_cast< ControlSetFrequencyPara* >(object);
  (void)_this;
}
void ControlSetFrequencyPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetFrequencyPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetFrequencyPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetFrequencyPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frequency_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetFrequencyPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetFrequencyPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetFrequencyPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frequency = 1;
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetFrequencyPara)
  return target;
}

size_t ControlSetFrequencyPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetFrequencyPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 frequency = 1;
  if (this->_internal_frequency() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frequency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetFrequencyPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetFrequencyPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetFrequencyPara::GetClassData() const { return &_class_data_; }

void ControlSetFrequencyPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetFrequencyPara *>(to)->MergeFrom(
      static_cast<const ControlSetFrequencyPara &>(from));
}


void ControlSetFrequencyPara::MergeFrom(const ControlSetFrequencyPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetFrequencyPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_frequency() != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetFrequencyPara::CopyFrom(const ControlSetFrequencyPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetFrequencyPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetFrequencyPara::IsInitialized() const {
  return true;
}

void ControlSetFrequencyPara::InternalSwap(ControlSetFrequencyPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(frequency_, other->frequency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetFrequencyPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[32]);
}

// ===================================================================

class ControlSetSentinelModeResponse::_Internal {
 public:
};

ControlSetSentinelModeResponse::ControlSetSentinelModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetSentinelModeResponse)
}
ControlSetSentinelModeResponse::ControlSetSentinelModeResponse(const ControlSetSentinelModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetSentinelModeResponse)
}

inline void ControlSetSentinelModeResponse::SharedCtor() {
result_ = 0u;
}

ControlSetSentinelModeResponse::~ControlSetSentinelModeResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetSentinelModeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetSentinelModeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlSetSentinelModeResponse::ArenaDtor(void* object) {
  ControlSetSentinelModeResponse* _this = reinterpret_cast< ControlSetSentinelModeResponse* >(object);
  (void)_this;
}
void ControlSetSentinelModeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetSentinelModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetSentinelModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetSentinelModeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetSentinelModeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetSentinelModeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetSentinelModeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetSentinelModeResponse)
  return target;
}

size_t ControlSetSentinelModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetSentinelModeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetSentinelModeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetSentinelModeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetSentinelModeResponse::GetClassData() const { return &_class_data_; }

void ControlSetSentinelModeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetSentinelModeResponse *>(to)->MergeFrom(
      static_cast<const ControlSetSentinelModeResponse &>(from));
}


void ControlSetSentinelModeResponse::MergeFrom(const ControlSetSentinelModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetSentinelModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetSentinelModeResponse::CopyFrom(const ControlSetSentinelModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetSentinelModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetSentinelModeResponse::IsInitialized() const {
  return true;
}

void ControlSetSentinelModeResponse::InternalSwap(ControlSetSentinelModeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetSentinelModeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[33]);
}

// ===================================================================

class ControlSetSentinelModePara::_Internal {
 public:
};

ControlSetSentinelModePara::ControlSetSentinelModePara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlSetSentinelModePara)
}
ControlSetSentinelModePara::ControlSetSentinelModePara(const ControlSetSentinelModePara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  switch__ = from.switch__;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlSetSentinelModePara)
}

inline void ControlSetSentinelModePara::SharedCtor() {
switch__ = 0;
}

ControlSetSentinelModePara::~ControlSetSentinelModePara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlSetSentinelModePara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSetSentinelModePara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlSetSentinelModePara::ArenaDtor(void* object) {
  ControlSetSentinelModePara* _this = reinterpret_cast< ControlSetSentinelModePara* >(object);
  (void)_this;
}
void ControlSetSentinelModePara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSetSentinelModePara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSetSentinelModePara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlSetSentinelModePara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSetSentinelModePara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ControlNS.SWITCH switch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_switch_(static_cast<::ControlNS::SWITCH>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlSetSentinelModePara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlSetSentinelModePara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlNS.SWITCH switch = 1;
  if (this->_internal_switch_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_switch_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlSetSentinelModePara)
  return target;
}

size_t ControlSetSentinelModePara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlSetSentinelModePara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ControlNS.SWITCH switch = 1;
  if (this->_internal_switch_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_switch_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSetSentinelModePara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSetSentinelModePara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSetSentinelModePara::GetClassData() const { return &_class_data_; }

void ControlSetSentinelModePara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlSetSentinelModePara *>(to)->MergeFrom(
      static_cast<const ControlSetSentinelModePara &>(from));
}


void ControlSetSentinelModePara::MergeFrom(const ControlSetSentinelModePara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlSetSentinelModePara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_switch_() != 0) {
    _internal_set_switch_(from._internal_switch_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSetSentinelModePara::CopyFrom(const ControlSetSentinelModePara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlSetSentinelModePara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSetSentinelModePara::IsInitialized() const {
  return true;
}

void ControlSetSentinelModePara::InternalSwap(ControlSetSentinelModePara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(switch__, other->switch__);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSetSentinelModePara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[34]);
}

// ===================================================================

class ControlGetECUVersionResponse::_Internal {
 public:
};

ControlGetECUVersionResponse::ControlGetECUVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetECUVersionResponse)
}
ControlGetECUVersionResponse::ControlGetECUVersionResponse(const ControlGetECUVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetECUVersionResponse)
}

inline void ControlGetECUVersionResponse::SharedCtor() {
result_ = 0u;
}

ControlGetECUVersionResponse::~ControlGetECUVersionResponse() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetECUVersionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetECUVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGetECUVersionResponse::ArenaDtor(void* object) {
  ControlGetECUVersionResponse* _this = reinterpret_cast< ControlGetECUVersionResponse* >(object);
  (void)_this;
}
void ControlGetECUVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetECUVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetECUVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetECUVersionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetECUVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetECUVersionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetECUVersionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetECUVersionResponse)
  return target;
}

size_t ControlGetECUVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetECUVersionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetECUVersionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetECUVersionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetECUVersionResponse::GetClassData() const { return &_class_data_; }

void ControlGetECUVersionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetECUVersionResponse *>(to)->MergeFrom(
      static_cast<const ControlGetECUVersionResponse &>(from));
}


void ControlGetECUVersionResponse::MergeFrom(const ControlGetECUVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetECUVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetECUVersionResponse::CopyFrom(const ControlGetECUVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetECUVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetECUVersionResponse::IsInitialized() const {
  return true;
}

void ControlGetECUVersionResponse::InternalSwap(ControlGetECUVersionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetECUVersionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[35]);
}

// ===================================================================

class ECUVersion::_Internal {
 public:
};

ECUVersion::ECUVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ECUVersion)
}
ECUVersion::ECUVersion(const ECUVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  firmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    firmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_firmware().empty()) {
    firmware_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_firmware(), 
      GetArenaForAllocation());
  }
  software_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_software().empty()) {
    software_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_software(), 
      GetArenaForAllocation());
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArenaForAllocation());
  }
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manufacturer(), 
      GetArenaForAllocation());
  }
  ecu_ = from.ecu_;
  // @@protoc_insertion_point(copy_constructor:ControlNS.ECUVersion)
}

inline void ECUVersion::SharedCtor() {
firmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  firmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
software_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  software_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ecu_ = 0;
}

ECUVersion::~ECUVersion() {
  // @@protoc_insertion_point(destructor:ControlNS.ECUVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECUVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  firmware_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECUVersion::ArenaDtor(void* object) {
  ECUVersion* _this = reinterpret_cast< ECUVersion* >(object);
  (void)_this;
}
void ECUVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECUVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECUVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ECUVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmware_.ClearToEmpty();
  software_.ClearToEmpty();
  protocol_.ClearToEmpty();
  manufacturer_.ClearToEmpty();
  ecu_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECUVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DiagnoseNS.Ecus ecu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // string firmware = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_firmware();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.ECUVersion.firmware"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string software = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_software();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.ECUVersion.software"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.ECUVersion.protocol"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string manufacturer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ControlNS.ECUVersion.manufacturer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECUVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ECUVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ecu(), target);
  }

  // string firmware = 2;
  if (!this->_internal_firmware().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmware().data(), static_cast<int>(this->_internal_firmware().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.ECUVersion.firmware");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_firmware(), target);
  }

  // string software = 3;
  if (!this->_internal_software().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_software().data(), static_cast<int>(this->_internal_software().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.ECUVersion.software");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_software(), target);
  }

  // string protocol = 4;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.ECUVersion.protocol");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_protocol(), target);
  }

  // string manufacturer = 5;
  if (!this->_internal_manufacturer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ControlNS.ECUVersion.manufacturer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_manufacturer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ECUVersion)
  return target;
}

size_t ECUVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ECUVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string firmware = 2;
  if (!this->_internal_firmware().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmware());
  }

  // string software = 3;
  if (!this->_internal_software().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_software());
  }

  // string protocol = 4;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string manufacturer = 5;
  if (!this->_internal_manufacturer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecu());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECUVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECUVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECUVersion::GetClassData() const { return &_class_data_; }

void ECUVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECUVersion *>(to)->MergeFrom(
      static_cast<const ECUVersion &>(from));
}


void ECUVersion::MergeFrom(const ECUVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ECUVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_firmware().empty()) {
    _internal_set_firmware(from._internal_firmware());
  }
  if (!from._internal_software().empty()) {
    _internal_set_software(from._internal_software());
  }
  if (!from._internal_protocol().empty()) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_manufacturer().empty()) {
    _internal_set_manufacturer(from._internal_manufacturer());
  }
  if (from._internal_ecu() != 0) {
    _internal_set_ecu(from._internal_ecu());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECUVersion::CopyFrom(const ECUVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ECUVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECUVersion::IsInitialized() const {
  return true;
}

void ECUVersion::InternalSwap(ECUVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &firmware_, lhs_arena,
      &other->firmware_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &software_, lhs_arena,
      &other->software_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protocol_, lhs_arena,
      &other->protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &manufacturer_, lhs_arena,
      &other->manufacturer_, rhs_arena
  );
  swap(ecu_, other->ecu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECUVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[36]);
}

// ===================================================================

class ControlGetECUVersionPara::_Internal {
 public:
};

ControlGetECUVersionPara::ControlGetECUVersionPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ControlNS.ControlGetECUVersionPara)
}
ControlGetECUVersionPara::ControlGetECUVersionPara(const ControlGetECUVersionPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_(from.info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ControlNS.ControlGetECUVersionPara)
}

inline void ControlGetECUVersionPara::SharedCtor() {
}

ControlGetECUVersionPara::~ControlGetECUVersionPara() {
  // @@protoc_insertion_point(destructor:ControlNS.ControlGetECUVersionPara)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlGetECUVersionPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlGetECUVersionPara::ArenaDtor(void* object) {
  ControlGetECUVersionPara* _this = reinterpret_cast< ControlGetECUVersionPara* >(object);
  (void)_this;
}
void ControlGetECUVersionPara::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlGetECUVersionPara::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlGetECUVersionPara::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlNS.ControlGetECUVersionPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlGetECUVersionPara::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ControlNS.ECUVersion info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlGetECUVersionPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ControlNS.ControlGetECUVersionPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ControlNS.ECUVersion info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlNS.ControlGetECUVersionPara)
  return target;
}

size_t ControlGetECUVersionPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlNS.ControlGetECUVersionPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ControlNS.ECUVersion info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlGetECUVersionPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlGetECUVersionPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlGetECUVersionPara::GetClassData() const { return &_class_data_; }

void ControlGetECUVersionPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlGetECUVersionPara *>(to)->MergeFrom(
      static_cast<const ControlGetECUVersionPara &>(from));
}


void ControlGetECUVersionPara::MergeFrom(const ControlGetECUVersionPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlNS.ControlGetECUVersionPara)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGetECUVersionPara::CopyFrom(const ControlGetECUVersionPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlNS.ControlGetECUVersionPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGetECUVersionPara::IsInitialized() const {
  return true;
}

void ControlGetECUVersionPara::InternalSwap(ControlGetECUVersionPara* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlGetECUVersionPara::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[37]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ControlNS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ControlNS::Control* Arena::CreateMaybeMessage< ::ControlNS::Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::Control >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::Parameters* Arena::CreateMaybeMessage< ::ControlNS::Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlEngineResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlEngineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlEngineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlEnginePara* Arena::CreateMaybeMessage< ::ControlNS::ControlEnginePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlEnginePara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetPositionResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlGetPositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlFindCarResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlFindCarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlFindCarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlFindCarPara* Arena::CreateMaybeMessage< ::ControlNS::ControlFindCarPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlFindCarPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGearReportResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlGearReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGearReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetPositionPara* Arena::CreateMaybeMessage< ::ControlNS::ControlGetPositionPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetPositionPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetTPMSResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlGetTPMSResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetTPMSResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetTPMSPara* Arena::CreateMaybeMessage< ::ControlNS::ControlGetTPMSPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetTPMSPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlTakeParkingPhotoResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlTakeParkingPhotoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlTakeParkingPhotoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlTakeParkingPhotoPara* Arena::CreateMaybeMessage< ::ControlNS::ControlTakeParkingPhotoPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlTakeParkingPhotoPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetFenceResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlSetFenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetFenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetRoundFencePara* Arena::CreateMaybeMessage< ::ControlNS::ControlSetRoundFencePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetRoundFencePara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetPolygonFencePara* Arena::CreateMaybeMessage< ::ControlNS::ControlSetPolygonFencePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetPolygonFencePara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlClearFencePara* Arena::CreateMaybeMessage< ::ControlNS::ControlClearFencePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlClearFencePara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::Point* Arena::CreateMaybeMessage< ::ControlNS::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlHeatSeatResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlHeatSeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlHeatSeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlHeatHandleBarResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlHeatHandleBarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlHeatHandleBarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlHeatSeatPara* Arena::CreateMaybeMessage< ::ControlNS::ControlHeatSeatPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlHeatSeatPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlHeatHandleBarPara* Arena::CreateMaybeMessage< ::ControlNS::ControlHeatHandleBarPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlHeatHandleBarPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlHeatReserveResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlHeatReserveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlHeatReserveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlHeatReservePara* Arena::CreateMaybeMessage< ::ControlNS::ControlHeatReservePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlHeatReservePara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetSignalIntensityResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlGetSignalIntensityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetSignalIntensityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetSignalIntensityPara* Arena::CreateMaybeMessage< ::ControlNS::ControlGetSignalIntensityPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetSignalIntensityPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetAPNNameResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlGetAPNNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetAPNNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetAPNNameResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlSetAPNNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetAPNNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::APN* Arena::CreateMaybeMessage< ::ControlNS::APN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::APN >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlAPNNamePara* Arena::CreateMaybeMessage< ::ControlNS::ControlAPNNamePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlAPNNamePara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetFrequencyResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlSetFrequencyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetFrequencyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetFrequencyPara* Arena::CreateMaybeMessage< ::ControlNS::ControlSetFrequencyPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetFrequencyPara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetSentinelModeResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlSetSentinelModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetSentinelModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlSetSentinelModePara* Arena::CreateMaybeMessage< ::ControlNS::ControlSetSentinelModePara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlSetSentinelModePara >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetECUVersionResponse* Arena::CreateMaybeMessage< ::ControlNS::ControlGetECUVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetECUVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ECUVersion* Arena::CreateMaybeMessage< ::ControlNS::ECUVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ECUVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::ControlNS::ControlGetECUVersionPara* Arena::CreateMaybeMessage< ::ControlNS::ControlGetECUVersionPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ControlNS::ControlGetECUVersionPara >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
