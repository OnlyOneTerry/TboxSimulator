// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace StatusNS {
constexpr Status::Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bmsskinfo_()
  , hmiinfo_(nullptr)
  , tboxskinfo_(nullptr)
  , tboxinfo_(nullptr)
  , bmsinfo_(nullptr)
  , tpmsinfo_(nullptr){}
struct StatusDefaultTypeInternal {
  constexpr StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDefaultTypeInternal _Status_default_instance_;
constexpr HmiInfo::HmiInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : odometro_(0u)
  , endurancemileage_(0u)
  , speed_(0u)
  , revspeed_(0u)
  , gearposition_(0)
{}
struct HmiInfoDefaultTypeInternal {
  constexpr HmiInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HmiInfoDefaultTypeInternal() {}
  union {
    HmiInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HmiInfoDefaultTypeInternal _HmiInfo_default_instance_;
constexpr BmsSKInfo::BmsSKInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bmsvoltage_(0u)
  , bmselectric_(0u)
  , bmssoc_(0u)
  , bmstemp_(0u){}
struct BmsSKInfoDefaultTypeInternal {
  constexpr BmsSKInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BmsSKInfoDefaultTypeInternal() {}
  union {
    BmsSKInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BmsSKInfoDefaultTypeInternal _BmsSKInfo_default_instance_;
constexpr BmsInfo::BmsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bmsvoltage_(0u)
  , bmselectric_(0u)
  , bmssoc_(0u)
  , bmstemp_(0u){}
struct BmsInfoDefaultTypeInternal {
  constexpr BmsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BmsInfoDefaultTypeInternal() {}
  union {
    BmsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BmsInfoDefaultTypeInternal _BmsInfo_default_instance_;
constexpr TboxSKInfo::TboxSKInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caninfo_()
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kl15_(false)
  , kl30_(0u)
  , batteryvoltage_(0u)
  , csq_(0u)
  , rapidaccelerationcount_(0u)
  , rapiddecelerationcount_(0u)
  , emergencybrakecount_(0u)
  , sharpturncount_(0u){}
struct TboxSKInfoDefaultTypeInternal {
  constexpr TboxSKInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TboxSKInfoDefaultTypeInternal() {}
  union {
    TboxSKInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TboxSKInfoDefaultTypeInternal _TboxSKInfo_default_instance_;
constexpr TboxInfo::TboxInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caninfo_()
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kl15_(false)
  , kl30_(0u)
  , batteryvoltage_(0u)
  , csq_(0u)
  , rapidaccelerationcount_(0u)
  , rapiddecelerationcount_(0u)
  , emergencybrakecount_(0u)
  , sharpturncount_(0u){}
struct TboxInfoDefaultTypeInternal {
  constexpr TboxInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TboxInfoDefaultTypeInternal() {}
  union {
    TboxInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TboxInfoDefaultTypeInternal _TboxInfo_default_instance_;
constexpr TpmsInfo::TpmsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fronttiertemp_(0)
  , reartiretemp_(0)
  , fronttirepressure_(0)
  , reartirepressure_(0)
  , status_(0u){}
struct TpmsInfoDefaultTypeInternal {
  constexpr TpmsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TpmsInfoDefaultTypeInternal() {}
  union {
    TpmsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TpmsInfoDefaultTypeInternal _TpmsInfo_default_instance_;
constexpr CanInfo::CanInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : canchannel_(0u)
  , busoff_(false)
  , noack_(false)
  , sendnum_(0u)
  , recvnum_(0u){}
struct CanInfoDefaultTypeInternal {
  constexpr CanInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanInfoDefaultTypeInternal() {}
  union {
    CanInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanInfoDefaultTypeInternal _CanInfo_default_instance_;
}  // namespace StatusNS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_status_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_status_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_status_2eproto = nullptr;

const uint32_t TableStruct_status_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::Status, hmiinfo_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::Status, tboxskinfo_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::Status, bmsskinfo_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::Status, tboxinfo_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::Status, bmsinfo_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::Status, tpmsinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::HmiInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::HmiInfo, odometro_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::HmiInfo, endurancemileage_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::HmiInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::HmiInfo, revspeed_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::HmiInfo, gearposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsSKInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsSKInfo, bmsvoltage_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsSKInfo, bmselectric_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsSKInfo, bmssoc_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsSKInfo, bmstemp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsInfo, bmsvoltage_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsInfo, bmselectric_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsInfo, bmssoc_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::BmsInfo, bmstemp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, kl15_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, kl30_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, batteryvoltage_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, csq_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, caninfo_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, location_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, rapidaccelerationcount_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, rapiddecelerationcount_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, emergencybrakecount_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxSKInfo, sharpturncount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, kl15_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, kl30_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, batteryvoltage_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, csq_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, caninfo_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, location_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, rapidaccelerationcount_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, rapiddecelerationcount_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, emergencybrakecount_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TboxInfo, sharpturncount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::TpmsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::TpmsInfo, fronttiertemp_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TpmsInfo, reartiretemp_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TpmsInfo, fronttirepressure_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TpmsInfo, reartirepressure_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::TpmsInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusNS::CanInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusNS::CanInfo, canchannel_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::CanInfo, busoff_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::CanInfo, noack_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::CanInfo, sendnum_),
  PROTOBUF_FIELD_OFFSET(::StatusNS::CanInfo, recvnum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::StatusNS::Status)},
  { 12, -1, -1, sizeof(::StatusNS::HmiInfo)},
  { 23, -1, -1, sizeof(::StatusNS::BmsSKInfo)},
  { 33, -1, -1, sizeof(::StatusNS::BmsInfo)},
  { 43, -1, -1, sizeof(::StatusNS::TboxSKInfo)},
  { 59, -1, -1, sizeof(::StatusNS::TboxInfo)},
  { 75, -1, -1, sizeof(::StatusNS::TpmsInfo)},
  { 86, -1, -1, sizeof(::StatusNS::CanInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_HmiInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_BmsSKInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_BmsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_TboxSKInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_TboxInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_TpmsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StatusNS::_CanInfo_default_instance_),
};

const char descriptor_table_protodef_status_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014status.proto\022\010StatusNS\"\356\001\n\006Status\022\"\n\007h"
  "miInfo\030\001 \001(\0132\021.StatusNS.HmiInfo\022(\n\ntboxS"
  "KInfo\030\002 \001(\0132\024.StatusNS.TboxSKInfo\022&\n\tbms"
  "SKInfo\030\003 \003(\0132\023.StatusNS.BmsSKInfo\022$\n\010tbo"
  "xInfo\030\004 \001(\0132\022.StatusNS.TboxInfo\022\"\n\007bmsIn"
  "fo\030\005 \001(\0132\021.StatusNS.BmsInfo\022$\n\010tpmsInfo\030"
  "\006 \001(\0132\022.StatusNS.TpmsInfo\"\204\001\n\007HmiInfo\022\020\n"
  "\010odoMetro\030\001 \001(\r\022\030\n\020enduranceMileage\030\002 \001("
  "\r\022\r\n\005speed\030\003 \001(\r\022\020\n\010revSpeed\030\004 \001(\r\022,\n\014ge"
  "arPosition\030\005 \001(\0162\026.StatusNS.GearPosition"
  "\"U\n\tBmsSKInfo\022\022\n\nbmsVoltage\030\001 \001(\r\022\023\n\013bms"
  "Electric\030\002 \001(\r\022\016\n\006bmsSOC\030\003 \001(\r\022\017\n\007bmsTem"
  "p\030\004 \001(\r\"S\n\007BmsInfo\022\022\n\nbmsVoltage\030\001 \001(\r\022\023"
  "\n\013bmsElectric\030\002 \001(\r\022\016\n\006bmsSOC\030\003 \001(\r\022\017\n\007b"
  "msTemp\030\004 \001(\r\"\370\001\n\nTboxSKInfo\022\014\n\004kl15\030\001 \001("
  "\010\022\014\n\004kl30\030\002 \001(\r\022\026\n\016batteryVoltage\030\003 \001(\r\022"
  "\013\n\003csq\030\004 \001(\r\022\"\n\007canInfo\030\005 \003(\0132\021.StatusNS"
  ".CanInfo\022\020\n\010location\030\006 \001(\014\022\036\n\026rapidAccel"
  "erationCount\030\007 \001(\r\022\036\n\026rapidDecelerationC"
  "ount\030\010 \001(\r\022\033\n\023emergencyBrakeCount\030\t \001(\r\022"
  "\026\n\016sharpTurnCount\030\n \001(\r\"\366\001\n\010TboxInfo\022\014\n\004"
  "kl15\030\001 \001(\010\022\014\n\004kl30\030\002 \001(\r\022\026\n\016batteryVolta"
  "ge\030\003 \001(\r\022\013\n\003csq\030\004 \001(\r\022\"\n\007canInfo\030\005 \003(\0132\021"
  ".StatusNS.CanInfo\022\020\n\010location\030\006 \001(\014\022\036\n\026r"
  "apidAccelerationCount\030\007 \001(\r\022\036\n\026rapidDece"
  "lerationCount\030\010 \001(\r\022\033\n\023emergencyBrakeCou"
  "nt\030\t \001(\r\022\026\n\016sharpTurnCount\030\n \001(\r\"|\n\010Tpms"
  "Info\022\025\n\rfrontTierTemp\030\001 \001(\005\022\024\n\014rearTireT"
  "emp\030\002 \001(\005\022\031\n\021frontTirePressure\030\003 \001(\005\022\030\n\020"
  "rearTirePressure\030\004 \001(\005\022\016\n\006status\030\005 \001(\r\"^"
  "\n\007CanInfo\022\022\n\ncanChannel\030\001 \001(\r\022\016\n\006busOff\030"
  "\002 \001(\010\022\r\n\005noAck\030\003 \001(\010\022\017\n\007sendNum\030\004 \001(\r\022\017\n"
  "\007recvNum\030\005 \001(\r*\223\001\n\014GearPosition\022\013\n\007INVAL"
  "ID\020\000\022\n\n\006GEAR_0\020\001\022\n\n\006GEAR_1\020\002\022\n\n\006GEAR_2\020\003"
  "\022\n\n\006GEAR_3\020\004\022\n\n\006GEAR_P\020\005\022\n\n\006GEAR_R\020\006\022\n\n\006"
  "GEAR_D\020\007\022\n\n\006GEAR_F\020\010\022\n\n\006GEAR_N\020\t\022\n\n\006GEAR"
  "_4\020\nB\034\n\rcom.iov.protoB\013StatusProtob\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_status_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto = {
  false, false, 1482, descriptor_table_protodef_status_2eproto, "status.proto", 
  &descriptor_table_status_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_status_2eproto::offsets,
  file_level_metadata_status_2eproto, file_level_enum_descriptors_status_2eproto, file_level_service_descriptors_status_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_status_2eproto_getter() {
  return &descriptor_table_status_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_status_2eproto(&descriptor_table_status_2eproto);
namespace StatusNS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_status_2eproto);
  return file_level_enum_descriptors_status_2eproto[0];
}
bool GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Status::_Internal {
 public:
  static const ::StatusNS::HmiInfo& hmiinfo(const Status* msg);
  static const ::StatusNS::TboxSKInfo& tboxskinfo(const Status* msg);
  static const ::StatusNS::TboxInfo& tboxinfo(const Status* msg);
  static const ::StatusNS::BmsInfo& bmsinfo(const Status* msg);
  static const ::StatusNS::TpmsInfo& tpmsinfo(const Status* msg);
};

const ::StatusNS::HmiInfo&
Status::_Internal::hmiinfo(const Status* msg) {
  return *msg->hmiinfo_;
}
const ::StatusNS::TboxSKInfo&
Status::_Internal::tboxskinfo(const Status* msg) {
  return *msg->tboxskinfo_;
}
const ::StatusNS::TboxInfo&
Status::_Internal::tboxinfo(const Status* msg) {
  return *msg->tboxinfo_;
}
const ::StatusNS::BmsInfo&
Status::_Internal::bmsinfo(const Status* msg) {
  return *msg->bmsinfo_;
}
const ::StatusNS::TpmsInfo&
Status::_Internal::tpmsinfo(const Status* msg) {
  return *msg->tpmsinfo_;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bmsskinfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bmsskinfo_(from.bmsskinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hmiinfo()) {
    hmiinfo_ = new ::StatusNS::HmiInfo(*from.hmiinfo_);
  } else {
    hmiinfo_ = nullptr;
  }
  if (from._internal_has_tboxskinfo()) {
    tboxskinfo_ = new ::StatusNS::TboxSKInfo(*from.tboxskinfo_);
  } else {
    tboxskinfo_ = nullptr;
  }
  if (from._internal_has_tboxinfo()) {
    tboxinfo_ = new ::StatusNS::TboxInfo(*from.tboxinfo_);
  } else {
    tboxinfo_ = nullptr;
  }
  if (from._internal_has_bmsinfo()) {
    bmsinfo_ = new ::StatusNS::BmsInfo(*from.bmsinfo_);
  } else {
    bmsinfo_ = nullptr;
  }
  if (from._internal_has_tpmsinfo()) {
    tpmsinfo_ = new ::StatusNS::TpmsInfo(*from.tpmsinfo_);
  } else {
    tpmsinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:StatusNS.Status)
}

inline void Status::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hmiinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tpmsinfo_) -
    reinterpret_cast<char*>(&hmiinfo_)) + sizeof(tpmsinfo_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:StatusNS.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hmiinfo_;
  if (this != internal_default_instance()) delete tboxskinfo_;
  if (this != internal_default_instance()) delete tboxinfo_;
  if (this != internal_default_instance()) delete bmsinfo_;
  if (this != internal_default_instance()) delete tpmsinfo_;
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bmsskinfo_.Clear();
  if (GetArenaForAllocation() == nullptr && hmiinfo_ != nullptr) {
    delete hmiinfo_;
  }
  hmiinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tboxskinfo_ != nullptr) {
    delete tboxskinfo_;
  }
  tboxskinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tboxinfo_ != nullptr) {
    delete tboxinfo_;
  }
  tboxinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bmsinfo_ != nullptr) {
    delete bmsinfo_;
  }
  bmsinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tpmsinfo_ != nullptr) {
    delete tpmsinfo_;
  }
  tpmsinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StatusNS.HmiInfo hmiInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hmiinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StatusNS.TboxSKInfo tboxSKInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tboxskinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StatusNS.BmsSKInfo bmsSKInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bmsskinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StatusNS.TboxInfo tboxInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tboxinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StatusNS.BmsInfo bmsInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bmsinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StatusNS.TpmsInfo tpmsInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tpmsinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StatusNS.HmiInfo hmiInfo = 1;
  if (this->_internal_has_hmiinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hmiinfo(this), target, stream);
  }

  // .StatusNS.TboxSKInfo tboxSKInfo = 2;
  if (this->_internal_has_tboxskinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tboxskinfo(this), target, stream);
  }

  // repeated .StatusNS.BmsSKInfo bmsSKInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bmsskinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bmsskinfo(i), target, stream);
  }

  // .StatusNS.TboxInfo tboxInfo = 4;
  if (this->_internal_has_tboxinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tboxinfo(this), target, stream);
  }

  // .StatusNS.BmsInfo bmsInfo = 5;
  if (this->_internal_has_bmsinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bmsinfo(this), target, stream);
  }

  // .StatusNS.TpmsInfo tpmsInfo = 6;
  if (this->_internal_has_tpmsinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tpmsinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StatusNS.BmsSKInfo bmsSKInfo = 3;
  total_size += 1UL * this->_internal_bmsskinfo_size();
  for (const auto& msg : this->bmsskinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .StatusNS.HmiInfo hmiInfo = 1;
  if (this->_internal_has_hmiinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hmiinfo_);
  }

  // .StatusNS.TboxSKInfo tboxSKInfo = 2;
  if (this->_internal_has_tboxskinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tboxskinfo_);
  }

  // .StatusNS.TboxInfo tboxInfo = 4;
  if (this->_internal_has_tboxinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tboxinfo_);
  }

  // .StatusNS.BmsInfo bmsInfo = 5;
  if (this->_internal_has_bmsinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bmsinfo_);
  }

  // .StatusNS.TpmsInfo tpmsInfo = 6;
  if (this->_internal_has_tpmsinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tpmsinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }

void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Status *>(to)->MergeFrom(
      static_cast<const Status &>(from));
}


void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bmsskinfo_.MergeFrom(from.bmsskinfo_);
  if (from._internal_has_hmiinfo()) {
    _internal_mutable_hmiinfo()->::StatusNS::HmiInfo::MergeFrom(from._internal_hmiinfo());
  }
  if (from._internal_has_tboxskinfo()) {
    _internal_mutable_tboxskinfo()->::StatusNS::TboxSKInfo::MergeFrom(from._internal_tboxskinfo());
  }
  if (from._internal_has_tboxinfo()) {
    _internal_mutable_tboxinfo()->::StatusNS::TboxInfo::MergeFrom(from._internal_tboxinfo());
  }
  if (from._internal_has_bmsinfo()) {
    _internal_mutable_bmsinfo()->::StatusNS::BmsInfo::MergeFrom(from._internal_bmsinfo());
  }
  if (from._internal_has_tpmsinfo()) {
    _internal_mutable_tpmsinfo()->::StatusNS::TpmsInfo::MergeFrom(from._internal_tpmsinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bmsskinfo_.InternalSwap(&other->bmsskinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, tpmsinfo_)
      + sizeof(Status::tpmsinfo_)
      - PROTOBUF_FIELD_OFFSET(Status, hmiinfo_)>(
          reinterpret_cast<char*>(&hmiinfo_),
          reinterpret_cast<char*>(&other->hmiinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[0]);
}

// ===================================================================

class HmiInfo::_Internal {
 public:
};

HmiInfo::HmiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.HmiInfo)
}
HmiInfo::HmiInfo(const HmiInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&odometro_, &from.odometro_,
    static_cast<size_t>(reinterpret_cast<char*>(&gearposition_) -
    reinterpret_cast<char*>(&odometro_)) + sizeof(gearposition_));
  // @@protoc_insertion_point(copy_constructor:StatusNS.HmiInfo)
}

inline void HmiInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&odometro_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gearposition_) -
    reinterpret_cast<char*>(&odometro_)) + sizeof(gearposition_));
}

HmiInfo::~HmiInfo() {
  // @@protoc_insertion_point(destructor:StatusNS.HmiInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HmiInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HmiInfo::ArenaDtor(void* object) {
  HmiInfo* _this = reinterpret_cast< HmiInfo* >(object);
  (void)_this;
}
void HmiInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HmiInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HmiInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.HmiInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&odometro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gearposition_) -
      reinterpret_cast<char*>(&odometro_)) + sizeof(gearposition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HmiInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 odoMetro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          odometro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enduranceMileage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          endurancemileage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 revSpeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          revspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StatusNS.GearPosition gearPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gearposition(static_cast<::StatusNS::GearPosition>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HmiInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.HmiInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 odoMetro = 1;
  if (this->_internal_odometro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_odometro(), target);
  }

  // uint32 enduranceMileage = 2;
  if (this->_internal_endurancemileage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_endurancemileage(), target);
  }

  // uint32 speed = 3;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_speed(), target);
  }

  // uint32 revSpeed = 4;
  if (this->_internal_revspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_revspeed(), target);
  }

  // .StatusNS.GearPosition gearPosition = 5;
  if (this->_internal_gearposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gearposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.HmiInfo)
  return target;
}

size_t HmiInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.HmiInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 odoMetro = 1;
  if (this->_internal_odometro() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_odometro());
  }

  // uint32 enduranceMileage = 2;
  if (this->_internal_endurancemileage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_endurancemileage());
  }

  // uint32 speed = 3;
  if (this->_internal_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_speed());
  }

  // uint32 revSpeed = 4;
  if (this->_internal_revspeed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_revspeed());
  }

  // .StatusNS.GearPosition gearPosition = 5;
  if (this->_internal_gearposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gearposition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HmiInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HmiInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HmiInfo::GetClassData() const { return &_class_data_; }

void HmiInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HmiInfo *>(to)->MergeFrom(
      static_cast<const HmiInfo &>(from));
}


void HmiInfo::MergeFrom(const HmiInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.HmiInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_odometro() != 0) {
    _internal_set_odometro(from._internal_odometro());
  }
  if (from._internal_endurancemileage() != 0) {
    _internal_set_endurancemileage(from._internal_endurancemileage());
  }
  if (from._internal_speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from._internal_revspeed() != 0) {
    _internal_set_revspeed(from._internal_revspeed());
  }
  if (from._internal_gearposition() != 0) {
    _internal_set_gearposition(from._internal_gearposition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HmiInfo::CopyFrom(const HmiInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.HmiInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiInfo::IsInitialized() const {
  return true;
}

void HmiInfo::InternalSwap(HmiInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HmiInfo, gearposition_)
      + sizeof(HmiInfo::gearposition_)
      - PROTOBUF_FIELD_OFFSET(HmiInfo, odometro_)>(
          reinterpret_cast<char*>(&odometro_),
          reinterpret_cast<char*>(&other->odometro_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HmiInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[1]);
}

// ===================================================================

class BmsSKInfo::_Internal {
 public:
};

BmsSKInfo::BmsSKInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.BmsSKInfo)
}
BmsSKInfo::BmsSKInfo(const BmsSKInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bmsvoltage_, &from.bmsvoltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&bmstemp_) -
    reinterpret_cast<char*>(&bmsvoltage_)) + sizeof(bmstemp_));
  // @@protoc_insertion_point(copy_constructor:StatusNS.BmsSKInfo)
}

inline void BmsSKInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bmsvoltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bmstemp_) -
    reinterpret_cast<char*>(&bmsvoltage_)) + sizeof(bmstemp_));
}

BmsSKInfo::~BmsSKInfo() {
  // @@protoc_insertion_point(destructor:StatusNS.BmsSKInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BmsSKInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BmsSKInfo::ArenaDtor(void* object) {
  BmsSKInfo* _this = reinterpret_cast< BmsSKInfo* >(object);
  (void)_this;
}
void BmsSKInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BmsSKInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BmsSKInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.BmsSKInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bmsvoltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bmstemp_) -
      reinterpret_cast<char*>(&bmsvoltage_)) + sizeof(bmstemp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BmsSKInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bmsVoltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bmsvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bmsElectric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bmselectric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bmsSOC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          bmssoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bmsTemp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bmstemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BmsSKInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.BmsSKInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bmsVoltage = 1;
  if (this->_internal_bmsvoltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bmsvoltage(), target);
  }

  // uint32 bmsElectric = 2;
  if (this->_internal_bmselectric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bmselectric(), target);
  }

  // uint32 bmsSOC = 3;
  if (this->_internal_bmssoc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bmssoc(), target);
  }

  // uint32 bmsTemp = 4;
  if (this->_internal_bmstemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bmstemp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.BmsSKInfo)
  return target;
}

size_t BmsSKInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.BmsSKInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bmsVoltage = 1;
  if (this->_internal_bmsvoltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmsvoltage());
  }

  // uint32 bmsElectric = 2;
  if (this->_internal_bmselectric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmselectric());
  }

  // uint32 bmsSOC = 3;
  if (this->_internal_bmssoc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmssoc());
  }

  // uint32 bmsTemp = 4;
  if (this->_internal_bmstemp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmstemp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BmsSKInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BmsSKInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BmsSKInfo::GetClassData() const { return &_class_data_; }

void BmsSKInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BmsSKInfo *>(to)->MergeFrom(
      static_cast<const BmsSKInfo &>(from));
}


void BmsSKInfo::MergeFrom(const BmsSKInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.BmsSKInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bmsvoltage() != 0) {
    _internal_set_bmsvoltage(from._internal_bmsvoltage());
  }
  if (from._internal_bmselectric() != 0) {
    _internal_set_bmselectric(from._internal_bmselectric());
  }
  if (from._internal_bmssoc() != 0) {
    _internal_set_bmssoc(from._internal_bmssoc());
  }
  if (from._internal_bmstemp() != 0) {
    _internal_set_bmstemp(from._internal_bmstemp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BmsSKInfo::CopyFrom(const BmsSKInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.BmsSKInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmsSKInfo::IsInitialized() const {
  return true;
}

void BmsSKInfo::InternalSwap(BmsSKInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BmsSKInfo, bmstemp_)
      + sizeof(BmsSKInfo::bmstemp_)
      - PROTOBUF_FIELD_OFFSET(BmsSKInfo, bmsvoltage_)>(
          reinterpret_cast<char*>(&bmsvoltage_),
          reinterpret_cast<char*>(&other->bmsvoltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BmsSKInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[2]);
}

// ===================================================================

class BmsInfo::_Internal {
 public:
};

BmsInfo::BmsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.BmsInfo)
}
BmsInfo::BmsInfo(const BmsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bmsvoltage_, &from.bmsvoltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&bmstemp_) -
    reinterpret_cast<char*>(&bmsvoltage_)) + sizeof(bmstemp_));
  // @@protoc_insertion_point(copy_constructor:StatusNS.BmsInfo)
}

inline void BmsInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bmsvoltage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bmstemp_) -
    reinterpret_cast<char*>(&bmsvoltage_)) + sizeof(bmstemp_));
}

BmsInfo::~BmsInfo() {
  // @@protoc_insertion_point(destructor:StatusNS.BmsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BmsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BmsInfo::ArenaDtor(void* object) {
  BmsInfo* _this = reinterpret_cast< BmsInfo* >(object);
  (void)_this;
}
void BmsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BmsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BmsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.BmsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bmsvoltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bmstemp_) -
      reinterpret_cast<char*>(&bmsvoltage_)) + sizeof(bmstemp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BmsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bmsVoltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bmsvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bmsElectric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bmselectric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bmsSOC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          bmssoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bmsTemp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bmstemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BmsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.BmsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bmsVoltage = 1;
  if (this->_internal_bmsvoltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bmsvoltage(), target);
  }

  // uint32 bmsElectric = 2;
  if (this->_internal_bmselectric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bmselectric(), target);
  }

  // uint32 bmsSOC = 3;
  if (this->_internal_bmssoc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bmssoc(), target);
  }

  // uint32 bmsTemp = 4;
  if (this->_internal_bmstemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bmstemp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.BmsInfo)
  return target;
}

size_t BmsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.BmsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bmsVoltage = 1;
  if (this->_internal_bmsvoltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmsvoltage());
  }

  // uint32 bmsElectric = 2;
  if (this->_internal_bmselectric() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmselectric());
  }

  // uint32 bmsSOC = 3;
  if (this->_internal_bmssoc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmssoc());
  }

  // uint32 bmsTemp = 4;
  if (this->_internal_bmstemp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bmstemp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BmsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BmsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BmsInfo::GetClassData() const { return &_class_data_; }

void BmsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BmsInfo *>(to)->MergeFrom(
      static_cast<const BmsInfo &>(from));
}


void BmsInfo::MergeFrom(const BmsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.BmsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bmsvoltage() != 0) {
    _internal_set_bmsvoltage(from._internal_bmsvoltage());
  }
  if (from._internal_bmselectric() != 0) {
    _internal_set_bmselectric(from._internal_bmselectric());
  }
  if (from._internal_bmssoc() != 0) {
    _internal_set_bmssoc(from._internal_bmssoc());
  }
  if (from._internal_bmstemp() != 0) {
    _internal_set_bmstemp(from._internal_bmstemp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BmsInfo::CopyFrom(const BmsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.BmsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BmsInfo::IsInitialized() const {
  return true;
}

void BmsInfo::InternalSwap(BmsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BmsInfo, bmstemp_)
      + sizeof(BmsInfo::bmstemp_)
      - PROTOBUF_FIELD_OFFSET(BmsInfo, bmsvoltage_)>(
          reinterpret_cast<char*>(&bmsvoltage_),
          reinterpret_cast<char*>(&other->bmsvoltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BmsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[3]);
}

// ===================================================================

class TboxSKInfo::_Internal {
 public:
};

TboxSKInfo::TboxSKInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  caninfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.TboxSKInfo)
}
TboxSKInfo::TboxSKInfo(const TboxSKInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      caninfo_(from.caninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  ::memcpy(&kl15_, &from.kl15_,
    static_cast<size_t>(reinterpret_cast<char*>(&sharpturncount_) -
    reinterpret_cast<char*>(&kl15_)) + sizeof(sharpturncount_));
  // @@protoc_insertion_point(copy_constructor:StatusNS.TboxSKInfo)
}

inline void TboxSKInfo::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kl15_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sharpturncount_) -
    reinterpret_cast<char*>(&kl15_)) + sizeof(sharpturncount_));
}

TboxSKInfo::~TboxSKInfo() {
  // @@protoc_insertion_point(destructor:StatusNS.TboxSKInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TboxSKInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TboxSKInfo::ArenaDtor(void* object) {
  TboxSKInfo* _this = reinterpret_cast< TboxSKInfo* >(object);
  (void)_this;
}
void TboxSKInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TboxSKInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TboxSKInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.TboxSKInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caninfo_.Clear();
  location_.ClearToEmpty();
  ::memset(&kl15_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sharpturncount_) -
      reinterpret_cast<char*>(&kl15_)) + sizeof(sharpturncount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TboxSKInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool kl15 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          kl15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 kl30 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          kl30_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batteryVoltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          batteryvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 csq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          csq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StatusNS.CanInfo canInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_caninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rapidAccelerationCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rapidaccelerationcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rapidDecelerationCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          rapiddecelerationcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 emergencyBrakeCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          emergencybrakecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sharpTurnCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          sharpturncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TboxSKInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.TboxSKInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool kl15 = 1;
  if (this->_internal_kl15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_kl15(), target);
  }

  // uint32 kl30 = 2;
  if (this->_internal_kl30() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kl30(), target);
  }

  // uint32 batteryVoltage = 3;
  if (this->_internal_batteryvoltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batteryvoltage(), target);
  }

  // uint32 csq = 4;
  if (this->_internal_csq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_csq(), target);
  }

  // repeated .StatusNS.CanInfo canInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_caninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_caninfo(i), target, stream);
  }

  // bytes location = 6;
  if (!this->_internal_location().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_location(), target);
  }

  // uint32 rapidAccelerationCount = 7;
  if (this->_internal_rapidaccelerationcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rapidaccelerationcount(), target);
  }

  // uint32 rapidDecelerationCount = 8;
  if (this->_internal_rapiddecelerationcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rapiddecelerationcount(), target);
  }

  // uint32 emergencyBrakeCount = 9;
  if (this->_internal_emergencybrakecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_emergencybrakecount(), target);
  }

  // uint32 sharpTurnCount = 10;
  if (this->_internal_sharpturncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sharpturncount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.TboxSKInfo)
  return target;
}

size_t TboxSKInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.TboxSKInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StatusNS.CanInfo canInfo = 5;
  total_size += 1UL * this->_internal_caninfo_size();
  for (const auto& msg : this->caninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes location = 6;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_location());
  }

  // bool kl15 = 1;
  if (this->_internal_kl15() != 0) {
    total_size += 1 + 1;
  }

  // uint32 kl30 = 2;
  if (this->_internal_kl30() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_kl30());
  }

  // uint32 batteryVoltage = 3;
  if (this->_internal_batteryvoltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batteryvoltage());
  }

  // uint32 csq = 4;
  if (this->_internal_csq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_csq());
  }

  // uint32 rapidAccelerationCount = 7;
  if (this->_internal_rapidaccelerationcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rapidaccelerationcount());
  }

  // uint32 rapidDecelerationCount = 8;
  if (this->_internal_rapiddecelerationcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rapiddecelerationcount());
  }

  // uint32 emergencyBrakeCount = 9;
  if (this->_internal_emergencybrakecount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_emergencybrakecount());
  }

  // uint32 sharpTurnCount = 10;
  if (this->_internal_sharpturncount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sharpturncount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TboxSKInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TboxSKInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TboxSKInfo::GetClassData() const { return &_class_data_; }

void TboxSKInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TboxSKInfo *>(to)->MergeFrom(
      static_cast<const TboxSKInfo &>(from));
}


void TboxSKInfo::MergeFrom(const TboxSKInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.TboxSKInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  caninfo_.MergeFrom(from.caninfo_);
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (from._internal_kl15() != 0) {
    _internal_set_kl15(from._internal_kl15());
  }
  if (from._internal_kl30() != 0) {
    _internal_set_kl30(from._internal_kl30());
  }
  if (from._internal_batteryvoltage() != 0) {
    _internal_set_batteryvoltage(from._internal_batteryvoltage());
  }
  if (from._internal_csq() != 0) {
    _internal_set_csq(from._internal_csq());
  }
  if (from._internal_rapidaccelerationcount() != 0) {
    _internal_set_rapidaccelerationcount(from._internal_rapidaccelerationcount());
  }
  if (from._internal_rapiddecelerationcount() != 0) {
    _internal_set_rapiddecelerationcount(from._internal_rapiddecelerationcount());
  }
  if (from._internal_emergencybrakecount() != 0) {
    _internal_set_emergencybrakecount(from._internal_emergencybrakecount());
  }
  if (from._internal_sharpturncount() != 0) {
    _internal_set_sharpturncount(from._internal_sharpturncount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TboxSKInfo::CopyFrom(const TboxSKInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.TboxSKInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TboxSKInfo::IsInitialized() const {
  return true;
}

void TboxSKInfo::InternalSwap(TboxSKInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  caninfo_.InternalSwap(&other->caninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TboxSKInfo, sharpturncount_)
      + sizeof(TboxSKInfo::sharpturncount_)
      - PROTOBUF_FIELD_OFFSET(TboxSKInfo, kl15_)>(
          reinterpret_cast<char*>(&kl15_),
          reinterpret_cast<char*>(&other->kl15_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TboxSKInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[4]);
}

// ===================================================================

class TboxInfo::_Internal {
 public:
};

TboxInfo::TboxInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  caninfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.TboxInfo)
}
TboxInfo::TboxInfo(const TboxInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      caninfo_(from.caninfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  ::memcpy(&kl15_, &from.kl15_,
    static_cast<size_t>(reinterpret_cast<char*>(&sharpturncount_) -
    reinterpret_cast<char*>(&kl15_)) + sizeof(sharpturncount_));
  // @@protoc_insertion_point(copy_constructor:StatusNS.TboxInfo)
}

inline void TboxInfo::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kl15_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sharpturncount_) -
    reinterpret_cast<char*>(&kl15_)) + sizeof(sharpturncount_));
}

TboxInfo::~TboxInfo() {
  // @@protoc_insertion_point(destructor:StatusNS.TboxInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TboxInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TboxInfo::ArenaDtor(void* object) {
  TboxInfo* _this = reinterpret_cast< TboxInfo* >(object);
  (void)_this;
}
void TboxInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TboxInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TboxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.TboxInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caninfo_.Clear();
  location_.ClearToEmpty();
  ::memset(&kl15_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sharpturncount_) -
      reinterpret_cast<char*>(&kl15_)) + sizeof(sharpturncount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TboxInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool kl15 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          kl15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 kl30 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          kl30_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batteryVoltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          batteryvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 csq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          csq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StatusNS.CanInfo canInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_caninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rapidAccelerationCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rapidaccelerationcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rapidDecelerationCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          rapiddecelerationcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 emergencyBrakeCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          emergencybrakecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sharpTurnCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          sharpturncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TboxInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.TboxInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool kl15 = 1;
  if (this->_internal_kl15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_kl15(), target);
  }

  // uint32 kl30 = 2;
  if (this->_internal_kl30() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kl30(), target);
  }

  // uint32 batteryVoltage = 3;
  if (this->_internal_batteryvoltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batteryvoltage(), target);
  }

  // uint32 csq = 4;
  if (this->_internal_csq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_csq(), target);
  }

  // repeated .StatusNS.CanInfo canInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_caninfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_caninfo(i), target, stream);
  }

  // bytes location = 6;
  if (!this->_internal_location().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_location(), target);
  }

  // uint32 rapidAccelerationCount = 7;
  if (this->_internal_rapidaccelerationcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rapidaccelerationcount(), target);
  }

  // uint32 rapidDecelerationCount = 8;
  if (this->_internal_rapiddecelerationcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rapiddecelerationcount(), target);
  }

  // uint32 emergencyBrakeCount = 9;
  if (this->_internal_emergencybrakecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_emergencybrakecount(), target);
  }

  // uint32 sharpTurnCount = 10;
  if (this->_internal_sharpturncount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sharpturncount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.TboxInfo)
  return target;
}

size_t TboxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.TboxInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StatusNS.CanInfo canInfo = 5;
  total_size += 1UL * this->_internal_caninfo_size();
  for (const auto& msg : this->caninfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes location = 6;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_location());
  }

  // bool kl15 = 1;
  if (this->_internal_kl15() != 0) {
    total_size += 1 + 1;
  }

  // uint32 kl30 = 2;
  if (this->_internal_kl30() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_kl30());
  }

  // uint32 batteryVoltage = 3;
  if (this->_internal_batteryvoltage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_batteryvoltage());
  }

  // uint32 csq = 4;
  if (this->_internal_csq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_csq());
  }

  // uint32 rapidAccelerationCount = 7;
  if (this->_internal_rapidaccelerationcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rapidaccelerationcount());
  }

  // uint32 rapidDecelerationCount = 8;
  if (this->_internal_rapiddecelerationcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rapiddecelerationcount());
  }

  // uint32 emergencyBrakeCount = 9;
  if (this->_internal_emergencybrakecount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_emergencybrakecount());
  }

  // uint32 sharpTurnCount = 10;
  if (this->_internal_sharpturncount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sharpturncount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TboxInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TboxInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TboxInfo::GetClassData() const { return &_class_data_; }

void TboxInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TboxInfo *>(to)->MergeFrom(
      static_cast<const TboxInfo &>(from));
}


void TboxInfo::MergeFrom(const TboxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.TboxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  caninfo_.MergeFrom(from.caninfo_);
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (from._internal_kl15() != 0) {
    _internal_set_kl15(from._internal_kl15());
  }
  if (from._internal_kl30() != 0) {
    _internal_set_kl30(from._internal_kl30());
  }
  if (from._internal_batteryvoltage() != 0) {
    _internal_set_batteryvoltage(from._internal_batteryvoltage());
  }
  if (from._internal_csq() != 0) {
    _internal_set_csq(from._internal_csq());
  }
  if (from._internal_rapidaccelerationcount() != 0) {
    _internal_set_rapidaccelerationcount(from._internal_rapidaccelerationcount());
  }
  if (from._internal_rapiddecelerationcount() != 0) {
    _internal_set_rapiddecelerationcount(from._internal_rapiddecelerationcount());
  }
  if (from._internal_emergencybrakecount() != 0) {
    _internal_set_emergencybrakecount(from._internal_emergencybrakecount());
  }
  if (from._internal_sharpturncount() != 0) {
    _internal_set_sharpturncount(from._internal_sharpturncount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TboxInfo::CopyFrom(const TboxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.TboxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TboxInfo::IsInitialized() const {
  return true;
}

void TboxInfo::InternalSwap(TboxInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  caninfo_.InternalSwap(&other->caninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TboxInfo, sharpturncount_)
      + sizeof(TboxInfo::sharpturncount_)
      - PROTOBUF_FIELD_OFFSET(TboxInfo, kl15_)>(
          reinterpret_cast<char*>(&kl15_),
          reinterpret_cast<char*>(&other->kl15_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TboxInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[5]);
}

// ===================================================================

class TpmsInfo::_Internal {
 public:
};

TpmsInfo::TpmsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.TpmsInfo)
}
TpmsInfo::TpmsInfo(const TpmsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fronttiertemp_, &from.fronttiertemp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&fronttiertemp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:StatusNS.TpmsInfo)
}

inline void TpmsInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fronttiertemp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&fronttiertemp_)) + sizeof(status_));
}

TpmsInfo::~TpmsInfo() {
  // @@protoc_insertion_point(destructor:StatusNS.TpmsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TpmsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TpmsInfo::ArenaDtor(void* object) {
  TpmsInfo* _this = reinterpret_cast< TpmsInfo* >(object);
  (void)_this;
}
void TpmsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TpmsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TpmsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.TpmsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fronttiertemp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&fronttiertemp_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TpmsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 frontTierTemp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          fronttiertemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rearTireTemp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          reartiretemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frontTirePressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fronttirepressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rearTirePressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          reartirepressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TpmsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.TpmsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frontTierTemp = 1;
  if (this->_internal_fronttiertemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fronttiertemp(), target);
  }

  // int32 rearTireTemp = 2;
  if (this->_internal_reartiretemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reartiretemp(), target);
  }

  // int32 frontTirePressure = 3;
  if (this->_internal_fronttirepressure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fronttirepressure(), target);
  }

  // int32 rearTirePressure = 4;
  if (this->_internal_reartirepressure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reartirepressure(), target);
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.TpmsInfo)
  return target;
}

size_t TpmsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.TpmsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 frontTierTemp = 1;
  if (this->_internal_fronttiertemp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fronttiertemp());
  }

  // int32 rearTireTemp = 2;
  if (this->_internal_reartiretemp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reartiretemp());
  }

  // int32 frontTirePressure = 3;
  if (this->_internal_fronttirepressure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fronttirepressure());
  }

  // int32 rearTirePressure = 4;
  if (this->_internal_reartirepressure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reartirepressure());
  }

  // uint32 status = 5;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TpmsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TpmsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TpmsInfo::GetClassData() const { return &_class_data_; }

void TpmsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TpmsInfo *>(to)->MergeFrom(
      static_cast<const TpmsInfo &>(from));
}


void TpmsInfo::MergeFrom(const TpmsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.TpmsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fronttiertemp() != 0) {
    _internal_set_fronttiertemp(from._internal_fronttiertemp());
  }
  if (from._internal_reartiretemp() != 0) {
    _internal_set_reartiretemp(from._internal_reartiretemp());
  }
  if (from._internal_fronttirepressure() != 0) {
    _internal_set_fronttirepressure(from._internal_fronttirepressure());
  }
  if (from._internal_reartirepressure() != 0) {
    _internal_set_reartirepressure(from._internal_reartirepressure());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TpmsInfo::CopyFrom(const TpmsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.TpmsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TpmsInfo::IsInitialized() const {
  return true;
}

void TpmsInfo::InternalSwap(TpmsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TpmsInfo, status_)
      + sizeof(TpmsInfo::status_)
      - PROTOBUF_FIELD_OFFSET(TpmsInfo, fronttiertemp_)>(
          reinterpret_cast<char*>(&fronttiertemp_),
          reinterpret_cast<char*>(&other->fronttiertemp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TpmsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[6]);
}

// ===================================================================

class CanInfo::_Internal {
 public:
};

CanInfo::CanInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatusNS.CanInfo)
}
CanInfo::CanInfo(const CanInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&canchannel_, &from.canchannel_,
    static_cast<size_t>(reinterpret_cast<char*>(&recvnum_) -
    reinterpret_cast<char*>(&canchannel_)) + sizeof(recvnum_));
  // @@protoc_insertion_point(copy_constructor:StatusNS.CanInfo)
}

inline void CanInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&canchannel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recvnum_) -
    reinterpret_cast<char*>(&canchannel_)) + sizeof(recvnum_));
}

CanInfo::~CanInfo() {
  // @@protoc_insertion_point(destructor:StatusNS.CanInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CanInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CanInfo::ArenaDtor(void* object) {
  CanInfo* _this = reinterpret_cast< CanInfo* >(object);
  (void)_this;
}
void CanInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CanInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusNS.CanInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&canchannel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recvnum_) -
      reinterpret_cast<char*>(&canchannel_)) + sizeof(recvnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 canChannel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          canchannel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool busOff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          busoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool noAck = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          noack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sendNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sendnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 recvNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          recvnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusNS.CanInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 canChannel = 1;
  if (this->_internal_canchannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_canchannel(), target);
  }

  // bool busOff = 2;
  if (this->_internal_busoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_busoff(), target);
  }

  // bool noAck = 3;
  if (this->_internal_noack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_noack(), target);
  }

  // uint32 sendNum = 4;
  if (this->_internal_sendnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sendnum(), target);
  }

  // uint32 recvNum = 5;
  if (this->_internal_recvnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_recvnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusNS.CanInfo)
  return target;
}

size_t CanInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusNS.CanInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 canChannel = 1;
  if (this->_internal_canchannel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_canchannel());
  }

  // bool busOff = 2;
  if (this->_internal_busoff() != 0) {
    total_size += 1 + 1;
  }

  // bool noAck = 3;
  if (this->_internal_noack() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sendNum = 4;
  if (this->_internal_sendnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sendnum());
  }

  // uint32 recvNum = 5;
  if (this->_internal_recvnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_recvnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CanInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanInfo::GetClassData() const { return &_class_data_; }

void CanInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CanInfo *>(to)->MergeFrom(
      static_cast<const CanInfo &>(from));
}


void CanInfo::MergeFrom(const CanInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusNS.CanInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_canchannel() != 0) {
    _internal_set_canchannel(from._internal_canchannel());
  }
  if (from._internal_busoff() != 0) {
    _internal_set_busoff(from._internal_busoff());
  }
  if (from._internal_noack() != 0) {
    _internal_set_noack(from._internal_noack());
  }
  if (from._internal_sendnum() != 0) {
    _internal_set_sendnum(from._internal_sendnum());
  }
  if (from._internal_recvnum() != 0) {
    _internal_set_recvnum(from._internal_recvnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanInfo::CopyFrom(const CanInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusNS.CanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanInfo::IsInitialized() const {
  return true;
}

void CanInfo::InternalSwap(CanInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanInfo, recvnum_)
      + sizeof(CanInfo::recvnum_)
      - PROTOBUF_FIELD_OFFSET(CanInfo, canchannel_)>(
          reinterpret_cast<char*>(&canchannel_),
          reinterpret_cast<char*>(&other->canchannel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_status_2eproto_getter, &descriptor_table_status_2eproto_once,
      file_level_metadata_status_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace StatusNS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StatusNS::Status* Arena::CreateMaybeMessage< ::StatusNS::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusNS::HmiInfo* Arena::CreateMaybeMessage< ::StatusNS::HmiInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::HmiInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusNS::BmsSKInfo* Arena::CreateMaybeMessage< ::StatusNS::BmsSKInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::BmsSKInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusNS::BmsInfo* Arena::CreateMaybeMessage< ::StatusNS::BmsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::BmsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusNS::TboxSKInfo* Arena::CreateMaybeMessage< ::StatusNS::TboxSKInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::TboxSKInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusNS::TboxInfo* Arena::CreateMaybeMessage< ::StatusNS::TboxInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::TboxInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusNS::TpmsInfo* Arena::CreateMaybeMessage< ::StatusNS::TpmsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::TpmsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusNS::CanInfo* Arena::CreateMaybeMessage< ::StatusNS::CanInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusNS::CanInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
