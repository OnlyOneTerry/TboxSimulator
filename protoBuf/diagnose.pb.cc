// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnose.proto

#include "diagnose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace DiagnoseNS {
constexpr Diagnose::Diagnose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , readdid_(nullptr)
  , writedid_(nullptr)
  , readdtc_(nullptr)
  , cleandtc_(nullptr)
  , diagecuaddr_(nullptr)
  , diagnoseopt_(0)
{}
struct DiagnoseDefaultTypeInternal {
  constexpr DiagnoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiagnoseDefaultTypeInternal() {}
  union {
    Diagnose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiagnoseDefaultTypeInternal _Diagnose_default_instance_;
constexpr ReadDID::ReadDID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : readdidcontent_()
  , diagnoseresultcode_(0)
{}
struct ReadDIDDefaultTypeInternal {
  constexpr ReadDIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadDIDDefaultTypeInternal() {}
  union {
    ReadDID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadDIDDefaultTypeInternal _ReadDID_default_instance_;
constexpr WriteDID::WriteDID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : writedidcontent_()
  , diagnoseresultcode_(0)
{}
struct WriteDIDDefaultTypeInternal {
  constexpr WriteDIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteDIDDefaultTypeInternal() {}
  union {
    WriteDID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteDIDDefaultTypeInternal _WriteDID_default_instance_;
constexpr ReadDTC::ReadDTC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ecu_()
  , _ecu_cached_byte_size_(0)
  , ecudtc_()
  , diagnoseresultcode_(0)
{}
struct ReadDTCDefaultTypeInternal {
  constexpr ReadDTCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadDTCDefaultTypeInternal() {}
  union {
    ReadDTC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadDTCDefaultTypeInternal _ReadDTC_default_instance_;
constexpr EcuDTC::EcuDTC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diagnosecode_()
  , ecu_(0)
{}
struct EcuDTCDefaultTypeInternal {
  constexpr EcuDTCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EcuDTCDefaultTypeInternal() {}
  union {
    EcuDTC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EcuDTCDefaultTypeInternal _EcuDTC_default_instance_;
constexpr CleanDTC::CleanDTC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ecu_()
  , _ecu_cached_byte_size_(0)
  , diagnoseresultcode_(0)
{}
struct CleanDTCDefaultTypeInternal {
  constexpr CleanDTCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CleanDTCDefaultTypeInternal() {}
  union {
    CleanDTC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CleanDTCDefaultTypeInternal _CleanDTC_default_instance_;
constexpr DiagEcuAddr::DiagEcuAddr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ecuaddr_()
  , ecuaddrdtc_()
  , diagnoseresultcode_(0)
{}
struct DiagEcuAddrDefaultTypeInternal {
  constexpr DiagEcuAddrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiagEcuAddrDefaultTypeInternal() {}
  union {
    DiagEcuAddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiagEcuAddrDefaultTypeInternal _DiagEcuAddr_default_instance_;
constexpr EcuAddrDTC::EcuAddrDTC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diagnosecode_()
  , ecuaddr_(nullptr){}
struct EcuAddrDTCDefaultTypeInternal {
  constexpr EcuAddrDTCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EcuAddrDTCDefaultTypeInternal() {}
  union {
    EcuAddrDTC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EcuAddrDTCDefaultTypeInternal _EcuAddrDTC_default_instance_;
constexpr EcuAddr::EcuAddr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ecuaddrtx_(0u)
  , ecuaddrrx_(0u){}
struct EcuAddrDefaultTypeInternal {
  constexpr EcuAddrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EcuAddrDefaultTypeInternal() {}
  union {
    EcuAddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EcuAddrDefaultTypeInternal _EcuAddr_default_instance_;
constexpr DIDContent::DIDContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : diagdid_()
  , ecu_(0)
{}
struct DIDContentDefaultTypeInternal {
  constexpr DIDContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DIDContentDefaultTypeInternal() {}
  union {
    DIDContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DIDContentDefaultTypeInternal _DIDContent_default_instance_;
constexpr DiagDID::DiagDID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : didvalue_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , did_(0u){}
struct DiagDIDDefaultTypeInternal {
  constexpr DiagDIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiagDIDDefaultTypeInternal() {}
  union {
    DiagDID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiagDIDDefaultTypeInternal _DiagDID_default_instance_;
}  // namespace DiagnoseNS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_diagnose_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_diagnose_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_diagnose_2eproto = nullptr;

const uint32_t TableStruct_diagnose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, taskid_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, diagnoseopt_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, readdid_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, writedid_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, readdtc_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, cleandtc_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::Diagnose, diagecuaddr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::ReadDID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::ReadDID, readdidcontent_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::ReadDID, diagnoseresultcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::WriteDID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::WriteDID, writedidcontent_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::WriteDID, diagnoseresultcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::ReadDTC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::ReadDTC, ecu_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::ReadDTC, ecudtc_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::ReadDTC, diagnoseresultcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuDTC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuDTC, ecu_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuDTC, diagnosecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::CleanDTC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::CleanDTC, ecu_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::CleanDTC, diagnoseresultcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DiagEcuAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DiagEcuAddr, ecuaddr_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DiagEcuAddr, ecuaddrdtc_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DiagEcuAddr, diagnoseresultcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuAddrDTC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuAddrDTC, ecuaddr_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuAddrDTC, diagnosecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuAddr, ecuaddrtx_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::EcuAddr, ecuaddrrx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DIDContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DIDContent, ecu_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DIDContent, diagdid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DiagDID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DiagDID, did_),
  PROTOBUF_FIELD_OFFSET(::DiagnoseNS::DiagDID, didvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DiagnoseNS::Diagnose)},
  { 13, -1, -1, sizeof(::DiagnoseNS::ReadDID)},
  { 21, -1, -1, sizeof(::DiagnoseNS::WriteDID)},
  { 29, -1, -1, sizeof(::DiagnoseNS::ReadDTC)},
  { 38, -1, -1, sizeof(::DiagnoseNS::EcuDTC)},
  { 46, -1, -1, sizeof(::DiagnoseNS::CleanDTC)},
  { 54, -1, -1, sizeof(::DiagnoseNS::DiagEcuAddr)},
  { 63, -1, -1, sizeof(::DiagnoseNS::EcuAddrDTC)},
  { 71, -1, -1, sizeof(::DiagnoseNS::EcuAddr)},
  { 79, -1, -1, sizeof(::DiagnoseNS::DIDContent)},
  { 87, -1, -1, sizeof(::DiagnoseNS::DiagDID)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_Diagnose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_ReadDID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_WriteDID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_ReadDTC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_EcuDTC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_CleanDTC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_DiagEcuAddr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_EcuAddrDTC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_EcuAddr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_DIDContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DiagnoseNS::_DiagDID_default_instance_),
};

const char descriptor_table_protodef_diagnose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016diagnose.proto\022\nDiagnoseNS\"\222\002\n\010Diagnos"
  "e\022\016\n\006taskID\030\001 \001(\t\022,\n\013diagnoseOpt\030\002 \001(\0162\027"
  ".DiagnoseNS.DiagnoseOpt\022$\n\007readDID\030\003 \001(\013"
  "2\023.DiagnoseNS.ReadDID\022&\n\010writeDID\030\004 \001(\0132"
  "\024.DiagnoseNS.WriteDID\022$\n\007readDTC\030\005 \001(\0132\023"
  ".DiagnoseNS.ReadDTC\022&\n\010cleanDTC\030\006 \001(\0132\024."
  "DiagnoseNS.CleanDTC\022,\n\013diagEcuAddr\030\007 \001(\013"
  "2\027.DiagnoseNS.DiagEcuAddr\"u\n\007ReadDID\022.\n\016"
  "readDIDContent\030\001 \003(\0132\026.DiagnoseNS.DIDCon"
  "tent\022:\n\022diagnoseResultCode\030\002 \001(\0162\036.Diagn"
  "oseNS.DiagnoseResultCode\"w\n\010WriteDID\022/\n\017"
  "writeDIDContent\030\001 \003(\0132\026.DiagnoseNS.DIDCo"
  "ntent\022:\n\022diagnoseResultCode\030\002 \001(\0162\036.Diag"
  "noseNS.DiagnoseResultCode\"\210\001\n\007ReadDTC\022\035\n"
  "\003ecu\030\001 \003(\0162\020.DiagnoseNS.Ecus\022\"\n\006ecuDTC\030\002"
  " \003(\0132\022.DiagnoseNS.EcuDTC\022:\n\022diagnoseResu"
  "ltCode\030\003 \001(\0162\036.DiagnoseNS.DiagnoseResult"
  "Code\"=\n\006EcuDTC\022\035\n\003ecu\030\001 \001(\0162\020.DiagnoseNS"
  ".Ecus\022\024\n\014diagnoseCode\030\002 \003(\t\"e\n\010CleanDTC\022"
  "\035\n\003ecu\030\001 \003(\0162\020.DiagnoseNS.Ecus\022:\n\022diagno"
  "seResultCode\030\002 \001(\0162\036.DiagnoseNS.Diagnose"
  "ResultCode\"\233\001\n\013DiagEcuAddr\022$\n\007ecuAddr\030\001 "
  "\003(\0132\023.DiagnoseNS.EcuAddr\022*\n\necuAddrDTC\030\002"
  " \003(\0132\026.DiagnoseNS.EcuAddrDTC\022:\n\022diagnose"
  "ResultCode\030\003 \001(\0162\036.DiagnoseNS.DiagnoseRe"
  "sultCode\"H\n\nEcuAddrDTC\022$\n\007ecuAddr\030\001 \001(\0132"
  "\023.DiagnoseNS.EcuAddr\022\024\n\014diagnoseCode\030\002 \003"
  "(\t\"/\n\007EcuAddr\022\021\n\tecuAddrTx\030\001 \001(\r\022\021\n\tecuA"
  "ddrRx\030\002 \001(\r\"Q\n\nDIDContent\022\035\n\003ecu\030\001 \001(\0162\020"
  ".DiagnoseNS.Ecus\022$\n\007diagDID\030\002 \003(\0132\023.Diag"
  "noseNS.DiagDID\"(\n\007DiagDID\022\013\n\003did\030\001 \001(\r\022\020"
  "\n\010didValue\030\002 \001(\014*b\n\013DiagnoseOpt\022\013\n\007INVAL"
  "ID\020\000\022\014\n\010READ_DTC\020\001\022\r\n\tCLEAN_DTC\020\002\022\014\n\010REA"
  "D_DID\020\003\022\r\n\tWRITE_DID\020\004\022\014\n\010ECU_ADDR\020\005*\222\002\n"
  "\004Ecus\022\n\n\006Unknow\020\000\022\010\n\004Tbox\020\001\022\007\n\003Bms\020\002\022\007\n\003"
  "Mcu\020\003\022\010\n\004Dcdc\020\004\022\007\n\003Abs\020\005\022\007\n\003Scm\020\006\022\007\n\003Inv"
  "\020\007\022\010\n\004Ofbc\020\010\022\007\n\003Imu\020\t\022\007\n\003Tft\020\n\022\010\n\004Lcsc\020\013"
  "\022\010\n\004Rcsc\020\014\022\007\n\003Flm\020\r\022\007\n\003Hlc\020\016\022\007\n\003Wpc\020\017\022\007\n"
  "\003Dik\020\020\022\010\n\004Lpdc\020\021\022\010\n\004Tpms\020\022\022\010\n\004Cddc\020\023\022\007\n\003"
  "Gcu\020\024\022\007\n\003Vcu\020\025\022\007\n\003Hmi\020\026\022\007\n\003Obc\020\027\022\007\n\003Hhd\020"
  "\030\022\007\n\003Obd\020\031\022\n\n\006TboxSK\020\032\022\t\n\005BmsSK\020\033*\227\001\n\022Di"
  "agnoseResultCode\022\013\n\007SUCCESS\020\000\022\r\n\tLEN_ERR"
  "OR\020\001\022\021\n\rECU_NOT_MATCH\020\002\022\026\n\022DID_READ_NOT_"
  "EXIST\020\003\022\024\n\020ECU_ADDR_NO_RESP\020\004\022\007\n\003SNS\020\005\022\017"
  "\n\013PARAM_ERROR\020\006\022\n\n\006FAILED\020\007B\036\n\rcom.iov.p"
  "rotoB\rDiagnoseProtob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_diagnose_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diagnose_2eproto = {
  false, false, 1827, descriptor_table_protodef_diagnose_2eproto, "diagnose.proto", 
  &descriptor_table_diagnose_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_diagnose_2eproto::offsets,
  file_level_metadata_diagnose_2eproto, file_level_enum_descriptors_diagnose_2eproto, file_level_service_descriptors_diagnose_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_diagnose_2eproto_getter() {
  return &descriptor_table_diagnose_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_diagnose_2eproto(&descriptor_table_diagnose_2eproto);
namespace DiagnoseNS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiagnoseOpt_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_diagnose_2eproto);
  return file_level_enum_descriptors_diagnose_2eproto[0];
}
bool DiagnoseOpt_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ecus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_diagnose_2eproto);
  return file_level_enum_descriptors_diagnose_2eproto[1];
}
bool Ecus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiagnoseResultCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_diagnose_2eproto);
  return file_level_enum_descriptors_diagnose_2eproto[2];
}
bool DiagnoseResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Diagnose::_Internal {
 public:
  static const ::DiagnoseNS::ReadDID& readdid(const Diagnose* msg);
  static const ::DiagnoseNS::WriteDID& writedid(const Diagnose* msg);
  static const ::DiagnoseNS::ReadDTC& readdtc(const Diagnose* msg);
  static const ::DiagnoseNS::CleanDTC& cleandtc(const Diagnose* msg);
  static const ::DiagnoseNS::DiagEcuAddr& diagecuaddr(const Diagnose* msg);
};

const ::DiagnoseNS::ReadDID&
Diagnose::_Internal::readdid(const Diagnose* msg) {
  return *msg->readdid_;
}
const ::DiagnoseNS::WriteDID&
Diagnose::_Internal::writedid(const Diagnose* msg) {
  return *msg->writedid_;
}
const ::DiagnoseNS::ReadDTC&
Diagnose::_Internal::readdtc(const Diagnose* msg) {
  return *msg->readdtc_;
}
const ::DiagnoseNS::CleanDTC&
Diagnose::_Internal::cleandtc(const Diagnose* msg) {
  return *msg->cleandtc_;
}
const ::DiagnoseNS::DiagEcuAddr&
Diagnose::_Internal::diagecuaddr(const Diagnose* msg) {
  return *msg->diagecuaddr_;
}
Diagnose::Diagnose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.Diagnose)
}
Diagnose::Diagnose(const Diagnose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_readdid()) {
    readdid_ = new ::DiagnoseNS::ReadDID(*from.readdid_);
  } else {
    readdid_ = nullptr;
  }
  if (from._internal_has_writedid()) {
    writedid_ = new ::DiagnoseNS::WriteDID(*from.writedid_);
  } else {
    writedid_ = nullptr;
  }
  if (from._internal_has_readdtc()) {
    readdtc_ = new ::DiagnoseNS::ReadDTC(*from.readdtc_);
  } else {
    readdtc_ = nullptr;
  }
  if (from._internal_has_cleandtc()) {
    cleandtc_ = new ::DiagnoseNS::CleanDTC(*from.cleandtc_);
  } else {
    cleandtc_ = nullptr;
  }
  if (from._internal_has_diagecuaddr()) {
    diagecuaddr_ = new ::DiagnoseNS::DiagEcuAddr(*from.diagecuaddr_);
  } else {
    diagecuaddr_ = nullptr;
  }
  diagnoseopt_ = from.diagnoseopt_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.Diagnose)
}

inline void Diagnose::SharedCtor() {
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&readdid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&diagnoseopt_) -
    reinterpret_cast<char*>(&readdid_)) + sizeof(diagnoseopt_));
}

Diagnose::~Diagnose() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.Diagnose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Diagnose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete readdid_;
  if (this != internal_default_instance()) delete writedid_;
  if (this != internal_default_instance()) delete readdtc_;
  if (this != internal_default_instance()) delete cleandtc_;
  if (this != internal_default_instance()) delete diagecuaddr_;
}

void Diagnose::ArenaDtor(void* object) {
  Diagnose* _this = reinterpret_cast< Diagnose* >(object);
  (void)_this;
}
void Diagnose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Diagnose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Diagnose::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.Diagnose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && readdid_ != nullptr) {
    delete readdid_;
  }
  readdid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && writedid_ != nullptr) {
    delete writedid_;
  }
  writedid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && readdtc_ != nullptr) {
    delete readdtc_;
  }
  readdtc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cleandtc_ != nullptr) {
    delete cleandtc_;
  }
  cleandtc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && diagecuaddr_ != nullptr) {
    delete diagecuaddr_;
  }
  diagecuaddr_ = nullptr;
  diagnoseopt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Diagnose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DiagnoseNS.Diagnose.taskID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.DiagnoseOpt diagnoseOpt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diagnoseopt(static_cast<::DiagnoseNS::DiagnoseOpt>(val));
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.ReadDID readDID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_readdid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.WriteDID writeDID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_writedid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.ReadDTC readDTC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_readdtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.CleanDTC cleanDTC = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleandtc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.DiagEcuAddr diagEcuAddr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagecuaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Diagnose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.Diagnose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DiagnoseNS.Diagnose.taskID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // .DiagnoseNS.DiagnoseOpt diagnoseOpt = 2;
  if (this->_internal_diagnoseopt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_diagnoseopt(), target);
  }

  // .DiagnoseNS.ReadDID readDID = 3;
  if (this->_internal_has_readdid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::readdid(this), target, stream);
  }

  // .DiagnoseNS.WriteDID writeDID = 4;
  if (this->_internal_has_writedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::writedid(this), target, stream);
  }

  // .DiagnoseNS.ReadDTC readDTC = 5;
  if (this->_internal_has_readdtc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::readdtc(this), target, stream);
  }

  // .DiagnoseNS.CleanDTC cleanDTC = 6;
  if (this->_internal_has_cleandtc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cleandtc(this), target, stream);
  }

  // .DiagnoseNS.DiagEcuAddr diagEcuAddr = 7;
  if (this->_internal_has_diagecuaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::diagecuaddr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.Diagnose)
  return target;
}

size_t Diagnose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.Diagnose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .DiagnoseNS.ReadDID readDID = 3;
  if (this->_internal_has_readdid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readdid_);
  }

  // .DiagnoseNS.WriteDID writeDID = 4;
  if (this->_internal_has_writedid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *writedid_);
  }

  // .DiagnoseNS.ReadDTC readDTC = 5;
  if (this->_internal_has_readdtc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *readdtc_);
  }

  // .DiagnoseNS.CleanDTC cleanDTC = 6;
  if (this->_internal_has_cleandtc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cleandtc_);
  }

  // .DiagnoseNS.DiagEcuAddr diagEcuAddr = 7;
  if (this->_internal_has_diagecuaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagecuaddr_);
  }

  // .DiagnoseNS.DiagnoseOpt diagnoseOpt = 2;
  if (this->_internal_diagnoseopt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diagnoseopt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Diagnose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Diagnose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Diagnose::GetClassData() const { return &_class_data_; }

void Diagnose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Diagnose *>(to)->MergeFrom(
      static_cast<const Diagnose &>(from));
}


void Diagnose::MergeFrom(const Diagnose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.Diagnose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_has_readdid()) {
    _internal_mutable_readdid()->::DiagnoseNS::ReadDID::MergeFrom(from._internal_readdid());
  }
  if (from._internal_has_writedid()) {
    _internal_mutable_writedid()->::DiagnoseNS::WriteDID::MergeFrom(from._internal_writedid());
  }
  if (from._internal_has_readdtc()) {
    _internal_mutable_readdtc()->::DiagnoseNS::ReadDTC::MergeFrom(from._internal_readdtc());
  }
  if (from._internal_has_cleandtc()) {
    _internal_mutable_cleandtc()->::DiagnoseNS::CleanDTC::MergeFrom(from._internal_cleandtc());
  }
  if (from._internal_has_diagecuaddr()) {
    _internal_mutable_diagecuaddr()->::DiagnoseNS::DiagEcuAddr::MergeFrom(from._internal_diagecuaddr());
  }
  if (from._internal_diagnoseopt() != 0) {
    _internal_set_diagnoseopt(from._internal_diagnoseopt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Diagnose::CopyFrom(const Diagnose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.Diagnose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnose::IsInitialized() const {
  return true;
}

void Diagnose::InternalSwap(Diagnose* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Diagnose, diagnoseopt_)
      + sizeof(Diagnose::diagnoseopt_)
      - PROTOBUF_FIELD_OFFSET(Diagnose, readdid_)>(
          reinterpret_cast<char*>(&readdid_),
          reinterpret_cast<char*>(&other->readdid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[0]);
}

// ===================================================================

class ReadDID::_Internal {
 public:
};

ReadDID::ReadDID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  readdidcontent_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.ReadDID)
}
ReadDID::ReadDID(const ReadDID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      readdidcontent_(from.readdidcontent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  diagnoseresultcode_ = from.diagnoseresultcode_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.ReadDID)
}

inline void ReadDID::SharedCtor() {
diagnoseresultcode_ = 0;
}

ReadDID::~ReadDID() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.ReadDID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadDID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadDID::ArenaDtor(void* object) {
  ReadDID* _this = reinterpret_cast< ReadDID* >(object);
  (void)_this;
}
void ReadDID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadDID::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.ReadDID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readdidcontent_.Clear();
  diagnoseresultcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DiagnoseNS.DIDContent readDIDContent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_readdidcontent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diagnoseresultcode(static_cast<::DiagnoseNS::DiagnoseResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadDID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.ReadDID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DiagnoseNS.DIDContent readDIDContent = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_readdidcontent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_readdidcontent(i), target, stream);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  if (this->_internal_diagnoseresultcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_diagnoseresultcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.ReadDID)
  return target;
}

size_t ReadDID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.ReadDID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DiagnoseNS.DIDContent readDIDContent = 1;
  total_size += 1UL * this->_internal_readdidcontent_size();
  for (const auto& msg : this->readdidcontent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  if (this->_internal_diagnoseresultcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diagnoseresultcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadDID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadDID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadDID::GetClassData() const { return &_class_data_; }

void ReadDID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadDID *>(to)->MergeFrom(
      static_cast<const ReadDID &>(from));
}


void ReadDID::MergeFrom(const ReadDID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.ReadDID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  readdidcontent_.MergeFrom(from.readdidcontent_);
  if (from._internal_diagnoseresultcode() != 0) {
    _internal_set_diagnoseresultcode(from._internal_diagnoseresultcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadDID::CopyFrom(const ReadDID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.ReadDID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDID::IsInitialized() const {
  return true;
}

void ReadDID::InternalSwap(ReadDID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  readdidcontent_.InternalSwap(&other->readdidcontent_);
  swap(diagnoseresultcode_, other->diagnoseresultcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[1]);
}

// ===================================================================

class WriteDID::_Internal {
 public:
};

WriteDID::WriteDID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  writedidcontent_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.WriteDID)
}
WriteDID::WriteDID(const WriteDID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      writedidcontent_(from.writedidcontent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  diagnoseresultcode_ = from.diagnoseresultcode_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.WriteDID)
}

inline void WriteDID::SharedCtor() {
diagnoseresultcode_ = 0;
}

WriteDID::~WriteDID() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.WriteDID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteDID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriteDID::ArenaDtor(void* object) {
  WriteDID* _this = reinterpret_cast< WriteDID* >(object);
  (void)_this;
}
void WriteDID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteDID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteDID::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.WriteDID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writedidcontent_.Clear();
  diagnoseresultcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteDID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DiagnoseNS.DIDContent writeDIDContent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writedidcontent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diagnoseresultcode(static_cast<::DiagnoseNS::DiagnoseResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteDID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.WriteDID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DiagnoseNS.DIDContent writeDIDContent = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writedidcontent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_writedidcontent(i), target, stream);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  if (this->_internal_diagnoseresultcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_diagnoseresultcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.WriteDID)
  return target;
}

size_t WriteDID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.WriteDID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DiagnoseNS.DIDContent writeDIDContent = 1;
  total_size += 1UL * this->_internal_writedidcontent_size();
  for (const auto& msg : this->writedidcontent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  if (this->_internal_diagnoseresultcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diagnoseresultcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteDID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteDID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteDID::GetClassData() const { return &_class_data_; }

void WriteDID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteDID *>(to)->MergeFrom(
      static_cast<const WriteDID &>(from));
}


void WriteDID::MergeFrom(const WriteDID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.WriteDID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  writedidcontent_.MergeFrom(from.writedidcontent_);
  if (from._internal_diagnoseresultcode() != 0) {
    _internal_set_diagnoseresultcode(from._internal_diagnoseresultcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteDID::CopyFrom(const WriteDID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.WriteDID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDID::IsInitialized() const {
  return true;
}

void WriteDID::InternalSwap(WriteDID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  writedidcontent_.InternalSwap(&other->writedidcontent_);
  swap(diagnoseresultcode_, other->diagnoseresultcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteDID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[2]);
}

// ===================================================================

class ReadDTC::_Internal {
 public:
};

ReadDTC::ReadDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ecu_(arena),
  ecudtc_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.ReadDTC)
}
ReadDTC::ReadDTC(const ReadDTC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ecu_(from.ecu_),
      ecudtc_(from.ecudtc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  diagnoseresultcode_ = from.diagnoseresultcode_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.ReadDTC)
}

inline void ReadDTC::SharedCtor() {
diagnoseresultcode_ = 0;
}

ReadDTC::~ReadDTC() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.ReadDTC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadDTC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadDTC::ArenaDtor(void* object) {
  ReadDTC* _this = reinterpret_cast< ReadDTC* >(object);
  (void)_this;
}
void ReadDTC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDTC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadDTC::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.ReadDTC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecu_.Clear();
  ecudtc_.Clear();
  diagnoseresultcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDTC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DiagnoseNS.Ecus ecu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ecu(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .DiagnoseNS.EcuDTC ecuDTC = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ecudtc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diagnoseresultcode(static_cast<::DiagnoseNS::DiagnoseResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadDTC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.ReadDTC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DiagnoseNS.Ecus ecu = 1;
  {
    int byte_size = _ecu_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ecu_, byte_size, target);
    }
  }

  // repeated .DiagnoseNS.EcuDTC ecuDTC = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ecudtc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ecudtc(i), target, stream);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
  if (this->_internal_diagnoseresultcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_diagnoseresultcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.ReadDTC)
  return target;
}

size_t ReadDTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.ReadDTC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DiagnoseNS.Ecus ecu = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ecu_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ecu(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ecu_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .DiagnoseNS.EcuDTC ecuDTC = 2;
  total_size += 1UL * this->_internal_ecudtc_size();
  for (const auto& msg : this->ecudtc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
  if (this->_internal_diagnoseresultcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diagnoseresultcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadDTC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadDTC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadDTC::GetClassData() const { return &_class_data_; }

void ReadDTC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadDTC *>(to)->MergeFrom(
      static_cast<const ReadDTC &>(from));
}


void ReadDTC::MergeFrom(const ReadDTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.ReadDTC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ecu_.MergeFrom(from.ecu_);
  ecudtc_.MergeFrom(from.ecudtc_);
  if (from._internal_diagnoseresultcode() != 0) {
    _internal_set_diagnoseresultcode(from._internal_diagnoseresultcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadDTC::CopyFrom(const ReadDTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.ReadDTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDTC::IsInitialized() const {
  return true;
}

void ReadDTC::InternalSwap(ReadDTC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ecu_.InternalSwap(&other->ecu_);
  ecudtc_.InternalSwap(&other->ecudtc_);
  swap(diagnoseresultcode_, other->diagnoseresultcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDTC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[3]);
}

// ===================================================================

class EcuDTC::_Internal {
 public:
};

EcuDTC::EcuDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  diagnosecode_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.EcuDTC)
}
EcuDTC::EcuDTC(const EcuDTC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      diagnosecode_(from.diagnosecode_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ecu_ = from.ecu_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.EcuDTC)
}

inline void EcuDTC::SharedCtor() {
ecu_ = 0;
}

EcuDTC::~EcuDTC() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.EcuDTC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EcuDTC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EcuDTC::ArenaDtor(void* object) {
  EcuDTC* _this = reinterpret_cast< EcuDTC* >(object);
  (void)_this;
}
void EcuDTC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EcuDTC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EcuDTC::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.EcuDTC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosecode_.Clear();
  ecu_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EcuDTC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DiagnoseNS.Ecus ecu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string diagnoseCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_diagnosecode();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DiagnoseNS.EcuDTC.diagnoseCode"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EcuDTC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.EcuDTC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ecu(), target);
  }

  // repeated string diagnoseCode = 2;
  for (int i = 0, n = this->_internal_diagnosecode_size(); i < n; i++) {
    const auto& s = this->_internal_diagnosecode(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DiagnoseNS.EcuDTC.diagnoseCode");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.EcuDTC)
  return target;
}

size_t EcuDTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.EcuDTC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string diagnoseCode = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(diagnosecode_.size());
  for (int i = 0, n = diagnosecode_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      diagnosecode_.Get(i));
  }

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecu());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EcuDTC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EcuDTC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EcuDTC::GetClassData() const { return &_class_data_; }

void EcuDTC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EcuDTC *>(to)->MergeFrom(
      static_cast<const EcuDTC &>(from));
}


void EcuDTC::MergeFrom(const EcuDTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.EcuDTC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  diagnosecode_.MergeFrom(from.diagnosecode_);
  if (from._internal_ecu() != 0) {
    _internal_set_ecu(from._internal_ecu());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EcuDTC::CopyFrom(const EcuDTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.EcuDTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuDTC::IsInitialized() const {
  return true;
}

void EcuDTC::InternalSwap(EcuDTC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  diagnosecode_.InternalSwap(&other->diagnosecode_);
  swap(ecu_, other->ecu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EcuDTC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[4]);
}

// ===================================================================

class CleanDTC::_Internal {
 public:
};

CleanDTC::CleanDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ecu_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.CleanDTC)
}
CleanDTC::CleanDTC(const CleanDTC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ecu_(from.ecu_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  diagnoseresultcode_ = from.diagnoseresultcode_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.CleanDTC)
}

inline void CleanDTC::SharedCtor() {
diagnoseresultcode_ = 0;
}

CleanDTC::~CleanDTC() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.CleanDTC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CleanDTC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CleanDTC::ArenaDtor(void* object) {
  CleanDTC* _this = reinterpret_cast< CleanDTC* >(object);
  (void)_this;
}
void CleanDTC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanDTC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CleanDTC::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.CleanDTC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecu_.Clear();
  diagnoseresultcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanDTC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DiagnoseNS.Ecus ecu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ecu(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diagnoseresultcode(static_cast<::DiagnoseNS::DiagnoseResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanDTC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.CleanDTC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DiagnoseNS.Ecus ecu = 1;
  {
    int byte_size = _ecu_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ecu_, byte_size, target);
    }
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  if (this->_internal_diagnoseresultcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_diagnoseresultcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.CleanDTC)
  return target;
}

size_t CleanDTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.CleanDTC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DiagnoseNS.Ecus ecu = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ecu_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ecu(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ecu_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  if (this->_internal_diagnoseresultcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diagnoseresultcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanDTC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CleanDTC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanDTC::GetClassData() const { return &_class_data_; }

void CleanDTC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CleanDTC *>(to)->MergeFrom(
      static_cast<const CleanDTC &>(from));
}


void CleanDTC::MergeFrom(const CleanDTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.CleanDTC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ecu_.MergeFrom(from.ecu_);
  if (from._internal_diagnoseresultcode() != 0) {
    _internal_set_diagnoseresultcode(from._internal_diagnoseresultcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CleanDTC::CopyFrom(const CleanDTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.CleanDTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanDTC::IsInitialized() const {
  return true;
}

void CleanDTC::InternalSwap(CleanDTC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ecu_.InternalSwap(&other->ecu_);
  swap(diagnoseresultcode_, other->diagnoseresultcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanDTC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[5]);
}

// ===================================================================

class DiagEcuAddr::_Internal {
 public:
};

DiagEcuAddr::DiagEcuAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ecuaddr_(arena),
  ecuaddrdtc_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.DiagEcuAddr)
}
DiagEcuAddr::DiagEcuAddr(const DiagEcuAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ecuaddr_(from.ecuaddr_),
      ecuaddrdtc_(from.ecuaddrdtc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  diagnoseresultcode_ = from.diagnoseresultcode_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.DiagEcuAddr)
}

inline void DiagEcuAddr::SharedCtor() {
diagnoseresultcode_ = 0;
}

DiagEcuAddr::~DiagEcuAddr() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.DiagEcuAddr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiagEcuAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiagEcuAddr::ArenaDtor(void* object) {
  DiagEcuAddr* _this = reinterpret_cast< DiagEcuAddr* >(object);
  (void)_this;
}
void DiagEcuAddr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiagEcuAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiagEcuAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.DiagEcuAddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecuaddr_.Clear();
  ecuaddrdtc_.Clear();
  diagnoseresultcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiagEcuAddr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DiagnoseNS.EcuAddr ecuAddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ecuaddr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DiagnoseNS.EcuAddrDTC ecuAddrDTC = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ecuaddrdtc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_diagnoseresultcode(static_cast<::DiagnoseNS::DiagnoseResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiagEcuAddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.DiagEcuAddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DiagnoseNS.EcuAddr ecuAddr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ecuaddr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ecuaddr(i), target, stream);
  }

  // repeated .DiagnoseNS.EcuAddrDTC ecuAddrDTC = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ecuaddrdtc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ecuaddrdtc(i), target, stream);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
  if (this->_internal_diagnoseresultcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_diagnoseresultcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.DiagEcuAddr)
  return target;
}

size_t DiagEcuAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.DiagEcuAddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DiagnoseNS.EcuAddr ecuAddr = 1;
  total_size += 1UL * this->_internal_ecuaddr_size();
  for (const auto& msg : this->ecuaddr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DiagnoseNS.EcuAddrDTC ecuAddrDTC = 2;
  total_size += 1UL * this->_internal_ecuaddrdtc_size();
  for (const auto& msg : this->ecuaddrdtc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
  if (this->_internal_diagnoseresultcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diagnoseresultcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiagEcuAddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiagEcuAddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiagEcuAddr::GetClassData() const { return &_class_data_; }

void DiagEcuAddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiagEcuAddr *>(to)->MergeFrom(
      static_cast<const DiagEcuAddr &>(from));
}


void DiagEcuAddr::MergeFrom(const DiagEcuAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.DiagEcuAddr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ecuaddr_.MergeFrom(from.ecuaddr_);
  ecuaddrdtc_.MergeFrom(from.ecuaddrdtc_);
  if (from._internal_diagnoseresultcode() != 0) {
    _internal_set_diagnoseresultcode(from._internal_diagnoseresultcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiagEcuAddr::CopyFrom(const DiagEcuAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.DiagEcuAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagEcuAddr::IsInitialized() const {
  return true;
}

void DiagEcuAddr::InternalSwap(DiagEcuAddr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ecuaddr_.InternalSwap(&other->ecuaddr_);
  ecuaddrdtc_.InternalSwap(&other->ecuaddrdtc_);
  swap(diagnoseresultcode_, other->diagnoseresultcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagEcuAddr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[6]);
}

// ===================================================================

class EcuAddrDTC::_Internal {
 public:
  static const ::DiagnoseNS::EcuAddr& ecuaddr(const EcuAddrDTC* msg);
};

const ::DiagnoseNS::EcuAddr&
EcuAddrDTC::_Internal::ecuaddr(const EcuAddrDTC* msg) {
  return *msg->ecuaddr_;
}
EcuAddrDTC::EcuAddrDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  diagnosecode_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.EcuAddrDTC)
}
EcuAddrDTC::EcuAddrDTC(const EcuAddrDTC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      diagnosecode_(from.diagnosecode_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ecuaddr()) {
    ecuaddr_ = new ::DiagnoseNS::EcuAddr(*from.ecuaddr_);
  } else {
    ecuaddr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.EcuAddrDTC)
}

inline void EcuAddrDTC::SharedCtor() {
ecuaddr_ = nullptr;
}

EcuAddrDTC::~EcuAddrDTC() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.EcuAddrDTC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EcuAddrDTC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ecuaddr_;
}

void EcuAddrDTC::ArenaDtor(void* object) {
  EcuAddrDTC* _this = reinterpret_cast< EcuAddrDTC* >(object);
  (void)_this;
}
void EcuAddrDTC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EcuAddrDTC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EcuAddrDTC::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.EcuAddrDTC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosecode_.Clear();
  if (GetArenaForAllocation() == nullptr && ecuaddr_ != nullptr) {
    delete ecuaddr_;
  }
  ecuaddr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EcuAddrDTC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DiagnoseNS.EcuAddr ecuAddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecuaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string diagnoseCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_diagnosecode();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DiagnoseNS.EcuAddrDTC.diagnoseCode"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EcuAddrDTC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.EcuAddrDTC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DiagnoseNS.EcuAddr ecuAddr = 1;
  if (this->_internal_has_ecuaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ecuaddr(this), target, stream);
  }

  // repeated string diagnoseCode = 2;
  for (int i = 0, n = this->_internal_diagnosecode_size(); i < n; i++) {
    const auto& s = this->_internal_diagnosecode(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DiagnoseNS.EcuAddrDTC.diagnoseCode");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.EcuAddrDTC)
  return target;
}

size_t EcuAddrDTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.EcuAddrDTC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string diagnoseCode = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(diagnosecode_.size());
  for (int i = 0, n = diagnosecode_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      diagnosecode_.Get(i));
  }

  // .DiagnoseNS.EcuAddr ecuAddr = 1;
  if (this->_internal_has_ecuaddr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ecuaddr_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EcuAddrDTC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EcuAddrDTC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EcuAddrDTC::GetClassData() const { return &_class_data_; }

void EcuAddrDTC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EcuAddrDTC *>(to)->MergeFrom(
      static_cast<const EcuAddrDTC &>(from));
}


void EcuAddrDTC::MergeFrom(const EcuAddrDTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.EcuAddrDTC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  diagnosecode_.MergeFrom(from.diagnosecode_);
  if (from._internal_has_ecuaddr()) {
    _internal_mutable_ecuaddr()->::DiagnoseNS::EcuAddr::MergeFrom(from._internal_ecuaddr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EcuAddrDTC::CopyFrom(const EcuAddrDTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.EcuAddrDTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuAddrDTC::IsInitialized() const {
  return true;
}

void EcuAddrDTC::InternalSwap(EcuAddrDTC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  diagnosecode_.InternalSwap(&other->diagnosecode_);
  swap(ecuaddr_, other->ecuaddr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EcuAddrDTC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[7]);
}

// ===================================================================

class EcuAddr::_Internal {
 public:
};

EcuAddr::EcuAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.EcuAddr)
}
EcuAddr::EcuAddr(const EcuAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ecuaddrtx_, &from.ecuaddrtx_,
    static_cast<size_t>(reinterpret_cast<char*>(&ecuaddrrx_) -
    reinterpret_cast<char*>(&ecuaddrtx_)) + sizeof(ecuaddrrx_));
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.EcuAddr)
}

inline void EcuAddr::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ecuaddrtx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ecuaddrrx_) -
    reinterpret_cast<char*>(&ecuaddrtx_)) + sizeof(ecuaddrrx_));
}

EcuAddr::~EcuAddr() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.EcuAddr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EcuAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EcuAddr::ArenaDtor(void* object) {
  EcuAddr* _this = reinterpret_cast< EcuAddr* >(object);
  (void)_this;
}
void EcuAddr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EcuAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EcuAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.EcuAddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ecuaddrtx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecuaddrrx_) -
      reinterpret_cast<char*>(&ecuaddrtx_)) + sizeof(ecuaddrrx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EcuAddr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ecuAddrTx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ecuaddrtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ecuAddrRx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ecuaddrrx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EcuAddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.EcuAddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ecuAddrTx = 1;
  if (this->_internal_ecuaddrtx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ecuaddrtx(), target);
  }

  // uint32 ecuAddrRx = 2;
  if (this->_internal_ecuaddrrx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ecuaddrrx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.EcuAddr)
  return target;
}

size_t EcuAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.EcuAddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ecuAddrTx = 1;
  if (this->_internal_ecuaddrtx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ecuaddrtx());
  }

  // uint32 ecuAddrRx = 2;
  if (this->_internal_ecuaddrrx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ecuaddrrx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EcuAddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EcuAddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EcuAddr::GetClassData() const { return &_class_data_; }

void EcuAddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EcuAddr *>(to)->MergeFrom(
      static_cast<const EcuAddr &>(from));
}


void EcuAddr::MergeFrom(const EcuAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.EcuAddr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ecuaddrtx() != 0) {
    _internal_set_ecuaddrtx(from._internal_ecuaddrtx());
  }
  if (from._internal_ecuaddrrx() != 0) {
    _internal_set_ecuaddrrx(from._internal_ecuaddrrx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EcuAddr::CopyFrom(const EcuAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.EcuAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuAddr::IsInitialized() const {
  return true;
}

void EcuAddr::InternalSwap(EcuAddr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EcuAddr, ecuaddrrx_)
      + sizeof(EcuAddr::ecuaddrrx_)
      - PROTOBUF_FIELD_OFFSET(EcuAddr, ecuaddrtx_)>(
          reinterpret_cast<char*>(&ecuaddrtx_),
          reinterpret_cast<char*>(&other->ecuaddrtx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EcuAddr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[8]);
}

// ===================================================================

class DIDContent::_Internal {
 public:
};

DIDContent::DIDContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  diagdid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.DIDContent)
}
DIDContent::DIDContent(const DIDContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      diagdid_(from.diagdid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ecu_ = from.ecu_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.DIDContent)
}

inline void DIDContent::SharedCtor() {
ecu_ = 0;
}

DIDContent::~DIDContent() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.DIDContent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DIDContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DIDContent::ArenaDtor(void* object) {
  DIDContent* _this = reinterpret_cast< DIDContent* >(object);
  (void)_this;
}
void DIDContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DIDContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DIDContent::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.DIDContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagdid_.Clear();
  ecu_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DIDContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DiagnoseNS.Ecus ecu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .DiagnoseNS.DiagDID diagDID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagdid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DIDContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.DIDContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ecu(), target);
  }

  // repeated .DiagnoseNS.DiagDID diagDID = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagdid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_diagdid(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.DIDContent)
  return target;
}

size_t DIDContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.DIDContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DiagnoseNS.DiagDID diagDID = 2;
  total_size += 1UL * this->_internal_diagdid_size();
  for (const auto& msg : this->diagdid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecu());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DIDContent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DIDContent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DIDContent::GetClassData() const { return &_class_data_; }

void DIDContent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DIDContent *>(to)->MergeFrom(
      static_cast<const DIDContent &>(from));
}


void DIDContent::MergeFrom(const DIDContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.DIDContent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  diagdid_.MergeFrom(from.diagdid_);
  if (from._internal_ecu() != 0) {
    _internal_set_ecu(from._internal_ecu());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DIDContent::CopyFrom(const DIDContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.DIDContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DIDContent::IsInitialized() const {
  return true;
}

void DIDContent::InternalSwap(DIDContent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  diagdid_.InternalSwap(&other->diagdid_);
  swap(ecu_, other->ecu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DIDContent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[9]);
}

// ===================================================================

class DiagDID::_Internal {
 public:
};

DiagDID::DiagDID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DiagnoseNS.DiagDID)
}
DiagDID::DiagDID(const DiagDID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  didvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    didvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_didvalue().empty()) {
    didvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_didvalue(), 
      GetArenaForAllocation());
  }
  did_ = from.did_;
  // @@protoc_insertion_point(copy_constructor:DiagnoseNS.DiagDID)
}

inline void DiagDID::SharedCtor() {
didvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  didvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
did_ = 0u;
}

DiagDID::~DiagDID() {
  // @@protoc_insertion_point(destructor:DiagnoseNS.DiagDID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiagDID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  didvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagDID::ArenaDtor(void* object) {
  DiagDID* _this = reinterpret_cast< DiagDID* >(object);
  (void)_this;
}
void DiagDID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiagDID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiagDID::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnoseNS.DiagDID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  didvalue_.ClearToEmpty();
  did_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiagDID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 did = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          did_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes didValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_didvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiagDID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnoseNS.DiagDID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 did = 1;
  if (this->_internal_did() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_did(), target);
  }

  // bytes didValue = 2;
  if (!this->_internal_didvalue().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_didvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnoseNS.DiagDID)
  return target;
}

size_t DiagDID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnoseNS.DiagDID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes didValue = 2;
  if (!this->_internal_didvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_didvalue());
  }

  // uint32 did = 1;
  if (this->_internal_did() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_did());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiagDID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiagDID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiagDID::GetClassData() const { return &_class_data_; }

void DiagDID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiagDID *>(to)->MergeFrom(
      static_cast<const DiagDID &>(from));
}


void DiagDID::MergeFrom(const DiagDID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnoseNS.DiagDID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_didvalue().empty()) {
    _internal_set_didvalue(from._internal_didvalue());
  }
  if (from._internal_did() != 0) {
    _internal_set_did(from._internal_did());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiagDID::CopyFrom(const DiagDID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnoseNS.DiagDID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagDID::IsInitialized() const {
  return true;
}

void DiagDID::InternalSwap(DiagDID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &didvalue_, lhs_arena,
      &other->didvalue_, rhs_arena
  );
  swap(did_, other->did_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagDID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_diagnose_2eproto_getter, &descriptor_table_diagnose_2eproto_once,
      file_level_metadata_diagnose_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DiagnoseNS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DiagnoseNS::Diagnose* Arena::CreateMaybeMessage< ::DiagnoseNS::Diagnose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::Diagnose >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::ReadDID* Arena::CreateMaybeMessage< ::DiagnoseNS::ReadDID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::ReadDID >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::WriteDID* Arena::CreateMaybeMessage< ::DiagnoseNS::WriteDID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::WriteDID >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::ReadDTC* Arena::CreateMaybeMessage< ::DiagnoseNS::ReadDTC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::ReadDTC >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::EcuDTC* Arena::CreateMaybeMessage< ::DiagnoseNS::EcuDTC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::EcuDTC >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::CleanDTC* Arena::CreateMaybeMessage< ::DiagnoseNS::CleanDTC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::CleanDTC >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::DiagEcuAddr* Arena::CreateMaybeMessage< ::DiagnoseNS::DiagEcuAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::DiagEcuAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::EcuAddrDTC* Arena::CreateMaybeMessage< ::DiagnoseNS::EcuAddrDTC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::EcuAddrDTC >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::EcuAddr* Arena::CreateMaybeMessage< ::DiagnoseNS::EcuAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::EcuAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::DIDContent* Arena::CreateMaybeMessage< ::DiagnoseNS::DIDContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::DIDContent >(arena);
}
template<> PROTOBUF_NOINLINE ::DiagnoseNS::DiagDID* Arena::CreateMaybeMessage< ::DiagnoseNS::DiagDID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DiagnoseNS::DiagDID >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
