// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fault.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fault_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fault_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fault_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fault_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fault_2eproto;
namespace FaultNS {
class Fault;
struct FaultDefaultTypeInternal;
extern FaultDefaultTypeInternal _Fault_default_instance_;
class FaultItem;
struct FaultItemDefaultTypeInternal;
extern FaultItemDefaultTypeInternal _FaultItem_default_instance_;
class FaultMsg;
struct FaultMsgDefaultTypeInternal;
extern FaultMsgDefaultTypeInternal _FaultMsg_default_instance_;
}  // namespace FaultNS
PROTOBUF_NAMESPACE_OPEN
template<> ::FaultNS::Fault* Arena::CreateMaybeMessage<::FaultNS::Fault>(Arena*);
template<> ::FaultNS::FaultItem* Arena::CreateMaybeMessage<::FaultNS::FaultItem>(Arena*);
template<> ::FaultNS::FaultMsg* Arena::CreateMaybeMessage<::FaultNS::FaultMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FaultNS {

// ===================================================================

class Fault final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaultNS.Fault) */ {
 public:
  inline Fault() : Fault(nullptr) {}
  ~Fault() override;
  explicit constexpr Fault(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fault(const Fault& from);
  Fault(Fault&& from) noexcept
    : Fault() {
    *this = ::std::move(from);
  }

  inline Fault& operator=(const Fault& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fault& operator=(Fault&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fault& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fault* internal_default_instance() {
    return reinterpret_cast<const Fault*>(
               &_Fault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fault& a, Fault& b) {
    a.Swap(&b);
  }
  inline void Swap(Fault* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fault* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fault>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fault& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Fault& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fault* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaultNS.Fault";
  }
  protected:
  explicit Fault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultMsgFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // repeated .FaultNS.FaultMsg faultMsg = 1;
  int faultmsg_size() const;
  private:
  int _internal_faultmsg_size() const;
  public:
  void clear_faultmsg();
  ::FaultNS::FaultMsg* mutable_faultmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaultNS::FaultMsg >*
      mutable_faultmsg();
  private:
  const ::FaultNS::FaultMsg& _internal_faultmsg(int index) const;
  ::FaultNS::FaultMsg* _internal_add_faultmsg();
  public:
  const ::FaultNS::FaultMsg& faultmsg(int index) const;
  ::FaultNS::FaultMsg* add_faultmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaultNS::FaultMsg >&
      faultmsg() const;

  // bytes location = 2;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:FaultNS.Fault)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaultNS::FaultMsg > faultmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fault_2eproto;
};
// -------------------------------------------------------------------

class FaultMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaultNS.FaultMsg) */ {
 public:
  inline FaultMsg() : FaultMsg(nullptr) {}
  ~FaultMsg() override;
  explicit constexpr FaultMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FaultMsg(const FaultMsg& from);
  FaultMsg(FaultMsg&& from) noexcept
    : FaultMsg() {
    *this = ::std::move(from);
  }

  inline FaultMsg& operator=(const FaultMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaultMsg& operator=(FaultMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FaultMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const FaultMsg* internal_default_instance() {
    return reinterpret_cast<const FaultMsg*>(
               &_FaultMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FaultMsg& a, FaultMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(FaultMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaultMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FaultMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FaultMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FaultMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FaultMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaultMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaultNS.FaultMsg";
  }
  protected:
  explicit FaultMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultItemFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .FaultNS.FaultItem faultItem = 1;
  bool has_faultitem() const;
  private:
  bool _internal_has_faultitem() const;
  public:
  void clear_faultitem();
  const ::FaultNS::FaultItem& faultitem() const;
  PROTOBUF_NODISCARD ::FaultNS::FaultItem* release_faultitem();
  ::FaultNS::FaultItem* mutable_faultitem();
  void set_allocated_faultitem(::FaultNS::FaultItem* faultitem);
  private:
  const ::FaultNS::FaultItem& _internal_faultitem() const;
  ::FaultNS::FaultItem* _internal_mutable_faultitem();
  public:
  void unsafe_arena_set_allocated_faultitem(
      ::FaultNS::FaultItem* faultitem);
  ::FaultNS::FaultItem* unsafe_arena_release_faultitem();

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FaultNS.FaultMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::FaultNS::FaultItem* faultitem_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fault_2eproto;
};
// -------------------------------------------------------------------

class FaultItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FaultNS.FaultItem) */ {
 public:
  inline FaultItem() : FaultItem(nullptr) {}
  ~FaultItem() override;
  explicit constexpr FaultItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FaultItem(const FaultItem& from);
  FaultItem(FaultItem&& from) noexcept
    : FaultItem() {
    *this = ::std::move(from);
  }

  inline FaultItem& operator=(const FaultItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaultItem& operator=(FaultItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FaultItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const FaultItem* internal_default_instance() {
    return reinterpret_cast<const FaultItem*>(
               &_FaultItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FaultItem& a, FaultItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FaultItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaultItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FaultItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FaultItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FaultItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FaultItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaultItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FaultNS.FaultItem";
  }
  protected:
  explicit FaultItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpnFieldNumber = 1,
    kFmiFieldNumber = 2,
    kModelFieldNumber = 3,
    kCounterFieldNumber = 4,
  };
  // uint32 spn = 1;
  void clear_spn();
  uint32_t spn() const;
  void set_spn(uint32_t value);
  private:
  uint32_t _internal_spn() const;
  void _internal_set_spn(uint32_t value);
  public:

  // uint32 fmi = 2;
  void clear_fmi();
  uint32_t fmi() const;
  void set_fmi(uint32_t value);
  private:
  uint32_t _internal_fmi() const;
  void _internal_set_fmi(uint32_t value);
  public:

  // uint32 model = 3;
  void clear_model();
  uint32_t model() const;
  void set_model(uint32_t value);
  private:
  uint32_t _internal_model() const;
  void _internal_set_model(uint32_t value);
  public:

  // uint32 counter = 4;
  void clear_counter();
  uint32_t counter() const;
  void set_counter(uint32_t value);
  private:
  uint32_t _internal_counter() const;
  void _internal_set_counter(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FaultNS.FaultItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t spn_;
  uint32_t fmi_;
  uint32_t model_;
  uint32_t counter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fault_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fault

// repeated .FaultNS.FaultMsg faultMsg = 1;
inline int Fault::_internal_faultmsg_size() const {
  return faultmsg_.size();
}
inline int Fault::faultmsg_size() const {
  return _internal_faultmsg_size();
}
inline void Fault::clear_faultmsg() {
  faultmsg_.Clear();
}
inline ::FaultNS::FaultMsg* Fault::mutable_faultmsg(int index) {
  // @@protoc_insertion_point(field_mutable:FaultNS.Fault.faultMsg)
  return faultmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaultNS::FaultMsg >*
Fault::mutable_faultmsg() {
  // @@protoc_insertion_point(field_mutable_list:FaultNS.Fault.faultMsg)
  return &faultmsg_;
}
inline const ::FaultNS::FaultMsg& Fault::_internal_faultmsg(int index) const {
  return faultmsg_.Get(index);
}
inline const ::FaultNS::FaultMsg& Fault::faultmsg(int index) const {
  // @@protoc_insertion_point(field_get:FaultNS.Fault.faultMsg)
  return _internal_faultmsg(index);
}
inline ::FaultNS::FaultMsg* Fault::_internal_add_faultmsg() {
  return faultmsg_.Add();
}
inline ::FaultNS::FaultMsg* Fault::add_faultmsg() {
  ::FaultNS::FaultMsg* _add = _internal_add_faultmsg();
  // @@protoc_insertion_point(field_add:FaultNS.Fault.faultMsg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FaultNS::FaultMsg >&
Fault::faultmsg() const {
  // @@protoc_insertion_point(field_list:FaultNS.Fault.faultMsg)
  return faultmsg_;
}

// bytes location = 2;
inline void Fault::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& Fault::location() const {
  // @@protoc_insertion_point(field_get:FaultNS.Fault.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fault::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FaultNS.Fault.location)
}
inline std::string* Fault::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:FaultNS.Fault.location)
  return _s;
}
inline const std::string& Fault::_internal_location() const {
  return location_.Get();
}
inline void Fault::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Fault::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Fault::release_location() {
  // @@protoc_insertion_point(field_release:FaultNS.Fault.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Fault::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FaultNS.Fault.location)
}

// -------------------------------------------------------------------

// FaultMsg

// .FaultNS.FaultItem faultItem = 1;
inline bool FaultMsg::_internal_has_faultitem() const {
  return this != internal_default_instance() && faultitem_ != nullptr;
}
inline bool FaultMsg::has_faultitem() const {
  return _internal_has_faultitem();
}
inline void FaultMsg::clear_faultitem() {
  if (GetArenaForAllocation() == nullptr && faultitem_ != nullptr) {
    delete faultitem_;
  }
  faultitem_ = nullptr;
}
inline const ::FaultNS::FaultItem& FaultMsg::_internal_faultitem() const {
  const ::FaultNS::FaultItem* p = faultitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::FaultNS::FaultItem&>(
      ::FaultNS::_FaultItem_default_instance_);
}
inline const ::FaultNS::FaultItem& FaultMsg::faultitem() const {
  // @@protoc_insertion_point(field_get:FaultNS.FaultMsg.faultItem)
  return _internal_faultitem();
}
inline void FaultMsg::unsafe_arena_set_allocated_faultitem(
    ::FaultNS::FaultItem* faultitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(faultitem_);
  }
  faultitem_ = faultitem;
  if (faultitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FaultNS.FaultMsg.faultItem)
}
inline ::FaultNS::FaultItem* FaultMsg::release_faultitem() {
  
  ::FaultNS::FaultItem* temp = faultitem_;
  faultitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FaultNS::FaultItem* FaultMsg::unsafe_arena_release_faultitem() {
  // @@protoc_insertion_point(field_release:FaultNS.FaultMsg.faultItem)
  
  ::FaultNS::FaultItem* temp = faultitem_;
  faultitem_ = nullptr;
  return temp;
}
inline ::FaultNS::FaultItem* FaultMsg::_internal_mutable_faultitem() {
  
  if (faultitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::FaultNS::FaultItem>(GetArenaForAllocation());
    faultitem_ = p;
  }
  return faultitem_;
}
inline ::FaultNS::FaultItem* FaultMsg::mutable_faultitem() {
  ::FaultNS::FaultItem* _msg = _internal_mutable_faultitem();
  // @@protoc_insertion_point(field_mutable:FaultNS.FaultMsg.faultItem)
  return _msg;
}
inline void FaultMsg::set_allocated_faultitem(::FaultNS::FaultItem* faultitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete faultitem_;
  }
  if (faultitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FaultNS::FaultItem>::GetOwningArena(faultitem);
    if (message_arena != submessage_arena) {
      faultitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, faultitem, submessage_arena);
    }
    
  } else {
    
  }
  faultitem_ = faultitem;
  // @@protoc_insertion_point(field_set_allocated:FaultNS.FaultMsg.faultItem)
}

// bool status = 2;
inline void FaultMsg::clear_status() {
  status_ = false;
}
inline bool FaultMsg::_internal_status() const {
  return status_;
}
inline bool FaultMsg::status() const {
  // @@protoc_insertion_point(field_get:FaultNS.FaultMsg.status)
  return _internal_status();
}
inline void FaultMsg::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void FaultMsg::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:FaultNS.FaultMsg.status)
}

// -------------------------------------------------------------------

// FaultItem

// uint32 spn = 1;
inline void FaultItem::clear_spn() {
  spn_ = 0u;
}
inline uint32_t FaultItem::_internal_spn() const {
  return spn_;
}
inline uint32_t FaultItem::spn() const {
  // @@protoc_insertion_point(field_get:FaultNS.FaultItem.spn)
  return _internal_spn();
}
inline void FaultItem::_internal_set_spn(uint32_t value) {
  
  spn_ = value;
}
inline void FaultItem::set_spn(uint32_t value) {
  _internal_set_spn(value);
  // @@protoc_insertion_point(field_set:FaultNS.FaultItem.spn)
}

// uint32 fmi = 2;
inline void FaultItem::clear_fmi() {
  fmi_ = 0u;
}
inline uint32_t FaultItem::_internal_fmi() const {
  return fmi_;
}
inline uint32_t FaultItem::fmi() const {
  // @@protoc_insertion_point(field_get:FaultNS.FaultItem.fmi)
  return _internal_fmi();
}
inline void FaultItem::_internal_set_fmi(uint32_t value) {
  
  fmi_ = value;
}
inline void FaultItem::set_fmi(uint32_t value) {
  _internal_set_fmi(value);
  // @@protoc_insertion_point(field_set:FaultNS.FaultItem.fmi)
}

// uint32 model = 3;
inline void FaultItem::clear_model() {
  model_ = 0u;
}
inline uint32_t FaultItem::_internal_model() const {
  return model_;
}
inline uint32_t FaultItem::model() const {
  // @@protoc_insertion_point(field_get:FaultNS.FaultItem.model)
  return _internal_model();
}
inline void FaultItem::_internal_set_model(uint32_t value) {
  
  model_ = value;
}
inline void FaultItem::set_model(uint32_t value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:FaultNS.FaultItem.model)
}

// uint32 counter = 4;
inline void FaultItem::clear_counter() {
  counter_ = 0u;
}
inline uint32_t FaultItem::_internal_counter() const {
  return counter_;
}
inline uint32_t FaultItem::counter() const {
  // @@protoc_insertion_point(field_get:FaultNS.FaultItem.counter)
  return _internal_counter();
}
inline void FaultItem::_internal_set_counter(uint32_t value) {
  
  counter_ = value;
}
inline void FaultItem::set_counter(uint32_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:FaultNS.FaultItem.counter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FaultNS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fault_2eproto
