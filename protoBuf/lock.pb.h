// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lock.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lock_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lock_2eproto;
namespace LockNS {
class Lock;
struct LockDefaultTypeInternal;
extern LockDefaultTypeInternal _Lock_default_instance_;
class LockRequest;
struct LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class LockResponse;
struct LockResponseDefaultTypeInternal;
extern LockResponseDefaultTypeInternal _LockResponse_default_instance_;
}  // namespace LockNS
PROTOBUF_NAMESPACE_OPEN
template<> ::LockNS::Lock* Arena::CreateMaybeMessage<::LockNS::Lock>(Arena*);
template<> ::LockNS::LockRequest* Arena::CreateMaybeMessage<::LockNS::LockRequest>(Arena*);
template<> ::LockNS::LockResponse* Arena::CreateMaybeMessage<::LockNS::LockResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LockNS {

enum LockOpt : int {
  INVALID = 0,
  LOCK_REQ = 1,
  UNLOCK_REQ = 2,
  QUERY_REQ = 3,
  LockOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LockOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LockOpt_IsValid(int value);
constexpr LockOpt LockOpt_MIN = INVALID;
constexpr LockOpt LockOpt_MAX = QUERY_REQ;
constexpr int LockOpt_ARRAYSIZE = LockOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockOpt_descriptor();
template<typename T>
inline const std::string& LockOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LockOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LockOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LockOpt_descriptor(), enum_t_value);
}
inline bool LockOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LockOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LockOpt>(
    LockOpt_descriptor(), name, value);
}
enum LockStatus : int {
  UNLOCK = 0,
  LOCK = 1,
  LockStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LockStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LockStatus_IsValid(int value);
constexpr LockStatus LockStatus_MIN = UNLOCK;
constexpr LockStatus LockStatus_MAX = LOCK;
constexpr int LockStatus_ARRAYSIZE = LockStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockStatus_descriptor();
template<typename T>
inline const std::string& LockStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LockStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LockStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LockStatus_descriptor(), enum_t_value);
}
inline bool LockStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LockStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LockStatus>(
    LockStatus_descriptor(), name, value);
}
enum LockResultCode : int {
  SUCCESS = 0,
  FAILED = 1,
  LockResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LockResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LockResultCode_IsValid(int value);
constexpr LockResultCode LockResultCode_MIN = SUCCESS;
constexpr LockResultCode LockResultCode_MAX = FAILED;
constexpr int LockResultCode_ARRAYSIZE = LockResultCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockResultCode_descriptor();
template<typename T>
inline const std::string& LockResultCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LockResultCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LockResultCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LockResultCode_descriptor(), enum_t_value);
}
inline bool LockResultCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LockResultCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LockResultCode>(
    LockResultCode_descriptor(), name, value);
}
// ===================================================================

class Lock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LockNS.Lock) */ {
 public:
  inline Lock() : Lock(nullptr) {}
  ~Lock() override;
  explicit constexpr Lock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lock(const Lock& from);
  Lock(Lock&& from) noexcept
    : Lock() {
    *this = ::std::move(from);
  }

  inline Lock& operator=(const Lock& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lock& operator=(Lock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lock& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lock* internal_default_instance() {
    return reinterpret_cast<const Lock*>(
               &_Lock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Lock& a, Lock& b) {
    a.Swap(&b);
  }
  inline void Swap(Lock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Lock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Lock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LockNS.Lock";
  }
  protected:
  explicit Lock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIDFieldNumber = 1,
    kLockRequestFieldNumber = 2,
    kLockResponseFieldNumber = 3,
  };
  // string taskID = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .LockNS.LockRequest lockRequest = 2;
  bool has_lockrequest() const;
  private:
  bool _internal_has_lockrequest() const;
  public:
  void clear_lockrequest();
  const ::LockNS::LockRequest& lockrequest() const;
  PROTOBUF_NODISCARD ::LockNS::LockRequest* release_lockrequest();
  ::LockNS::LockRequest* mutable_lockrequest();
  void set_allocated_lockrequest(::LockNS::LockRequest* lockrequest);
  private:
  const ::LockNS::LockRequest& _internal_lockrequest() const;
  ::LockNS::LockRequest* _internal_mutable_lockrequest();
  public:
  void unsafe_arena_set_allocated_lockrequest(
      ::LockNS::LockRequest* lockrequest);
  ::LockNS::LockRequest* unsafe_arena_release_lockrequest();

  // .LockNS.LockResponse lockResponse = 3;
  bool has_lockresponse() const;
  private:
  bool _internal_has_lockresponse() const;
  public:
  void clear_lockresponse();
  const ::LockNS::LockResponse& lockresponse() const;
  PROTOBUF_NODISCARD ::LockNS::LockResponse* release_lockresponse();
  ::LockNS::LockResponse* mutable_lockresponse();
  void set_allocated_lockresponse(::LockNS::LockResponse* lockresponse);
  private:
  const ::LockNS::LockResponse& _internal_lockresponse() const;
  ::LockNS::LockResponse* _internal_mutable_lockresponse();
  public:
  void unsafe_arena_set_allocated_lockresponse(
      ::LockNS::LockResponse* lockresponse);
  ::LockNS::LockResponse* unsafe_arena_release_lockresponse();

  // @@protoc_insertion_point(class_scope:LockNS.Lock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::LockNS::LockRequest* lockrequest_;
  ::LockNS::LockResponse* lockresponse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_2eproto;
};
// -------------------------------------------------------------------

class LockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LockNS.LockRequest) */ {
 public:
  inline LockRequest() : LockRequest(nullptr) {}
  ~LockRequest() override;
  explicit constexpr LockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockRequest(const LockRequest& from);
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LockNS.LockRequest";
  }
  protected:
  explicit LockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockOptFieldNumber = 1,
  };
  // .LockNS.LockOpt lockOpt = 1;
  void clear_lockopt();
  ::LockNS::LockOpt lockopt() const;
  void set_lockopt(::LockNS::LockOpt value);
  private:
  ::LockNS::LockOpt _internal_lockopt() const;
  void _internal_set_lockopt(::LockNS::LockOpt value);
  public:

  // @@protoc_insertion_point(class_scope:LockNS.LockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int lockopt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_2eproto;
};
// -------------------------------------------------------------------

class LockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LockNS.LockResponse) */ {
 public:
  inline LockResponse() : LockResponse(nullptr) {}
  ~LockResponse() override;
  explicit constexpr LockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockResponse(const LockResponse& from);
  LockResponse(LockResponse&& from) noexcept
    : LockResponse() {
    *this = ::std::move(from);
  }

  inline LockResponse& operator=(const LockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockResponse& operator=(LockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockResponse* internal_default_instance() {
    return reinterpret_cast<const LockResponse*>(
               &_LockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LockResponse& a, LockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LockResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LockNS.LockResponse";
  }
  protected:
  explicit LockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultCodeFieldNumber = 1,
    kLockStatusFieldNumber = 2,
  };
  // .LockNS.LockResultCode resultCode = 1;
  void clear_resultcode();
  ::LockNS::LockResultCode resultcode() const;
  void set_resultcode(::LockNS::LockResultCode value);
  private:
  ::LockNS::LockResultCode _internal_resultcode() const;
  void _internal_set_resultcode(::LockNS::LockResultCode value);
  public:

  // .LockNS.LockStatus lockStatus = 2;
  void clear_lockstatus();
  ::LockNS::LockStatus lockstatus() const;
  void set_lockstatus(::LockNS::LockStatus value);
  private:
  ::LockNS::LockStatus _internal_lockstatus() const;
  void _internal_set_lockstatus(::LockNS::LockStatus value);
  public:

  // @@protoc_insertion_point(class_scope:LockNS.LockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int resultcode_;
  int lockstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lock

// string taskID = 1;
inline void Lock::clear_taskid() {
  taskid_.ClearToEmpty();
}
inline const std::string& Lock::taskid() const {
  // @@protoc_insertion_point(field_get:LockNS.Lock.taskID)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Lock::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LockNS.Lock.taskID)
}
inline std::string* Lock::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:LockNS.Lock.taskID)
  return _s;
}
inline const std::string& Lock::_internal_taskid() const {
  return taskid_.Get();
}
inline void Lock::_internal_set_taskid(const std::string& value) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Lock::_internal_mutable_taskid() {
  
  return taskid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Lock::release_taskid() {
  // @@protoc_insertion_point(field_release:LockNS.Lock.taskID)
  return taskid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Lock::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (taskid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LockNS.Lock.taskID)
}

// .LockNS.LockRequest lockRequest = 2;
inline bool Lock::_internal_has_lockrequest() const {
  return this != internal_default_instance() && lockrequest_ != nullptr;
}
inline bool Lock::has_lockrequest() const {
  return _internal_has_lockrequest();
}
inline void Lock::clear_lockrequest() {
  if (GetArenaForAllocation() == nullptr && lockrequest_ != nullptr) {
    delete lockrequest_;
  }
  lockrequest_ = nullptr;
}
inline const ::LockNS::LockRequest& Lock::_internal_lockrequest() const {
  const ::LockNS::LockRequest* p = lockrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::LockNS::LockRequest&>(
      ::LockNS::_LockRequest_default_instance_);
}
inline const ::LockNS::LockRequest& Lock::lockrequest() const {
  // @@protoc_insertion_point(field_get:LockNS.Lock.lockRequest)
  return _internal_lockrequest();
}
inline void Lock::unsafe_arena_set_allocated_lockrequest(
    ::LockNS::LockRequest* lockrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockrequest_);
  }
  lockrequest_ = lockrequest;
  if (lockrequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LockNS.Lock.lockRequest)
}
inline ::LockNS::LockRequest* Lock::release_lockrequest() {
  
  ::LockNS::LockRequest* temp = lockrequest_;
  lockrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LockNS::LockRequest* Lock::unsafe_arena_release_lockrequest() {
  // @@protoc_insertion_point(field_release:LockNS.Lock.lockRequest)
  
  ::LockNS::LockRequest* temp = lockrequest_;
  lockrequest_ = nullptr;
  return temp;
}
inline ::LockNS::LockRequest* Lock::_internal_mutable_lockrequest() {
  
  if (lockrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::LockNS::LockRequest>(GetArenaForAllocation());
    lockrequest_ = p;
  }
  return lockrequest_;
}
inline ::LockNS::LockRequest* Lock::mutable_lockrequest() {
  ::LockNS::LockRequest* _msg = _internal_mutable_lockrequest();
  // @@protoc_insertion_point(field_mutable:LockNS.Lock.lockRequest)
  return _msg;
}
inline void Lock::set_allocated_lockrequest(::LockNS::LockRequest* lockrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lockrequest_;
  }
  if (lockrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::LockNS::LockRequest>::GetOwningArena(lockrequest);
    if (message_arena != submessage_arena) {
      lockrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockrequest, submessage_arena);
    }
    
  } else {
    
  }
  lockrequest_ = lockrequest;
  // @@protoc_insertion_point(field_set_allocated:LockNS.Lock.lockRequest)
}

// .LockNS.LockResponse lockResponse = 3;
inline bool Lock::_internal_has_lockresponse() const {
  return this != internal_default_instance() && lockresponse_ != nullptr;
}
inline bool Lock::has_lockresponse() const {
  return _internal_has_lockresponse();
}
inline void Lock::clear_lockresponse() {
  if (GetArenaForAllocation() == nullptr && lockresponse_ != nullptr) {
    delete lockresponse_;
  }
  lockresponse_ = nullptr;
}
inline const ::LockNS::LockResponse& Lock::_internal_lockresponse() const {
  const ::LockNS::LockResponse* p = lockresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::LockNS::LockResponse&>(
      ::LockNS::_LockResponse_default_instance_);
}
inline const ::LockNS::LockResponse& Lock::lockresponse() const {
  // @@protoc_insertion_point(field_get:LockNS.Lock.lockResponse)
  return _internal_lockresponse();
}
inline void Lock::unsafe_arena_set_allocated_lockresponse(
    ::LockNS::LockResponse* lockresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockresponse_);
  }
  lockresponse_ = lockresponse;
  if (lockresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LockNS.Lock.lockResponse)
}
inline ::LockNS::LockResponse* Lock::release_lockresponse() {
  
  ::LockNS::LockResponse* temp = lockresponse_;
  lockresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::LockNS::LockResponse* Lock::unsafe_arena_release_lockresponse() {
  // @@protoc_insertion_point(field_release:LockNS.Lock.lockResponse)
  
  ::LockNS::LockResponse* temp = lockresponse_;
  lockresponse_ = nullptr;
  return temp;
}
inline ::LockNS::LockResponse* Lock::_internal_mutable_lockresponse() {
  
  if (lockresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::LockNS::LockResponse>(GetArenaForAllocation());
    lockresponse_ = p;
  }
  return lockresponse_;
}
inline ::LockNS::LockResponse* Lock::mutable_lockresponse() {
  ::LockNS::LockResponse* _msg = _internal_mutable_lockresponse();
  // @@protoc_insertion_point(field_mutable:LockNS.Lock.lockResponse)
  return _msg;
}
inline void Lock::set_allocated_lockresponse(::LockNS::LockResponse* lockresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lockresponse_;
  }
  if (lockresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::LockNS::LockResponse>::GetOwningArena(lockresponse);
    if (message_arena != submessage_arena) {
      lockresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockresponse, submessage_arena);
    }
    
  } else {
    
  }
  lockresponse_ = lockresponse;
  // @@protoc_insertion_point(field_set_allocated:LockNS.Lock.lockResponse)
}

// -------------------------------------------------------------------

// LockRequest

// .LockNS.LockOpt lockOpt = 1;
inline void LockRequest::clear_lockopt() {
  lockopt_ = 0;
}
inline ::LockNS::LockOpt LockRequest::_internal_lockopt() const {
  return static_cast< ::LockNS::LockOpt >(lockopt_);
}
inline ::LockNS::LockOpt LockRequest::lockopt() const {
  // @@protoc_insertion_point(field_get:LockNS.LockRequest.lockOpt)
  return _internal_lockopt();
}
inline void LockRequest::_internal_set_lockopt(::LockNS::LockOpt value) {
  
  lockopt_ = value;
}
inline void LockRequest::set_lockopt(::LockNS::LockOpt value) {
  _internal_set_lockopt(value);
  // @@protoc_insertion_point(field_set:LockNS.LockRequest.lockOpt)
}

// -------------------------------------------------------------------

// LockResponse

// .LockNS.LockResultCode resultCode = 1;
inline void LockResponse::clear_resultcode() {
  resultcode_ = 0;
}
inline ::LockNS::LockResultCode LockResponse::_internal_resultcode() const {
  return static_cast< ::LockNS::LockResultCode >(resultcode_);
}
inline ::LockNS::LockResultCode LockResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:LockNS.LockResponse.resultCode)
  return _internal_resultcode();
}
inline void LockResponse::_internal_set_resultcode(::LockNS::LockResultCode value) {
  
  resultcode_ = value;
}
inline void LockResponse::set_resultcode(::LockNS::LockResultCode value) {
  _internal_set_resultcode(value);
  // @@protoc_insertion_point(field_set:LockNS.LockResponse.resultCode)
}

// .LockNS.LockStatus lockStatus = 2;
inline void LockResponse::clear_lockstatus() {
  lockstatus_ = 0;
}
inline ::LockNS::LockStatus LockResponse::_internal_lockstatus() const {
  return static_cast< ::LockNS::LockStatus >(lockstatus_);
}
inline ::LockNS::LockStatus LockResponse::lockstatus() const {
  // @@protoc_insertion_point(field_get:LockNS.LockResponse.lockStatus)
  return _internal_lockstatus();
}
inline void LockResponse::_internal_set_lockstatus(::LockNS::LockStatus value) {
  
  lockstatus_ = value;
}
inline void LockResponse::set_lockstatus(::LockNS::LockStatus value) {
  _internal_set_lockstatus(value);
  // @@protoc_insertion_point(field_set:LockNS.LockResponse.lockStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LockNS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LockNS::LockOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LockNS::LockOpt>() {
  return ::LockNS::LockOpt_descriptor();
}
template <> struct is_proto_enum< ::LockNS::LockStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LockNS::LockStatus>() {
  return ::LockNS::LockStatus_descriptor();
}
template <> struct is_proto_enum< ::LockNS::LockResultCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LockNS::LockResultCode>() {
  return ::LockNS::LockResultCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lock_2eproto
