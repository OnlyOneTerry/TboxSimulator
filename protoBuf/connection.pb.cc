// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#include "connection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ConnectionNS {
constexpr Connection::Connection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connectioninfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vehiclesn_(nullptr)
  , connectionoption_(0)

  , connectionresult_(0)
{}
struct ConnectionDefaultTypeInternal {
  constexpr ConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionDefaultTypeInternal() {}
  union {
    Connection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionDefaultTypeInternal _Connection_default_instance_;
constexpr VehicleSN::VehicleSN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tboxsn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imei_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iccid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VehicleSNDefaultTypeInternal {
  constexpr VehicleSNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleSNDefaultTypeInternal() {}
  union {
    VehicleSN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleSNDefaultTypeInternal _VehicleSN_default_instance_;
}  // namespace ConnectionNS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_connection_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_connection_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_connection_2eproto = nullptr;

const uint32_t TableStruct_connection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::Connection, taskid_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::Connection, token_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::Connection, connectionoption_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::Connection, connectionresult_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::Connection, vehiclesn_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::Connection, connectioninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::VehicleSN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::VehicleSN, vid_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::VehicleSN, tboxsn_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::VehicleSN, imei_),
  PROTOBUF_FIELD_OFFSET(::ConnectionNS::VehicleSN, iccid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ConnectionNS::Connection)},
  { 12, -1, -1, sizeof(::ConnectionNS::VehicleSN)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ConnectionNS::_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ConnectionNS::_VehicleSN_default_instance_),
};

const char descriptor_table_protodef_connection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020connection.proto\022\014ConnectionNS\"\343\001\n\nCon"
  "nection\022\016\n\006taskID\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\0228"
  "\n\020connectionOption\030\003 \001(\0162\036.ConnectionNS."
  "ConnectionOption\0228\n\020connectionResult\030\004 \001"
  "(\0162\036.ConnectionNS.ConnectionResult\022*\n\tve"
  "hicleSN\030\005 \001(\0132\027.ConnectionNS.VehicleSN\022\026"
  "\n\016connectionInfo\030\006 \001(\t\"E\n\tVehicleSN\022\013\n\003v"
  "id\030\001 \001(\t\022\016\n\006tboxSn\030\002 \001(\t\022\014\n\004imei\030\003 \001(\t\022\r"
  "\n\005iccid\030\004 \001(\t*b\n\020ConnectionOption\022\r\n\tLOG"
  "IN_REQ\020\000\022\016\n\nLOGOUT_REQ\020\001\022\016\n\nBEAT_HEART\020\002"
  "\022\016\n\nLOGIN_RESP\020\003\022\017\n\013LOGOUT_RESP\020\004*\345\001\n\020Co"
  "nnectionResult\022\021\n\rLOGIN_SUCCESS\020\000\022\021\n\rLOG"
  "IN_FAILURE\020\001\022\027\n\023LOGIN_CERTIFY_ERROR\020\002\022\023\n"
  "\017LOGIN_VIN_ERROR\020\003\022\025\n\021LOGIN_ICCID_ERROR\020"
  "\004\022\022\n\016LOGIN_SN_ERROR\020\005\022\024\n\020LOGIN_IMSI_ERRO"
  "R\020\006\022\024\n\020LOGIN_IMEI_ERROR\020\007\022\022\n\016LOGOUT_SUCC"
  "ESS\020\010\022\022\n\016LOGOUT_FAILURE\020\tB \n\rcom.iov.pro"
  "toB\017ConnectionProtob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_connection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connection_2eproto = {
  false, false, 707, descriptor_table_protodef_connection_2eproto, "connection.proto", 
  &descriptor_table_connection_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_connection_2eproto::offsets,
  file_level_metadata_connection_2eproto, file_level_enum_descriptors_connection_2eproto, file_level_service_descriptors_connection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_connection_2eproto_getter() {
  return &descriptor_table_connection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_connection_2eproto(&descriptor_table_connection_2eproto);
namespace ConnectionNS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_connection_2eproto);
  return file_level_enum_descriptors_connection_2eproto[0];
}
bool ConnectionOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_connection_2eproto);
  return file_level_enum_descriptors_connection_2eproto[1];
}
bool ConnectionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Connection::_Internal {
 public:
  static const ::ConnectionNS::VehicleSN& vehiclesn(const Connection* msg);
};

const ::ConnectionNS::VehicleSN&
Connection::_Internal::vehiclesn(const Connection* msg) {
  return *msg->vehiclesn_;
}
Connection::Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConnectionNS.Connection)
}
Connection::Connection(const Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  connectioninfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    connectioninfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectioninfo().empty()) {
    connectioninfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connectioninfo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_vehiclesn()) {
    vehiclesn_ = new ::ConnectionNS::VehicleSN(*from.vehiclesn_);
  } else {
    vehiclesn_ = nullptr;
  }
  ::memcpy(&connectionoption_, &from.connectionoption_,
    static_cast<size_t>(reinterpret_cast<char*>(&connectionresult_) -
    reinterpret_cast<char*>(&connectionoption_)) + sizeof(connectionresult_));
  // @@protoc_insertion_point(copy_constructor:ConnectionNS.Connection)
}

inline void Connection::SharedCtor() {
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
connectioninfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  connectioninfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehiclesn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connectionresult_) -
    reinterpret_cast<char*>(&vehiclesn_)) + sizeof(connectionresult_));
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:ConnectionNS.Connection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connectioninfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vehiclesn_;
}

void Connection::ArenaDtor(void* object) {
  Connection* _this = reinterpret_cast< Connection* >(object);
  (void)_this;
}
void Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectionNS.Connection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmpty();
  token_.ClearToEmpty();
  connectioninfo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && vehiclesn_ != nullptr) {
    delete vehiclesn_;
  }
  vehiclesn_ = nullptr;
  ::memset(&connectionoption_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectionresult_) -
      reinterpret_cast<char*>(&connectionoption_)) + sizeof(connectionresult_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionNS.Connection.taskID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionNS.Connection.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ConnectionNS.ConnectionOption connectionOption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectionoption(static_cast<::ConnectionNS::ConnectionOption>(val));
        } else
          goto handle_unusual;
        continue;
      // .ConnectionNS.ConnectionResult connectionResult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectionresult(static_cast<::ConnectionNS::ConnectionResult>(val));
        } else
          goto handle_unusual;
        continue;
      // .ConnectionNS.VehicleSN vehicleSN = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehiclesn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string connectionInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_connectioninfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionNS.Connection.connectionInfo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectionNS.Connection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionNS.Connection.taskID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionNS.Connection.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // .ConnectionNS.ConnectionOption connectionOption = 3;
  if (this->_internal_connectionoption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_connectionoption(), target);
  }

  // .ConnectionNS.ConnectionResult connectionResult = 4;
  if (this->_internal_connectionresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_connectionresult(), target);
  }

  // .ConnectionNS.VehicleSN vehicleSN = 5;
  if (this->_internal_has_vehiclesn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::vehiclesn(this), target, stream);
  }

  // string connectionInfo = 6;
  if (!this->_internal_connectioninfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectioninfo().data(), static_cast<int>(this->_internal_connectioninfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionNS.Connection.connectionInfo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_connectioninfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectionNS.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectionNS.Connection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string connectionInfo = 6;
  if (!this->_internal_connectioninfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectioninfo());
  }

  // .ConnectionNS.VehicleSN vehicleSN = 5;
  if (this->_internal_has_vehiclesn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehiclesn_);
  }

  // .ConnectionNS.ConnectionOption connectionOption = 3;
  if (this->_internal_connectionoption() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectionoption());
  }

  // .ConnectionNS.ConnectionResult connectionResult = 4;
  if (this->_internal_connectionresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectionresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Connection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connection::GetClassData() const { return &_class_data_; }

void Connection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Connection *>(to)->MergeFrom(
      static_cast<const Connection &>(from));
}


void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectionNS.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (!from._internal_connectioninfo().empty()) {
    _internal_set_connectioninfo(from._internal_connectioninfo());
  }
  if (from._internal_has_vehiclesn()) {
    _internal_mutable_vehiclesn()->::ConnectionNS::VehicleSN::MergeFrom(from._internal_vehiclesn());
  }
  if (from._internal_connectionoption() != 0) {
    _internal_set_connectionoption(from._internal_connectionoption());
  }
  if (from._internal_connectionresult() != 0) {
    _internal_set_connectionresult(from._internal_connectionresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectionNS.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::InternalSwap(Connection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &connectioninfo_, lhs_arena,
      &other->connectioninfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Connection, connectionresult_)
      + sizeof(Connection::connectionresult_)
      - PROTOBUF_FIELD_OFFSET(Connection, vehiclesn_)>(
          reinterpret_cast<char*>(&vehiclesn_),
          reinterpret_cast<char*>(&other->vehiclesn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Connection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[0]);
}

// ===================================================================

class VehicleSN::_Internal {
 public:
};

VehicleSN::VehicleSN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ConnectionNS.VehicleSN)
}
VehicleSN::VehicleSN(const VehicleSN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vid().empty()) {
    vid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vid(), 
      GetArenaForAllocation());
  }
  tboxsn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tboxsn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tboxsn().empty()) {
    tboxsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tboxsn(), 
      GetArenaForAllocation());
  }
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imei().empty()) {
    imei_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imei(), 
      GetArenaForAllocation());
  }
  iccid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    iccid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iccid().empty()) {
    iccid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iccid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ConnectionNS.VehicleSN)
}

inline void VehicleSN::SharedCtor() {
vid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tboxsn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tboxsn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
iccid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  iccid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleSN::~VehicleSN() {
  // @@protoc_insertion_point(destructor:ConnectionNS.VehicleSN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleSN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tboxsn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iccid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleSN::ArenaDtor(void* object) {
  VehicleSN* _this = reinterpret_cast< VehicleSN* >(object);
  (void)_this;
}
void VehicleSN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleSN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleSN::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectionNS.VehicleSN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vid_.ClearToEmpty();
  tboxsn_.ClearToEmpty();
  imei_.ClearToEmpty();
  iccid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleSN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionNS.VehicleSN.vid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tboxSn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tboxsn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionNS.VehicleSN.tboxSn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string imei = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_imei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionNS.VehicleSN.imei"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string iccid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_iccid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionNS.VehicleSN.iccid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleSN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectionNS.VehicleSN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vid = 1;
  if (!this->_internal_vid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vid().data(), static_cast<int>(this->_internal_vid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionNS.VehicleSN.vid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vid(), target);
  }

  // string tboxSn = 2;
  if (!this->_internal_tboxsn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tboxsn().data(), static_cast<int>(this->_internal_tboxsn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionNS.VehicleSN.tboxSn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tboxsn(), target);
  }

  // string imei = 3;
  if (!this->_internal_imei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionNS.VehicleSN.imei");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_imei(), target);
  }

  // string iccid = 4;
  if (!this->_internal_iccid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iccid().data(), static_cast<int>(this->_internal_iccid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionNS.VehicleSN.iccid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_iccid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectionNS.VehicleSN)
  return target;
}

size_t VehicleSN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectionNS.VehicleSN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vid = 1;
  if (!this->_internal_vid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vid());
  }

  // string tboxSn = 2;
  if (!this->_internal_tboxsn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tboxsn());
  }

  // string imei = 3;
  if (!this->_internal_imei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // string iccid = 4;
  if (!this->_internal_iccid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iccid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleSN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleSN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleSN::GetClassData() const { return &_class_data_; }

void VehicleSN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleSN *>(to)->MergeFrom(
      static_cast<const VehicleSN &>(from));
}


void VehicleSN::MergeFrom(const VehicleSN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectionNS.VehicleSN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vid().empty()) {
    _internal_set_vid(from._internal_vid());
  }
  if (!from._internal_tboxsn().empty()) {
    _internal_set_tboxsn(from._internal_tboxsn());
  }
  if (!from._internal_imei().empty()) {
    _internal_set_imei(from._internal_imei());
  }
  if (!from._internal_iccid().empty()) {
    _internal_set_iccid(from._internal_iccid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleSN::CopyFrom(const VehicleSN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectionNS.VehicleSN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSN::IsInitialized() const {
  return true;
}

void VehicleSN::InternalSwap(VehicleSN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vid_, lhs_arena,
      &other->vid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tboxsn_, lhs_arena,
      &other->tboxsn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imei_, lhs_arena,
      &other->imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iccid_, lhs_arena,
      &other->iccid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_connection_2eproto_getter, &descriptor_table_connection_2eproto_once,
      file_level_metadata_connection_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ConnectionNS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConnectionNS::Connection* Arena::CreateMaybeMessage< ::ConnectionNS::Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectionNS::Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::ConnectionNS::VehicleSN* Arena::CreateMaybeMessage< ::ConnectionNS::VehicleSN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ConnectionNS::VehicleSN >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
