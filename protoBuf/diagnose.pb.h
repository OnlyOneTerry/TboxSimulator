// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_diagnose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_diagnose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_diagnose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_diagnose_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diagnose_2eproto;
namespace DiagnoseNS {
class CleanDTC;
struct CleanDTCDefaultTypeInternal;
extern CleanDTCDefaultTypeInternal _CleanDTC_default_instance_;
class DIDContent;
struct DIDContentDefaultTypeInternal;
extern DIDContentDefaultTypeInternal _DIDContent_default_instance_;
class DiagDID;
struct DiagDIDDefaultTypeInternal;
extern DiagDIDDefaultTypeInternal _DiagDID_default_instance_;
class DiagEcuAddr;
struct DiagEcuAddrDefaultTypeInternal;
extern DiagEcuAddrDefaultTypeInternal _DiagEcuAddr_default_instance_;
class Diagnose;
struct DiagnoseDefaultTypeInternal;
extern DiagnoseDefaultTypeInternal _Diagnose_default_instance_;
class EcuAddr;
struct EcuAddrDefaultTypeInternal;
extern EcuAddrDefaultTypeInternal _EcuAddr_default_instance_;
class EcuAddrDTC;
struct EcuAddrDTCDefaultTypeInternal;
extern EcuAddrDTCDefaultTypeInternal _EcuAddrDTC_default_instance_;
class EcuDTC;
struct EcuDTCDefaultTypeInternal;
extern EcuDTCDefaultTypeInternal _EcuDTC_default_instance_;
class ReadDID;
struct ReadDIDDefaultTypeInternal;
extern ReadDIDDefaultTypeInternal _ReadDID_default_instance_;
class ReadDTC;
struct ReadDTCDefaultTypeInternal;
extern ReadDTCDefaultTypeInternal _ReadDTC_default_instance_;
class WriteDID;
struct WriteDIDDefaultTypeInternal;
extern WriteDIDDefaultTypeInternal _WriteDID_default_instance_;
}  // namespace DiagnoseNS
PROTOBUF_NAMESPACE_OPEN
template<> ::DiagnoseNS::CleanDTC* Arena::CreateMaybeMessage<::DiagnoseNS::CleanDTC>(Arena*);
template<> ::DiagnoseNS::DIDContent* Arena::CreateMaybeMessage<::DiagnoseNS::DIDContent>(Arena*);
template<> ::DiagnoseNS::DiagDID* Arena::CreateMaybeMessage<::DiagnoseNS::DiagDID>(Arena*);
template<> ::DiagnoseNS::DiagEcuAddr* Arena::CreateMaybeMessage<::DiagnoseNS::DiagEcuAddr>(Arena*);
template<> ::DiagnoseNS::Diagnose* Arena::CreateMaybeMessage<::DiagnoseNS::Diagnose>(Arena*);
template<> ::DiagnoseNS::EcuAddr* Arena::CreateMaybeMessage<::DiagnoseNS::EcuAddr>(Arena*);
template<> ::DiagnoseNS::EcuAddrDTC* Arena::CreateMaybeMessage<::DiagnoseNS::EcuAddrDTC>(Arena*);
template<> ::DiagnoseNS::EcuDTC* Arena::CreateMaybeMessage<::DiagnoseNS::EcuDTC>(Arena*);
template<> ::DiagnoseNS::ReadDID* Arena::CreateMaybeMessage<::DiagnoseNS::ReadDID>(Arena*);
template<> ::DiagnoseNS::ReadDTC* Arena::CreateMaybeMessage<::DiagnoseNS::ReadDTC>(Arena*);
template<> ::DiagnoseNS::WriteDID* Arena::CreateMaybeMessage<::DiagnoseNS::WriteDID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DiagnoseNS {

enum DiagnoseOpt : int {
  INVALID = 0,
  READ_DTC = 1,
  CLEAN_DTC = 2,
  READ_DID = 3,
  WRITE_DID = 4,
  ECU_ADDR = 5,
  DiagnoseOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DiagnoseOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DiagnoseOpt_IsValid(int value);
constexpr DiagnoseOpt DiagnoseOpt_MIN = INVALID;
constexpr DiagnoseOpt DiagnoseOpt_MAX = ECU_ADDR;
constexpr int DiagnoseOpt_ARRAYSIZE = DiagnoseOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiagnoseOpt_descriptor();
template<typename T>
inline const std::string& DiagnoseOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiagnoseOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiagnoseOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DiagnoseOpt_descriptor(), enum_t_value);
}
inline bool DiagnoseOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiagnoseOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DiagnoseOpt>(
    DiagnoseOpt_descriptor(), name, value);
}
enum Ecus : int {
  Unknow = 0,
  Tbox = 1,
  Bms = 2,
  Mcu = 3,
  Dcdc = 4,
  Abs = 5,
  Scm = 6,
  Inv = 7,
  Ofbc = 8,
  Imu = 9,
  Tft = 10,
  Lcsc = 11,
  Rcsc = 12,
  Flm = 13,
  Hlc = 14,
  Wpc = 15,
  Dik = 16,
  Lpdc = 17,
  Tpms = 18,
  Cddc = 19,
  Gcu = 20,
  Vcu = 21,
  Hmi = 22,
  Obc = 23,
  Hhd = 24,
  Obd = 25,
  TboxSK = 26,
  BmsSK = 27,
  Ecus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Ecus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Ecus_IsValid(int value);
constexpr Ecus Ecus_MIN = Unknow;
constexpr Ecus Ecus_MAX = BmsSK;
constexpr int Ecus_ARRAYSIZE = Ecus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ecus_descriptor();
template<typename T>
inline const std::string& Ecus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ecus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ecus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ecus_descriptor(), enum_t_value);
}
inline bool Ecus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ecus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ecus>(
    Ecus_descriptor(), name, value);
}
enum DiagnoseResultCode : int {
  SUCCESS = 0,
  LEN_ERROR = 1,
  ECU_NOT_MATCH = 2,
  DID_READ_NOT_EXIST = 3,
  ECU_ADDR_NO_RESP = 4,
  SNS = 5,
  PARAM_ERROR = 6,
  FAILED = 7,
  DiagnoseResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DiagnoseResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DiagnoseResultCode_IsValid(int value);
constexpr DiagnoseResultCode DiagnoseResultCode_MIN = SUCCESS;
constexpr DiagnoseResultCode DiagnoseResultCode_MAX = FAILED;
constexpr int DiagnoseResultCode_ARRAYSIZE = DiagnoseResultCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiagnoseResultCode_descriptor();
template<typename T>
inline const std::string& DiagnoseResultCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiagnoseResultCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiagnoseResultCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DiagnoseResultCode_descriptor(), enum_t_value);
}
inline bool DiagnoseResultCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiagnoseResultCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DiagnoseResultCode>(
    DiagnoseResultCode_descriptor(), name, value);
}
// ===================================================================

class Diagnose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.Diagnose) */ {
 public:
  inline Diagnose() : Diagnose(nullptr) {}
  ~Diagnose() override;
  explicit constexpr Diagnose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Diagnose(const Diagnose& from);
  Diagnose(Diagnose&& from) noexcept
    : Diagnose() {
    *this = ::std::move(from);
  }

  inline Diagnose& operator=(const Diagnose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Diagnose& operator=(Diagnose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Diagnose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Diagnose* internal_default_instance() {
    return reinterpret_cast<const Diagnose*>(
               &_Diagnose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Diagnose& a, Diagnose& b) {
    a.Swap(&b);
  }
  inline void Swap(Diagnose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Diagnose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Diagnose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Diagnose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Diagnose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Diagnose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.Diagnose";
  }
  protected:
  explicit Diagnose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIDFieldNumber = 1,
    kReadDIDFieldNumber = 3,
    kWriteDIDFieldNumber = 4,
    kReadDTCFieldNumber = 5,
    kCleanDTCFieldNumber = 6,
    kDiagEcuAddrFieldNumber = 7,
    kDiagnoseOptFieldNumber = 2,
  };
  // string taskID = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // .DiagnoseNS.ReadDID readDID = 3;
  bool has_readdid() const;
  private:
  bool _internal_has_readdid() const;
  public:
  void clear_readdid();
  const ::DiagnoseNS::ReadDID& readdid() const;
  PROTOBUF_NODISCARD ::DiagnoseNS::ReadDID* release_readdid();
  ::DiagnoseNS::ReadDID* mutable_readdid();
  void set_allocated_readdid(::DiagnoseNS::ReadDID* readdid);
  private:
  const ::DiagnoseNS::ReadDID& _internal_readdid() const;
  ::DiagnoseNS::ReadDID* _internal_mutable_readdid();
  public:
  void unsafe_arena_set_allocated_readdid(
      ::DiagnoseNS::ReadDID* readdid);
  ::DiagnoseNS::ReadDID* unsafe_arena_release_readdid();

  // .DiagnoseNS.WriteDID writeDID = 4;
  bool has_writedid() const;
  private:
  bool _internal_has_writedid() const;
  public:
  void clear_writedid();
  const ::DiagnoseNS::WriteDID& writedid() const;
  PROTOBUF_NODISCARD ::DiagnoseNS::WriteDID* release_writedid();
  ::DiagnoseNS::WriteDID* mutable_writedid();
  void set_allocated_writedid(::DiagnoseNS::WriteDID* writedid);
  private:
  const ::DiagnoseNS::WriteDID& _internal_writedid() const;
  ::DiagnoseNS::WriteDID* _internal_mutable_writedid();
  public:
  void unsafe_arena_set_allocated_writedid(
      ::DiagnoseNS::WriteDID* writedid);
  ::DiagnoseNS::WriteDID* unsafe_arena_release_writedid();

  // .DiagnoseNS.ReadDTC readDTC = 5;
  bool has_readdtc() const;
  private:
  bool _internal_has_readdtc() const;
  public:
  void clear_readdtc();
  const ::DiagnoseNS::ReadDTC& readdtc() const;
  PROTOBUF_NODISCARD ::DiagnoseNS::ReadDTC* release_readdtc();
  ::DiagnoseNS::ReadDTC* mutable_readdtc();
  void set_allocated_readdtc(::DiagnoseNS::ReadDTC* readdtc);
  private:
  const ::DiagnoseNS::ReadDTC& _internal_readdtc() const;
  ::DiagnoseNS::ReadDTC* _internal_mutable_readdtc();
  public:
  void unsafe_arena_set_allocated_readdtc(
      ::DiagnoseNS::ReadDTC* readdtc);
  ::DiagnoseNS::ReadDTC* unsafe_arena_release_readdtc();

  // .DiagnoseNS.CleanDTC cleanDTC = 6;
  bool has_cleandtc() const;
  private:
  bool _internal_has_cleandtc() const;
  public:
  void clear_cleandtc();
  const ::DiagnoseNS::CleanDTC& cleandtc() const;
  PROTOBUF_NODISCARD ::DiagnoseNS::CleanDTC* release_cleandtc();
  ::DiagnoseNS::CleanDTC* mutable_cleandtc();
  void set_allocated_cleandtc(::DiagnoseNS::CleanDTC* cleandtc);
  private:
  const ::DiagnoseNS::CleanDTC& _internal_cleandtc() const;
  ::DiagnoseNS::CleanDTC* _internal_mutable_cleandtc();
  public:
  void unsafe_arena_set_allocated_cleandtc(
      ::DiagnoseNS::CleanDTC* cleandtc);
  ::DiagnoseNS::CleanDTC* unsafe_arena_release_cleandtc();

  // .DiagnoseNS.DiagEcuAddr diagEcuAddr = 7;
  bool has_diagecuaddr() const;
  private:
  bool _internal_has_diagecuaddr() const;
  public:
  void clear_diagecuaddr();
  const ::DiagnoseNS::DiagEcuAddr& diagecuaddr() const;
  PROTOBUF_NODISCARD ::DiagnoseNS::DiagEcuAddr* release_diagecuaddr();
  ::DiagnoseNS::DiagEcuAddr* mutable_diagecuaddr();
  void set_allocated_diagecuaddr(::DiagnoseNS::DiagEcuAddr* diagecuaddr);
  private:
  const ::DiagnoseNS::DiagEcuAddr& _internal_diagecuaddr() const;
  ::DiagnoseNS::DiagEcuAddr* _internal_mutable_diagecuaddr();
  public:
  void unsafe_arena_set_allocated_diagecuaddr(
      ::DiagnoseNS::DiagEcuAddr* diagecuaddr);
  ::DiagnoseNS::DiagEcuAddr* unsafe_arena_release_diagecuaddr();

  // .DiagnoseNS.DiagnoseOpt diagnoseOpt = 2;
  void clear_diagnoseopt();
  ::DiagnoseNS::DiagnoseOpt diagnoseopt() const;
  void set_diagnoseopt(::DiagnoseNS::DiagnoseOpt value);
  private:
  ::DiagnoseNS::DiagnoseOpt _internal_diagnoseopt() const;
  void _internal_set_diagnoseopt(::DiagnoseNS::DiagnoseOpt value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.Diagnose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::DiagnoseNS::ReadDID* readdid_;
  ::DiagnoseNS::WriteDID* writedid_;
  ::DiagnoseNS::ReadDTC* readdtc_;
  ::DiagnoseNS::CleanDTC* cleandtc_;
  ::DiagnoseNS::DiagEcuAddr* diagecuaddr_;
  int diagnoseopt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class ReadDID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.ReadDID) */ {
 public:
  inline ReadDID() : ReadDID(nullptr) {}
  ~ReadDID() override;
  explicit constexpr ReadDID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadDID(const ReadDID& from);
  ReadDID(ReadDID&& from) noexcept
    : ReadDID() {
    *this = ::std::move(from);
  }

  inline ReadDID& operator=(const ReadDID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDID& operator=(ReadDID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadDID& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadDID* internal_default_instance() {
    return reinterpret_cast<const ReadDID*>(
               &_ReadDID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadDID& a, ReadDID& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadDID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadDID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadDID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadDID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.ReadDID";
  }
  protected:
  explicit ReadDID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadDIDContentFieldNumber = 1,
    kDiagnoseResultCodeFieldNumber = 2,
  };
  // repeated .DiagnoseNS.DIDContent readDIDContent = 1;
  int readdidcontent_size() const;
  private:
  int _internal_readdidcontent_size() const;
  public:
  void clear_readdidcontent();
  ::DiagnoseNS::DIDContent* mutable_readdidcontent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >*
      mutable_readdidcontent();
  private:
  const ::DiagnoseNS::DIDContent& _internal_readdidcontent(int index) const;
  ::DiagnoseNS::DIDContent* _internal_add_readdidcontent();
  public:
  const ::DiagnoseNS::DIDContent& readdidcontent(int index) const;
  ::DiagnoseNS::DIDContent* add_readdidcontent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >&
      readdidcontent() const;

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  void clear_diagnoseresultcode();
  ::DiagnoseNS::DiagnoseResultCode diagnoseresultcode() const;
  void set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  private:
  ::DiagnoseNS::DiagnoseResultCode _internal_diagnoseresultcode() const;
  void _internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.ReadDID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent > readdidcontent_;
  int diagnoseresultcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class WriteDID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.WriteDID) */ {
 public:
  inline WriteDID() : WriteDID(nullptr) {}
  ~WriteDID() override;
  explicit constexpr WriteDID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteDID(const WriteDID& from);
  WriteDID(WriteDID&& from) noexcept
    : WriteDID() {
    *this = ::std::move(from);
  }

  inline WriteDID& operator=(const WriteDID& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteDID& operator=(WriteDID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteDID& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteDID* internal_default_instance() {
    return reinterpret_cast<const WriteDID*>(
               &_WriteDID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WriteDID& a, WriteDID& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteDID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteDID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteDID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteDID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteDID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteDID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteDID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.WriteDID";
  }
  protected:
  explicit WriteDID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteDIDContentFieldNumber = 1,
    kDiagnoseResultCodeFieldNumber = 2,
  };
  // repeated .DiagnoseNS.DIDContent writeDIDContent = 1;
  int writedidcontent_size() const;
  private:
  int _internal_writedidcontent_size() const;
  public:
  void clear_writedidcontent();
  ::DiagnoseNS::DIDContent* mutable_writedidcontent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >*
      mutable_writedidcontent();
  private:
  const ::DiagnoseNS::DIDContent& _internal_writedidcontent(int index) const;
  ::DiagnoseNS::DIDContent* _internal_add_writedidcontent();
  public:
  const ::DiagnoseNS::DIDContent& writedidcontent(int index) const;
  ::DiagnoseNS::DIDContent* add_writedidcontent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >&
      writedidcontent() const;

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  void clear_diagnoseresultcode();
  ::DiagnoseNS::DiagnoseResultCode diagnoseresultcode() const;
  void set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  private:
  ::DiagnoseNS::DiagnoseResultCode _internal_diagnoseresultcode() const;
  void _internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.WriteDID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent > writedidcontent_;
  int diagnoseresultcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class ReadDTC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.ReadDTC) */ {
 public:
  inline ReadDTC() : ReadDTC(nullptr) {}
  ~ReadDTC() override;
  explicit constexpr ReadDTC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadDTC(const ReadDTC& from);
  ReadDTC(ReadDTC&& from) noexcept
    : ReadDTC() {
    *this = ::std::move(from);
  }

  inline ReadDTC& operator=(const ReadDTC& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDTC& operator=(ReadDTC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadDTC& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadDTC* internal_default_instance() {
    return reinterpret_cast<const ReadDTC*>(
               &_ReadDTC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadDTC& a, ReadDTC& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDTC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDTC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadDTC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadDTC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadDTC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadDTC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDTC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.ReadDTC";
  }
  protected:
  explicit ReadDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcuFieldNumber = 1,
    kEcuDTCFieldNumber = 2,
    kDiagnoseResultCodeFieldNumber = 3,
  };
  // repeated .DiagnoseNS.Ecus ecu = 1;
  int ecu_size() const;
  private:
  int _internal_ecu_size() const;
  public:
  void clear_ecu();
  private:
  ::DiagnoseNS::Ecus _internal_ecu(int index) const;
  void _internal_add_ecu(::DiagnoseNS::Ecus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ecu();
  public:
  ::DiagnoseNS::Ecus ecu(int index) const;
  void set_ecu(int index, ::DiagnoseNS::Ecus value);
  void add_ecu(::DiagnoseNS::Ecus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ecu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ecu();

  // repeated .DiagnoseNS.EcuDTC ecuDTC = 2;
  int ecudtc_size() const;
  private:
  int _internal_ecudtc_size() const;
  public:
  void clear_ecudtc();
  ::DiagnoseNS::EcuDTC* mutable_ecudtc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuDTC >*
      mutable_ecudtc();
  private:
  const ::DiagnoseNS::EcuDTC& _internal_ecudtc(int index) const;
  ::DiagnoseNS::EcuDTC* _internal_add_ecudtc();
  public:
  const ::DiagnoseNS::EcuDTC& ecudtc(int index) const;
  ::DiagnoseNS::EcuDTC* add_ecudtc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuDTC >&
      ecudtc() const;

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
  void clear_diagnoseresultcode();
  ::DiagnoseNS::DiagnoseResultCode diagnoseresultcode() const;
  void set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  private:
  ::DiagnoseNS::DiagnoseResultCode _internal_diagnoseresultcode() const;
  void _internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.ReadDTC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ecu_;
  mutable std::atomic<int> _ecu_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuDTC > ecudtc_;
  int diagnoseresultcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class EcuDTC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.EcuDTC) */ {
 public:
  inline EcuDTC() : EcuDTC(nullptr) {}
  ~EcuDTC() override;
  explicit constexpr EcuDTC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EcuDTC(const EcuDTC& from);
  EcuDTC(EcuDTC&& from) noexcept
    : EcuDTC() {
    *this = ::std::move(from);
  }

  inline EcuDTC& operator=(const EcuDTC& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcuDTC& operator=(EcuDTC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcuDTC& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcuDTC* internal_default_instance() {
    return reinterpret_cast<const EcuDTC*>(
               &_EcuDTC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EcuDTC& a, EcuDTC& b) {
    a.Swap(&b);
  }
  inline void Swap(EcuDTC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcuDTC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcuDTC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcuDTC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EcuDTC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EcuDTC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcuDTC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.EcuDTC";
  }
  protected:
  explicit EcuDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiagnoseCodeFieldNumber = 2,
    kEcuFieldNumber = 1,
  };
  // repeated string diagnoseCode = 2;
  int diagnosecode_size() const;
  private:
  int _internal_diagnosecode_size() const;
  public:
  void clear_diagnosecode();
  const std::string& diagnosecode(int index) const;
  std::string* mutable_diagnosecode(int index);
  void set_diagnosecode(int index, const std::string& value);
  void set_diagnosecode(int index, std::string&& value);
  void set_diagnosecode(int index, const char* value);
  void set_diagnosecode(int index, const char* value, size_t size);
  std::string* add_diagnosecode();
  void add_diagnosecode(const std::string& value);
  void add_diagnosecode(std::string&& value);
  void add_diagnosecode(const char* value);
  void add_diagnosecode(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& diagnosecode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_diagnosecode();
  private:
  const std::string& _internal_diagnosecode(int index) const;
  std::string* _internal_add_diagnosecode();
  public:

  // .DiagnoseNS.Ecus ecu = 1;
  void clear_ecu();
  ::DiagnoseNS::Ecus ecu() const;
  void set_ecu(::DiagnoseNS::Ecus value);
  private:
  ::DiagnoseNS::Ecus _internal_ecu() const;
  void _internal_set_ecu(::DiagnoseNS::Ecus value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.EcuDTC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> diagnosecode_;
  int ecu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class CleanDTC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.CleanDTC) */ {
 public:
  inline CleanDTC() : CleanDTC(nullptr) {}
  ~CleanDTC() override;
  explicit constexpr CleanDTC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CleanDTC(const CleanDTC& from);
  CleanDTC(CleanDTC&& from) noexcept
    : CleanDTC() {
    *this = ::std::move(from);
  }

  inline CleanDTC& operator=(const CleanDTC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanDTC& operator=(CleanDTC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CleanDTC& default_instance() {
    return *internal_default_instance();
  }
  static inline const CleanDTC* internal_default_instance() {
    return reinterpret_cast<const CleanDTC*>(
               &_CleanDTC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CleanDTC& a, CleanDTC& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanDTC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CleanDTC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CleanDTC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CleanDTC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CleanDTC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CleanDTC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanDTC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.CleanDTC";
  }
  protected:
  explicit CleanDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcuFieldNumber = 1,
    kDiagnoseResultCodeFieldNumber = 2,
  };
  // repeated .DiagnoseNS.Ecus ecu = 1;
  int ecu_size() const;
  private:
  int _internal_ecu_size() const;
  public:
  void clear_ecu();
  private:
  ::DiagnoseNS::Ecus _internal_ecu(int index) const;
  void _internal_add_ecu(::DiagnoseNS::Ecus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ecu();
  public:
  ::DiagnoseNS::Ecus ecu(int index) const;
  void set_ecu(int index, ::DiagnoseNS::Ecus value);
  void add_ecu(::DiagnoseNS::Ecus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ecu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ecu();

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
  void clear_diagnoseresultcode();
  ::DiagnoseNS::DiagnoseResultCode diagnoseresultcode() const;
  void set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  private:
  ::DiagnoseNS::DiagnoseResultCode _internal_diagnoseresultcode() const;
  void _internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.CleanDTC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ecu_;
  mutable std::atomic<int> _ecu_cached_byte_size_;
  int diagnoseresultcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class DiagEcuAddr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.DiagEcuAddr) */ {
 public:
  inline DiagEcuAddr() : DiagEcuAddr(nullptr) {}
  ~DiagEcuAddr() override;
  explicit constexpr DiagEcuAddr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiagEcuAddr(const DiagEcuAddr& from);
  DiagEcuAddr(DiagEcuAddr&& from) noexcept
    : DiagEcuAddr() {
    *this = ::std::move(from);
  }

  inline DiagEcuAddr& operator=(const DiagEcuAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagEcuAddr& operator=(DiagEcuAddr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiagEcuAddr& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiagEcuAddr* internal_default_instance() {
    return reinterpret_cast<const DiagEcuAddr*>(
               &_DiagEcuAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiagEcuAddr& a, DiagEcuAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(DiagEcuAddr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiagEcuAddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiagEcuAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiagEcuAddr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiagEcuAddr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiagEcuAddr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagEcuAddr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.DiagEcuAddr";
  }
  protected:
  explicit DiagEcuAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcuAddrFieldNumber = 1,
    kEcuAddrDTCFieldNumber = 2,
    kDiagnoseResultCodeFieldNumber = 3,
  };
  // repeated .DiagnoseNS.EcuAddr ecuAddr = 1;
  int ecuaddr_size() const;
  private:
  int _internal_ecuaddr_size() const;
  public:
  void clear_ecuaddr();
  ::DiagnoseNS::EcuAddr* mutable_ecuaddr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddr >*
      mutable_ecuaddr();
  private:
  const ::DiagnoseNS::EcuAddr& _internal_ecuaddr(int index) const;
  ::DiagnoseNS::EcuAddr* _internal_add_ecuaddr();
  public:
  const ::DiagnoseNS::EcuAddr& ecuaddr(int index) const;
  ::DiagnoseNS::EcuAddr* add_ecuaddr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddr >&
      ecuaddr() const;

  // repeated .DiagnoseNS.EcuAddrDTC ecuAddrDTC = 2;
  int ecuaddrdtc_size() const;
  private:
  int _internal_ecuaddrdtc_size() const;
  public:
  void clear_ecuaddrdtc();
  ::DiagnoseNS::EcuAddrDTC* mutable_ecuaddrdtc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddrDTC >*
      mutable_ecuaddrdtc();
  private:
  const ::DiagnoseNS::EcuAddrDTC& _internal_ecuaddrdtc(int index) const;
  ::DiagnoseNS::EcuAddrDTC* _internal_add_ecuaddrdtc();
  public:
  const ::DiagnoseNS::EcuAddrDTC& ecuaddrdtc(int index) const;
  ::DiagnoseNS::EcuAddrDTC* add_ecuaddrdtc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddrDTC >&
      ecuaddrdtc() const;

  // .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
  void clear_diagnoseresultcode();
  ::DiagnoseNS::DiagnoseResultCode diagnoseresultcode() const;
  void set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  private:
  ::DiagnoseNS::DiagnoseResultCode _internal_diagnoseresultcode() const;
  void _internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.DiagEcuAddr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddr > ecuaddr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddrDTC > ecuaddrdtc_;
  int diagnoseresultcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class EcuAddrDTC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.EcuAddrDTC) */ {
 public:
  inline EcuAddrDTC() : EcuAddrDTC(nullptr) {}
  ~EcuAddrDTC() override;
  explicit constexpr EcuAddrDTC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EcuAddrDTC(const EcuAddrDTC& from);
  EcuAddrDTC(EcuAddrDTC&& from) noexcept
    : EcuAddrDTC() {
    *this = ::std::move(from);
  }

  inline EcuAddrDTC& operator=(const EcuAddrDTC& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcuAddrDTC& operator=(EcuAddrDTC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcuAddrDTC& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcuAddrDTC* internal_default_instance() {
    return reinterpret_cast<const EcuAddrDTC*>(
               &_EcuAddrDTC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EcuAddrDTC& a, EcuAddrDTC& b) {
    a.Swap(&b);
  }
  inline void Swap(EcuAddrDTC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcuAddrDTC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcuAddrDTC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcuAddrDTC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EcuAddrDTC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EcuAddrDTC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcuAddrDTC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.EcuAddrDTC";
  }
  protected:
  explicit EcuAddrDTC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiagnoseCodeFieldNumber = 2,
    kEcuAddrFieldNumber = 1,
  };
  // repeated string diagnoseCode = 2;
  int diagnosecode_size() const;
  private:
  int _internal_diagnosecode_size() const;
  public:
  void clear_diagnosecode();
  const std::string& diagnosecode(int index) const;
  std::string* mutable_diagnosecode(int index);
  void set_diagnosecode(int index, const std::string& value);
  void set_diagnosecode(int index, std::string&& value);
  void set_diagnosecode(int index, const char* value);
  void set_diagnosecode(int index, const char* value, size_t size);
  std::string* add_diagnosecode();
  void add_diagnosecode(const std::string& value);
  void add_diagnosecode(std::string&& value);
  void add_diagnosecode(const char* value);
  void add_diagnosecode(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& diagnosecode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_diagnosecode();
  private:
  const std::string& _internal_diagnosecode(int index) const;
  std::string* _internal_add_diagnosecode();
  public:

  // .DiagnoseNS.EcuAddr ecuAddr = 1;
  bool has_ecuaddr() const;
  private:
  bool _internal_has_ecuaddr() const;
  public:
  void clear_ecuaddr();
  const ::DiagnoseNS::EcuAddr& ecuaddr() const;
  PROTOBUF_NODISCARD ::DiagnoseNS::EcuAddr* release_ecuaddr();
  ::DiagnoseNS::EcuAddr* mutable_ecuaddr();
  void set_allocated_ecuaddr(::DiagnoseNS::EcuAddr* ecuaddr);
  private:
  const ::DiagnoseNS::EcuAddr& _internal_ecuaddr() const;
  ::DiagnoseNS::EcuAddr* _internal_mutable_ecuaddr();
  public:
  void unsafe_arena_set_allocated_ecuaddr(
      ::DiagnoseNS::EcuAddr* ecuaddr);
  ::DiagnoseNS::EcuAddr* unsafe_arena_release_ecuaddr();

  // @@protoc_insertion_point(class_scope:DiagnoseNS.EcuAddrDTC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> diagnosecode_;
  ::DiagnoseNS::EcuAddr* ecuaddr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class EcuAddr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.EcuAddr) */ {
 public:
  inline EcuAddr() : EcuAddr(nullptr) {}
  ~EcuAddr() override;
  explicit constexpr EcuAddr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EcuAddr(const EcuAddr& from);
  EcuAddr(EcuAddr&& from) noexcept
    : EcuAddr() {
    *this = ::std::move(from);
  }

  inline EcuAddr& operator=(const EcuAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcuAddr& operator=(EcuAddr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EcuAddr& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcuAddr* internal_default_instance() {
    return reinterpret_cast<const EcuAddr*>(
               &_EcuAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EcuAddr& a, EcuAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(EcuAddr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcuAddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcuAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcuAddr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EcuAddr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EcuAddr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcuAddr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.EcuAddr";
  }
  protected:
  explicit EcuAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcuAddrTxFieldNumber = 1,
    kEcuAddrRxFieldNumber = 2,
  };
  // uint32 ecuAddrTx = 1;
  void clear_ecuaddrtx();
  uint32_t ecuaddrtx() const;
  void set_ecuaddrtx(uint32_t value);
  private:
  uint32_t _internal_ecuaddrtx() const;
  void _internal_set_ecuaddrtx(uint32_t value);
  public:

  // uint32 ecuAddrRx = 2;
  void clear_ecuaddrrx();
  uint32_t ecuaddrrx() const;
  void set_ecuaddrrx(uint32_t value);
  private:
  uint32_t _internal_ecuaddrrx() const;
  void _internal_set_ecuaddrrx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.EcuAddr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ecuaddrtx_;
  uint32_t ecuaddrrx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class DIDContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.DIDContent) */ {
 public:
  inline DIDContent() : DIDContent(nullptr) {}
  ~DIDContent() override;
  explicit constexpr DIDContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DIDContent(const DIDContent& from);
  DIDContent(DIDContent&& from) noexcept
    : DIDContent() {
    *this = ::std::move(from);
  }

  inline DIDContent& operator=(const DIDContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DIDContent& operator=(DIDContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DIDContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DIDContent* internal_default_instance() {
    return reinterpret_cast<const DIDContent*>(
               &_DIDContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DIDContent& a, DIDContent& b) {
    a.Swap(&b);
  }
  inline void Swap(DIDContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DIDContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DIDContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DIDContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DIDContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DIDContent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DIDContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.DIDContent";
  }
  protected:
  explicit DIDContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiagDIDFieldNumber = 2,
    kEcuFieldNumber = 1,
  };
  // repeated .DiagnoseNS.DiagDID diagDID = 2;
  int diagdid_size() const;
  private:
  int _internal_diagdid_size() const;
  public:
  void clear_diagdid();
  ::DiagnoseNS::DiagDID* mutable_diagdid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DiagDID >*
      mutable_diagdid();
  private:
  const ::DiagnoseNS::DiagDID& _internal_diagdid(int index) const;
  ::DiagnoseNS::DiagDID* _internal_add_diagdid();
  public:
  const ::DiagnoseNS::DiagDID& diagdid(int index) const;
  ::DiagnoseNS::DiagDID* add_diagdid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DiagDID >&
      diagdid() const;

  // .DiagnoseNS.Ecus ecu = 1;
  void clear_ecu();
  ::DiagnoseNS::Ecus ecu() const;
  void set_ecu(::DiagnoseNS::Ecus value);
  private:
  ::DiagnoseNS::Ecus _internal_ecu() const;
  void _internal_set_ecu(::DiagnoseNS::Ecus value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.DIDContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DiagDID > diagdid_;
  int ecu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// -------------------------------------------------------------------

class DiagDID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DiagnoseNS.DiagDID) */ {
 public:
  inline DiagDID() : DiagDID(nullptr) {}
  ~DiagDID() override;
  explicit constexpr DiagDID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiagDID(const DiagDID& from);
  DiagDID(DiagDID&& from) noexcept
    : DiagDID() {
    *this = ::std::move(from);
  }

  inline DiagDID& operator=(const DiagDID& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagDID& operator=(DiagDID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiagDID& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiagDID* internal_default_instance() {
    return reinterpret_cast<const DiagDID*>(
               &_DiagDID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DiagDID& a, DiagDID& b) {
    a.Swap(&b);
  }
  inline void Swap(DiagDID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiagDID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiagDID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiagDID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiagDID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiagDID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagDID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DiagnoseNS.DiagDID";
  }
  protected:
  explicit DiagDID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDidValueFieldNumber = 2,
    kDidFieldNumber = 1,
  };
  // bytes didValue = 2;
  void clear_didvalue();
  const std::string& didvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_didvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_didvalue();
  PROTOBUF_NODISCARD std::string* release_didvalue();
  void set_allocated_didvalue(std::string* didvalue);
  private:
  const std::string& _internal_didvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_didvalue(const std::string& value);
  std::string* _internal_mutable_didvalue();
  public:

  // uint32 did = 1;
  void clear_did();
  uint32_t did() const;
  void set_did(uint32_t value);
  private:
  uint32_t _internal_did() const;
  void _internal_set_did(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DiagnoseNS.DiagDID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr didvalue_;
  uint32_t did_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_diagnose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Diagnose

// string taskID = 1;
inline void Diagnose::clear_taskid() {
  taskid_.ClearToEmpty();
}
inline const std::string& Diagnose::taskid() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.Diagnose.taskID)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Diagnose::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DiagnoseNS.Diagnose.taskID)
}
inline std::string* Diagnose::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.Diagnose.taskID)
  return _s;
}
inline const std::string& Diagnose::_internal_taskid() const {
  return taskid_.Get();
}
inline void Diagnose::_internal_set_taskid(const std::string& value) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Diagnose::_internal_mutable_taskid() {
  
  return taskid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Diagnose::release_taskid() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.Diagnose.taskID)
  return taskid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Diagnose::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (taskid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.Diagnose.taskID)
}

// .DiagnoseNS.DiagnoseOpt diagnoseOpt = 2;
inline void Diagnose::clear_diagnoseopt() {
  diagnoseopt_ = 0;
}
inline ::DiagnoseNS::DiagnoseOpt Diagnose::_internal_diagnoseopt() const {
  return static_cast< ::DiagnoseNS::DiagnoseOpt >(diagnoseopt_);
}
inline ::DiagnoseNS::DiagnoseOpt Diagnose::diagnoseopt() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.Diagnose.diagnoseOpt)
  return _internal_diagnoseopt();
}
inline void Diagnose::_internal_set_diagnoseopt(::DiagnoseNS::DiagnoseOpt value) {
  
  diagnoseopt_ = value;
}
inline void Diagnose::set_diagnoseopt(::DiagnoseNS::DiagnoseOpt value) {
  _internal_set_diagnoseopt(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.Diagnose.diagnoseOpt)
}

// .DiagnoseNS.ReadDID readDID = 3;
inline bool Diagnose::_internal_has_readdid() const {
  return this != internal_default_instance() && readdid_ != nullptr;
}
inline bool Diagnose::has_readdid() const {
  return _internal_has_readdid();
}
inline void Diagnose::clear_readdid() {
  if (GetArenaForAllocation() == nullptr && readdid_ != nullptr) {
    delete readdid_;
  }
  readdid_ = nullptr;
}
inline const ::DiagnoseNS::ReadDID& Diagnose::_internal_readdid() const {
  const ::DiagnoseNS::ReadDID* p = readdid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiagnoseNS::ReadDID&>(
      ::DiagnoseNS::_ReadDID_default_instance_);
}
inline const ::DiagnoseNS::ReadDID& Diagnose::readdid() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.Diagnose.readDID)
  return _internal_readdid();
}
inline void Diagnose::unsafe_arena_set_allocated_readdid(
    ::DiagnoseNS::ReadDID* readdid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readdid_);
  }
  readdid_ = readdid;
  if (readdid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiagnoseNS.Diagnose.readDID)
}
inline ::DiagnoseNS::ReadDID* Diagnose::release_readdid() {
  
  ::DiagnoseNS::ReadDID* temp = readdid_;
  readdid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiagnoseNS::ReadDID* Diagnose::unsafe_arena_release_readdid() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.Diagnose.readDID)
  
  ::DiagnoseNS::ReadDID* temp = readdid_;
  readdid_ = nullptr;
  return temp;
}
inline ::DiagnoseNS::ReadDID* Diagnose::_internal_mutable_readdid() {
  
  if (readdid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiagnoseNS::ReadDID>(GetArenaForAllocation());
    readdid_ = p;
  }
  return readdid_;
}
inline ::DiagnoseNS::ReadDID* Diagnose::mutable_readdid() {
  ::DiagnoseNS::ReadDID* _msg = _internal_mutable_readdid();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.Diagnose.readDID)
  return _msg;
}
inline void Diagnose::set_allocated_readdid(::DiagnoseNS::ReadDID* readdid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete readdid_;
  }
  if (readdid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DiagnoseNS::ReadDID>::GetOwningArena(readdid);
    if (message_arena != submessage_arena) {
      readdid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readdid, submessage_arena);
    }
    
  } else {
    
  }
  readdid_ = readdid;
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.Diagnose.readDID)
}

// .DiagnoseNS.WriteDID writeDID = 4;
inline bool Diagnose::_internal_has_writedid() const {
  return this != internal_default_instance() && writedid_ != nullptr;
}
inline bool Diagnose::has_writedid() const {
  return _internal_has_writedid();
}
inline void Diagnose::clear_writedid() {
  if (GetArenaForAllocation() == nullptr && writedid_ != nullptr) {
    delete writedid_;
  }
  writedid_ = nullptr;
}
inline const ::DiagnoseNS::WriteDID& Diagnose::_internal_writedid() const {
  const ::DiagnoseNS::WriteDID* p = writedid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiagnoseNS::WriteDID&>(
      ::DiagnoseNS::_WriteDID_default_instance_);
}
inline const ::DiagnoseNS::WriteDID& Diagnose::writedid() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.Diagnose.writeDID)
  return _internal_writedid();
}
inline void Diagnose::unsafe_arena_set_allocated_writedid(
    ::DiagnoseNS::WriteDID* writedid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(writedid_);
  }
  writedid_ = writedid;
  if (writedid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiagnoseNS.Diagnose.writeDID)
}
inline ::DiagnoseNS::WriteDID* Diagnose::release_writedid() {
  
  ::DiagnoseNS::WriteDID* temp = writedid_;
  writedid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiagnoseNS::WriteDID* Diagnose::unsafe_arena_release_writedid() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.Diagnose.writeDID)
  
  ::DiagnoseNS::WriteDID* temp = writedid_;
  writedid_ = nullptr;
  return temp;
}
inline ::DiagnoseNS::WriteDID* Diagnose::_internal_mutable_writedid() {
  
  if (writedid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiagnoseNS::WriteDID>(GetArenaForAllocation());
    writedid_ = p;
  }
  return writedid_;
}
inline ::DiagnoseNS::WriteDID* Diagnose::mutable_writedid() {
  ::DiagnoseNS::WriteDID* _msg = _internal_mutable_writedid();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.Diagnose.writeDID)
  return _msg;
}
inline void Diagnose::set_allocated_writedid(::DiagnoseNS::WriteDID* writedid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete writedid_;
  }
  if (writedid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DiagnoseNS::WriteDID>::GetOwningArena(writedid);
    if (message_arena != submessage_arena) {
      writedid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, writedid, submessage_arena);
    }
    
  } else {
    
  }
  writedid_ = writedid;
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.Diagnose.writeDID)
}

// .DiagnoseNS.ReadDTC readDTC = 5;
inline bool Diagnose::_internal_has_readdtc() const {
  return this != internal_default_instance() && readdtc_ != nullptr;
}
inline bool Diagnose::has_readdtc() const {
  return _internal_has_readdtc();
}
inline void Diagnose::clear_readdtc() {
  if (GetArenaForAllocation() == nullptr && readdtc_ != nullptr) {
    delete readdtc_;
  }
  readdtc_ = nullptr;
}
inline const ::DiagnoseNS::ReadDTC& Diagnose::_internal_readdtc() const {
  const ::DiagnoseNS::ReadDTC* p = readdtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiagnoseNS::ReadDTC&>(
      ::DiagnoseNS::_ReadDTC_default_instance_);
}
inline const ::DiagnoseNS::ReadDTC& Diagnose::readdtc() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.Diagnose.readDTC)
  return _internal_readdtc();
}
inline void Diagnose::unsafe_arena_set_allocated_readdtc(
    ::DiagnoseNS::ReadDTC* readdtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readdtc_);
  }
  readdtc_ = readdtc;
  if (readdtc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiagnoseNS.Diagnose.readDTC)
}
inline ::DiagnoseNS::ReadDTC* Diagnose::release_readdtc() {
  
  ::DiagnoseNS::ReadDTC* temp = readdtc_;
  readdtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiagnoseNS::ReadDTC* Diagnose::unsafe_arena_release_readdtc() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.Diagnose.readDTC)
  
  ::DiagnoseNS::ReadDTC* temp = readdtc_;
  readdtc_ = nullptr;
  return temp;
}
inline ::DiagnoseNS::ReadDTC* Diagnose::_internal_mutable_readdtc() {
  
  if (readdtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiagnoseNS::ReadDTC>(GetArenaForAllocation());
    readdtc_ = p;
  }
  return readdtc_;
}
inline ::DiagnoseNS::ReadDTC* Diagnose::mutable_readdtc() {
  ::DiagnoseNS::ReadDTC* _msg = _internal_mutable_readdtc();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.Diagnose.readDTC)
  return _msg;
}
inline void Diagnose::set_allocated_readdtc(::DiagnoseNS::ReadDTC* readdtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete readdtc_;
  }
  if (readdtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DiagnoseNS::ReadDTC>::GetOwningArena(readdtc);
    if (message_arena != submessage_arena) {
      readdtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readdtc, submessage_arena);
    }
    
  } else {
    
  }
  readdtc_ = readdtc;
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.Diagnose.readDTC)
}

// .DiagnoseNS.CleanDTC cleanDTC = 6;
inline bool Diagnose::_internal_has_cleandtc() const {
  return this != internal_default_instance() && cleandtc_ != nullptr;
}
inline bool Diagnose::has_cleandtc() const {
  return _internal_has_cleandtc();
}
inline void Diagnose::clear_cleandtc() {
  if (GetArenaForAllocation() == nullptr && cleandtc_ != nullptr) {
    delete cleandtc_;
  }
  cleandtc_ = nullptr;
}
inline const ::DiagnoseNS::CleanDTC& Diagnose::_internal_cleandtc() const {
  const ::DiagnoseNS::CleanDTC* p = cleandtc_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiagnoseNS::CleanDTC&>(
      ::DiagnoseNS::_CleanDTC_default_instance_);
}
inline const ::DiagnoseNS::CleanDTC& Diagnose::cleandtc() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.Diagnose.cleanDTC)
  return _internal_cleandtc();
}
inline void Diagnose::unsafe_arena_set_allocated_cleandtc(
    ::DiagnoseNS::CleanDTC* cleandtc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cleandtc_);
  }
  cleandtc_ = cleandtc;
  if (cleandtc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiagnoseNS.Diagnose.cleanDTC)
}
inline ::DiagnoseNS::CleanDTC* Diagnose::release_cleandtc() {
  
  ::DiagnoseNS::CleanDTC* temp = cleandtc_;
  cleandtc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiagnoseNS::CleanDTC* Diagnose::unsafe_arena_release_cleandtc() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.Diagnose.cleanDTC)
  
  ::DiagnoseNS::CleanDTC* temp = cleandtc_;
  cleandtc_ = nullptr;
  return temp;
}
inline ::DiagnoseNS::CleanDTC* Diagnose::_internal_mutable_cleandtc() {
  
  if (cleandtc_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiagnoseNS::CleanDTC>(GetArenaForAllocation());
    cleandtc_ = p;
  }
  return cleandtc_;
}
inline ::DiagnoseNS::CleanDTC* Diagnose::mutable_cleandtc() {
  ::DiagnoseNS::CleanDTC* _msg = _internal_mutable_cleandtc();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.Diagnose.cleanDTC)
  return _msg;
}
inline void Diagnose::set_allocated_cleandtc(::DiagnoseNS::CleanDTC* cleandtc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cleandtc_;
  }
  if (cleandtc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DiagnoseNS::CleanDTC>::GetOwningArena(cleandtc);
    if (message_arena != submessage_arena) {
      cleandtc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleandtc, submessage_arena);
    }
    
  } else {
    
  }
  cleandtc_ = cleandtc;
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.Diagnose.cleanDTC)
}

// .DiagnoseNS.DiagEcuAddr diagEcuAddr = 7;
inline bool Diagnose::_internal_has_diagecuaddr() const {
  return this != internal_default_instance() && diagecuaddr_ != nullptr;
}
inline bool Diagnose::has_diagecuaddr() const {
  return _internal_has_diagecuaddr();
}
inline void Diagnose::clear_diagecuaddr() {
  if (GetArenaForAllocation() == nullptr && diagecuaddr_ != nullptr) {
    delete diagecuaddr_;
  }
  diagecuaddr_ = nullptr;
}
inline const ::DiagnoseNS::DiagEcuAddr& Diagnose::_internal_diagecuaddr() const {
  const ::DiagnoseNS::DiagEcuAddr* p = diagecuaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiagnoseNS::DiagEcuAddr&>(
      ::DiagnoseNS::_DiagEcuAddr_default_instance_);
}
inline const ::DiagnoseNS::DiagEcuAddr& Diagnose::diagecuaddr() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.Diagnose.diagEcuAddr)
  return _internal_diagecuaddr();
}
inline void Diagnose::unsafe_arena_set_allocated_diagecuaddr(
    ::DiagnoseNS::DiagEcuAddr* diagecuaddr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagecuaddr_);
  }
  diagecuaddr_ = diagecuaddr;
  if (diagecuaddr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiagnoseNS.Diagnose.diagEcuAddr)
}
inline ::DiagnoseNS::DiagEcuAddr* Diagnose::release_diagecuaddr() {
  
  ::DiagnoseNS::DiagEcuAddr* temp = diagecuaddr_;
  diagecuaddr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiagnoseNS::DiagEcuAddr* Diagnose::unsafe_arena_release_diagecuaddr() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.Diagnose.diagEcuAddr)
  
  ::DiagnoseNS::DiagEcuAddr* temp = diagecuaddr_;
  diagecuaddr_ = nullptr;
  return temp;
}
inline ::DiagnoseNS::DiagEcuAddr* Diagnose::_internal_mutable_diagecuaddr() {
  
  if (diagecuaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiagnoseNS::DiagEcuAddr>(GetArenaForAllocation());
    diagecuaddr_ = p;
  }
  return diagecuaddr_;
}
inline ::DiagnoseNS::DiagEcuAddr* Diagnose::mutable_diagecuaddr() {
  ::DiagnoseNS::DiagEcuAddr* _msg = _internal_mutable_diagecuaddr();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.Diagnose.diagEcuAddr)
  return _msg;
}
inline void Diagnose::set_allocated_diagecuaddr(::DiagnoseNS::DiagEcuAddr* diagecuaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete diagecuaddr_;
  }
  if (diagecuaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DiagnoseNS::DiagEcuAddr>::GetOwningArena(diagecuaddr);
    if (message_arena != submessage_arena) {
      diagecuaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagecuaddr, submessage_arena);
    }
    
  } else {
    
  }
  diagecuaddr_ = diagecuaddr;
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.Diagnose.diagEcuAddr)
}

// -------------------------------------------------------------------

// ReadDID

// repeated .DiagnoseNS.DIDContent readDIDContent = 1;
inline int ReadDID::_internal_readdidcontent_size() const {
  return readdidcontent_.size();
}
inline int ReadDID::readdidcontent_size() const {
  return _internal_readdidcontent_size();
}
inline void ReadDID::clear_readdidcontent() {
  readdidcontent_.Clear();
}
inline ::DiagnoseNS::DIDContent* ReadDID::mutable_readdidcontent(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.ReadDID.readDIDContent)
  return readdidcontent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >*
ReadDID::mutable_readdidcontent() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.ReadDID.readDIDContent)
  return &readdidcontent_;
}
inline const ::DiagnoseNS::DIDContent& ReadDID::_internal_readdidcontent(int index) const {
  return readdidcontent_.Get(index);
}
inline const ::DiagnoseNS::DIDContent& ReadDID::readdidcontent(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.ReadDID.readDIDContent)
  return _internal_readdidcontent(index);
}
inline ::DiagnoseNS::DIDContent* ReadDID::_internal_add_readdidcontent() {
  return readdidcontent_.Add();
}
inline ::DiagnoseNS::DIDContent* ReadDID::add_readdidcontent() {
  ::DiagnoseNS::DIDContent* _add = _internal_add_readdidcontent();
  // @@protoc_insertion_point(field_add:DiagnoseNS.ReadDID.readDIDContent)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >&
ReadDID::readdidcontent() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.ReadDID.readDIDContent)
  return readdidcontent_;
}

// .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
inline void ReadDID::clear_diagnoseresultcode() {
  diagnoseresultcode_ = 0;
}
inline ::DiagnoseNS::DiagnoseResultCode ReadDID::_internal_diagnoseresultcode() const {
  return static_cast< ::DiagnoseNS::DiagnoseResultCode >(diagnoseresultcode_);
}
inline ::DiagnoseNS::DiagnoseResultCode ReadDID::diagnoseresultcode() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.ReadDID.diagnoseResultCode)
  return _internal_diagnoseresultcode();
}
inline void ReadDID::_internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  
  diagnoseresultcode_ = value;
}
inline void ReadDID::set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  _internal_set_diagnoseresultcode(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.ReadDID.diagnoseResultCode)
}

// -------------------------------------------------------------------

// WriteDID

// repeated .DiagnoseNS.DIDContent writeDIDContent = 1;
inline int WriteDID::_internal_writedidcontent_size() const {
  return writedidcontent_.size();
}
inline int WriteDID::writedidcontent_size() const {
  return _internal_writedidcontent_size();
}
inline void WriteDID::clear_writedidcontent() {
  writedidcontent_.Clear();
}
inline ::DiagnoseNS::DIDContent* WriteDID::mutable_writedidcontent(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.WriteDID.writeDIDContent)
  return writedidcontent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >*
WriteDID::mutable_writedidcontent() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.WriteDID.writeDIDContent)
  return &writedidcontent_;
}
inline const ::DiagnoseNS::DIDContent& WriteDID::_internal_writedidcontent(int index) const {
  return writedidcontent_.Get(index);
}
inline const ::DiagnoseNS::DIDContent& WriteDID::writedidcontent(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.WriteDID.writeDIDContent)
  return _internal_writedidcontent(index);
}
inline ::DiagnoseNS::DIDContent* WriteDID::_internal_add_writedidcontent() {
  return writedidcontent_.Add();
}
inline ::DiagnoseNS::DIDContent* WriteDID::add_writedidcontent() {
  ::DiagnoseNS::DIDContent* _add = _internal_add_writedidcontent();
  // @@protoc_insertion_point(field_add:DiagnoseNS.WriteDID.writeDIDContent)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DIDContent >&
WriteDID::writedidcontent() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.WriteDID.writeDIDContent)
  return writedidcontent_;
}

// .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
inline void WriteDID::clear_diagnoseresultcode() {
  diagnoseresultcode_ = 0;
}
inline ::DiagnoseNS::DiagnoseResultCode WriteDID::_internal_diagnoseresultcode() const {
  return static_cast< ::DiagnoseNS::DiagnoseResultCode >(diagnoseresultcode_);
}
inline ::DiagnoseNS::DiagnoseResultCode WriteDID::diagnoseresultcode() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.WriteDID.diagnoseResultCode)
  return _internal_diagnoseresultcode();
}
inline void WriteDID::_internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  
  diagnoseresultcode_ = value;
}
inline void WriteDID::set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  _internal_set_diagnoseresultcode(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.WriteDID.diagnoseResultCode)
}

// -------------------------------------------------------------------

// ReadDTC

// repeated .DiagnoseNS.Ecus ecu = 1;
inline int ReadDTC::_internal_ecu_size() const {
  return ecu_.size();
}
inline int ReadDTC::ecu_size() const {
  return _internal_ecu_size();
}
inline void ReadDTC::clear_ecu() {
  ecu_.Clear();
}
inline ::DiagnoseNS::Ecus ReadDTC::_internal_ecu(int index) const {
  return static_cast< ::DiagnoseNS::Ecus >(ecu_.Get(index));
}
inline ::DiagnoseNS::Ecus ReadDTC::ecu(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.ReadDTC.ecu)
  return _internal_ecu(index);
}
inline void ReadDTC::set_ecu(int index, ::DiagnoseNS::Ecus value) {
  ecu_.Set(index, value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.ReadDTC.ecu)
}
inline void ReadDTC::_internal_add_ecu(::DiagnoseNS::Ecus value) {
  ecu_.Add(value);
}
inline void ReadDTC::add_ecu(::DiagnoseNS::Ecus value) {
  _internal_add_ecu(value);
  // @@protoc_insertion_point(field_add:DiagnoseNS.ReadDTC.ecu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ReadDTC::ecu() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.ReadDTC.ecu)
  return ecu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ReadDTC::_internal_mutable_ecu() {
  return &ecu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ReadDTC::mutable_ecu() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.ReadDTC.ecu)
  return _internal_mutable_ecu();
}

// repeated .DiagnoseNS.EcuDTC ecuDTC = 2;
inline int ReadDTC::_internal_ecudtc_size() const {
  return ecudtc_.size();
}
inline int ReadDTC::ecudtc_size() const {
  return _internal_ecudtc_size();
}
inline void ReadDTC::clear_ecudtc() {
  ecudtc_.Clear();
}
inline ::DiagnoseNS::EcuDTC* ReadDTC::mutable_ecudtc(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.ReadDTC.ecuDTC)
  return ecudtc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuDTC >*
ReadDTC::mutable_ecudtc() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.ReadDTC.ecuDTC)
  return &ecudtc_;
}
inline const ::DiagnoseNS::EcuDTC& ReadDTC::_internal_ecudtc(int index) const {
  return ecudtc_.Get(index);
}
inline const ::DiagnoseNS::EcuDTC& ReadDTC::ecudtc(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.ReadDTC.ecuDTC)
  return _internal_ecudtc(index);
}
inline ::DiagnoseNS::EcuDTC* ReadDTC::_internal_add_ecudtc() {
  return ecudtc_.Add();
}
inline ::DiagnoseNS::EcuDTC* ReadDTC::add_ecudtc() {
  ::DiagnoseNS::EcuDTC* _add = _internal_add_ecudtc();
  // @@protoc_insertion_point(field_add:DiagnoseNS.ReadDTC.ecuDTC)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuDTC >&
ReadDTC::ecudtc() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.ReadDTC.ecuDTC)
  return ecudtc_;
}

// .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
inline void ReadDTC::clear_diagnoseresultcode() {
  diagnoseresultcode_ = 0;
}
inline ::DiagnoseNS::DiagnoseResultCode ReadDTC::_internal_diagnoseresultcode() const {
  return static_cast< ::DiagnoseNS::DiagnoseResultCode >(diagnoseresultcode_);
}
inline ::DiagnoseNS::DiagnoseResultCode ReadDTC::diagnoseresultcode() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.ReadDTC.diagnoseResultCode)
  return _internal_diagnoseresultcode();
}
inline void ReadDTC::_internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  
  diagnoseresultcode_ = value;
}
inline void ReadDTC::set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  _internal_set_diagnoseresultcode(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.ReadDTC.diagnoseResultCode)
}

// -------------------------------------------------------------------

// EcuDTC

// .DiagnoseNS.Ecus ecu = 1;
inline void EcuDTC::clear_ecu() {
  ecu_ = 0;
}
inline ::DiagnoseNS::Ecus EcuDTC::_internal_ecu() const {
  return static_cast< ::DiagnoseNS::Ecus >(ecu_);
}
inline ::DiagnoseNS::Ecus EcuDTC::ecu() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.EcuDTC.ecu)
  return _internal_ecu();
}
inline void EcuDTC::_internal_set_ecu(::DiagnoseNS::Ecus value) {
  
  ecu_ = value;
}
inline void EcuDTC::set_ecu(::DiagnoseNS::Ecus value) {
  _internal_set_ecu(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.EcuDTC.ecu)
}

// repeated string diagnoseCode = 2;
inline int EcuDTC::_internal_diagnosecode_size() const {
  return diagnosecode_.size();
}
inline int EcuDTC::diagnosecode_size() const {
  return _internal_diagnosecode_size();
}
inline void EcuDTC::clear_diagnosecode() {
  diagnosecode_.Clear();
}
inline std::string* EcuDTC::add_diagnosecode() {
  std::string* _s = _internal_add_diagnosecode();
  // @@protoc_insertion_point(field_add_mutable:DiagnoseNS.EcuDTC.diagnoseCode)
  return _s;
}
inline const std::string& EcuDTC::_internal_diagnosecode(int index) const {
  return diagnosecode_.Get(index);
}
inline const std::string& EcuDTC::diagnosecode(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.EcuDTC.diagnoseCode)
  return _internal_diagnosecode(index);
}
inline std::string* EcuDTC::mutable_diagnosecode(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.EcuDTC.diagnoseCode)
  return diagnosecode_.Mutable(index);
}
inline void EcuDTC::set_diagnosecode(int index, const std::string& value) {
  diagnosecode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline void EcuDTC::set_diagnosecode(int index, std::string&& value) {
  diagnosecode_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline void EcuDTC::set_diagnosecode(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  diagnosecode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline void EcuDTC::set_diagnosecode(int index, const char* value, size_t size) {
  diagnosecode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline std::string* EcuDTC::_internal_add_diagnosecode() {
  return diagnosecode_.Add();
}
inline void EcuDTC::add_diagnosecode(const std::string& value) {
  diagnosecode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline void EcuDTC::add_diagnosecode(std::string&& value) {
  diagnosecode_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline void EcuDTC::add_diagnosecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  diagnosecode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline void EcuDTC::add_diagnosecode(const char* value, size_t size) {
  diagnosecode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DiagnoseNS.EcuDTC.diagnoseCode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EcuDTC::diagnosecode() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.EcuDTC.diagnoseCode)
  return diagnosecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EcuDTC::mutable_diagnosecode() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.EcuDTC.diagnoseCode)
  return &diagnosecode_;
}

// -------------------------------------------------------------------

// CleanDTC

// repeated .DiagnoseNS.Ecus ecu = 1;
inline int CleanDTC::_internal_ecu_size() const {
  return ecu_.size();
}
inline int CleanDTC::ecu_size() const {
  return _internal_ecu_size();
}
inline void CleanDTC::clear_ecu() {
  ecu_.Clear();
}
inline ::DiagnoseNS::Ecus CleanDTC::_internal_ecu(int index) const {
  return static_cast< ::DiagnoseNS::Ecus >(ecu_.Get(index));
}
inline ::DiagnoseNS::Ecus CleanDTC::ecu(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.CleanDTC.ecu)
  return _internal_ecu(index);
}
inline void CleanDTC::set_ecu(int index, ::DiagnoseNS::Ecus value) {
  ecu_.Set(index, value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.CleanDTC.ecu)
}
inline void CleanDTC::_internal_add_ecu(::DiagnoseNS::Ecus value) {
  ecu_.Add(value);
}
inline void CleanDTC::add_ecu(::DiagnoseNS::Ecus value) {
  _internal_add_ecu(value);
  // @@protoc_insertion_point(field_add:DiagnoseNS.CleanDTC.ecu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CleanDTC::ecu() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.CleanDTC.ecu)
  return ecu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CleanDTC::_internal_mutable_ecu() {
  return &ecu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CleanDTC::mutable_ecu() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.CleanDTC.ecu)
  return _internal_mutable_ecu();
}

// .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 2;
inline void CleanDTC::clear_diagnoseresultcode() {
  diagnoseresultcode_ = 0;
}
inline ::DiagnoseNS::DiagnoseResultCode CleanDTC::_internal_diagnoseresultcode() const {
  return static_cast< ::DiagnoseNS::DiagnoseResultCode >(diagnoseresultcode_);
}
inline ::DiagnoseNS::DiagnoseResultCode CleanDTC::diagnoseresultcode() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.CleanDTC.diagnoseResultCode)
  return _internal_diagnoseresultcode();
}
inline void CleanDTC::_internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  
  diagnoseresultcode_ = value;
}
inline void CleanDTC::set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  _internal_set_diagnoseresultcode(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.CleanDTC.diagnoseResultCode)
}

// -------------------------------------------------------------------

// DiagEcuAddr

// repeated .DiagnoseNS.EcuAddr ecuAddr = 1;
inline int DiagEcuAddr::_internal_ecuaddr_size() const {
  return ecuaddr_.size();
}
inline int DiagEcuAddr::ecuaddr_size() const {
  return _internal_ecuaddr_size();
}
inline void DiagEcuAddr::clear_ecuaddr() {
  ecuaddr_.Clear();
}
inline ::DiagnoseNS::EcuAddr* DiagEcuAddr::mutable_ecuaddr(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.DiagEcuAddr.ecuAddr)
  return ecuaddr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddr >*
DiagEcuAddr::mutable_ecuaddr() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.DiagEcuAddr.ecuAddr)
  return &ecuaddr_;
}
inline const ::DiagnoseNS::EcuAddr& DiagEcuAddr::_internal_ecuaddr(int index) const {
  return ecuaddr_.Get(index);
}
inline const ::DiagnoseNS::EcuAddr& DiagEcuAddr::ecuaddr(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.DiagEcuAddr.ecuAddr)
  return _internal_ecuaddr(index);
}
inline ::DiagnoseNS::EcuAddr* DiagEcuAddr::_internal_add_ecuaddr() {
  return ecuaddr_.Add();
}
inline ::DiagnoseNS::EcuAddr* DiagEcuAddr::add_ecuaddr() {
  ::DiagnoseNS::EcuAddr* _add = _internal_add_ecuaddr();
  // @@protoc_insertion_point(field_add:DiagnoseNS.DiagEcuAddr.ecuAddr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddr >&
DiagEcuAddr::ecuaddr() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.DiagEcuAddr.ecuAddr)
  return ecuaddr_;
}

// repeated .DiagnoseNS.EcuAddrDTC ecuAddrDTC = 2;
inline int DiagEcuAddr::_internal_ecuaddrdtc_size() const {
  return ecuaddrdtc_.size();
}
inline int DiagEcuAddr::ecuaddrdtc_size() const {
  return _internal_ecuaddrdtc_size();
}
inline void DiagEcuAddr::clear_ecuaddrdtc() {
  ecuaddrdtc_.Clear();
}
inline ::DiagnoseNS::EcuAddrDTC* DiagEcuAddr::mutable_ecuaddrdtc(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.DiagEcuAddr.ecuAddrDTC)
  return ecuaddrdtc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddrDTC >*
DiagEcuAddr::mutable_ecuaddrdtc() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.DiagEcuAddr.ecuAddrDTC)
  return &ecuaddrdtc_;
}
inline const ::DiagnoseNS::EcuAddrDTC& DiagEcuAddr::_internal_ecuaddrdtc(int index) const {
  return ecuaddrdtc_.Get(index);
}
inline const ::DiagnoseNS::EcuAddrDTC& DiagEcuAddr::ecuaddrdtc(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.DiagEcuAddr.ecuAddrDTC)
  return _internal_ecuaddrdtc(index);
}
inline ::DiagnoseNS::EcuAddrDTC* DiagEcuAddr::_internal_add_ecuaddrdtc() {
  return ecuaddrdtc_.Add();
}
inline ::DiagnoseNS::EcuAddrDTC* DiagEcuAddr::add_ecuaddrdtc() {
  ::DiagnoseNS::EcuAddrDTC* _add = _internal_add_ecuaddrdtc();
  // @@protoc_insertion_point(field_add:DiagnoseNS.DiagEcuAddr.ecuAddrDTC)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::EcuAddrDTC >&
DiagEcuAddr::ecuaddrdtc() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.DiagEcuAddr.ecuAddrDTC)
  return ecuaddrdtc_;
}

// .DiagnoseNS.DiagnoseResultCode diagnoseResultCode = 3;
inline void DiagEcuAddr::clear_diagnoseresultcode() {
  diagnoseresultcode_ = 0;
}
inline ::DiagnoseNS::DiagnoseResultCode DiagEcuAddr::_internal_diagnoseresultcode() const {
  return static_cast< ::DiagnoseNS::DiagnoseResultCode >(diagnoseresultcode_);
}
inline ::DiagnoseNS::DiagnoseResultCode DiagEcuAddr::diagnoseresultcode() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.DiagEcuAddr.diagnoseResultCode)
  return _internal_diagnoseresultcode();
}
inline void DiagEcuAddr::_internal_set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  
  diagnoseresultcode_ = value;
}
inline void DiagEcuAddr::set_diagnoseresultcode(::DiagnoseNS::DiagnoseResultCode value) {
  _internal_set_diagnoseresultcode(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.DiagEcuAddr.diagnoseResultCode)
}

// -------------------------------------------------------------------

// EcuAddrDTC

// .DiagnoseNS.EcuAddr ecuAddr = 1;
inline bool EcuAddrDTC::_internal_has_ecuaddr() const {
  return this != internal_default_instance() && ecuaddr_ != nullptr;
}
inline bool EcuAddrDTC::has_ecuaddr() const {
  return _internal_has_ecuaddr();
}
inline void EcuAddrDTC::clear_ecuaddr() {
  if (GetArenaForAllocation() == nullptr && ecuaddr_ != nullptr) {
    delete ecuaddr_;
  }
  ecuaddr_ = nullptr;
}
inline const ::DiagnoseNS::EcuAddr& EcuAddrDTC::_internal_ecuaddr() const {
  const ::DiagnoseNS::EcuAddr* p = ecuaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::DiagnoseNS::EcuAddr&>(
      ::DiagnoseNS::_EcuAddr_default_instance_);
}
inline const ::DiagnoseNS::EcuAddr& EcuAddrDTC::ecuaddr() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.EcuAddrDTC.ecuAddr)
  return _internal_ecuaddr();
}
inline void EcuAddrDTC::unsafe_arena_set_allocated_ecuaddr(
    ::DiagnoseNS::EcuAddr* ecuaddr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ecuaddr_);
  }
  ecuaddr_ = ecuaddr;
  if (ecuaddr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DiagnoseNS.EcuAddrDTC.ecuAddr)
}
inline ::DiagnoseNS::EcuAddr* EcuAddrDTC::release_ecuaddr() {
  
  ::DiagnoseNS::EcuAddr* temp = ecuaddr_;
  ecuaddr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DiagnoseNS::EcuAddr* EcuAddrDTC::unsafe_arena_release_ecuaddr() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.EcuAddrDTC.ecuAddr)
  
  ::DiagnoseNS::EcuAddr* temp = ecuaddr_;
  ecuaddr_ = nullptr;
  return temp;
}
inline ::DiagnoseNS::EcuAddr* EcuAddrDTC::_internal_mutable_ecuaddr() {
  
  if (ecuaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::DiagnoseNS::EcuAddr>(GetArenaForAllocation());
    ecuaddr_ = p;
  }
  return ecuaddr_;
}
inline ::DiagnoseNS::EcuAddr* EcuAddrDTC::mutable_ecuaddr() {
  ::DiagnoseNS::EcuAddr* _msg = _internal_mutable_ecuaddr();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.EcuAddrDTC.ecuAddr)
  return _msg;
}
inline void EcuAddrDTC::set_allocated_ecuaddr(::DiagnoseNS::EcuAddr* ecuaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ecuaddr_;
  }
  if (ecuaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DiagnoseNS::EcuAddr>::GetOwningArena(ecuaddr);
    if (message_arena != submessage_arena) {
      ecuaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecuaddr, submessage_arena);
    }
    
  } else {
    
  }
  ecuaddr_ = ecuaddr;
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.EcuAddrDTC.ecuAddr)
}

// repeated string diagnoseCode = 2;
inline int EcuAddrDTC::_internal_diagnosecode_size() const {
  return diagnosecode_.size();
}
inline int EcuAddrDTC::diagnosecode_size() const {
  return _internal_diagnosecode_size();
}
inline void EcuAddrDTC::clear_diagnosecode() {
  diagnosecode_.Clear();
}
inline std::string* EcuAddrDTC::add_diagnosecode() {
  std::string* _s = _internal_add_diagnosecode();
  // @@protoc_insertion_point(field_add_mutable:DiagnoseNS.EcuAddrDTC.diagnoseCode)
  return _s;
}
inline const std::string& EcuAddrDTC::_internal_diagnosecode(int index) const {
  return diagnosecode_.Get(index);
}
inline const std::string& EcuAddrDTC::diagnosecode(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.EcuAddrDTC.diagnoseCode)
  return _internal_diagnosecode(index);
}
inline std::string* EcuAddrDTC::mutable_diagnosecode(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.EcuAddrDTC.diagnoseCode)
  return diagnosecode_.Mutable(index);
}
inline void EcuAddrDTC::set_diagnosecode(int index, const std::string& value) {
  diagnosecode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline void EcuAddrDTC::set_diagnosecode(int index, std::string&& value) {
  diagnosecode_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline void EcuAddrDTC::set_diagnosecode(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  diagnosecode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline void EcuAddrDTC::set_diagnosecode(int index, const char* value, size_t size) {
  diagnosecode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline std::string* EcuAddrDTC::_internal_add_diagnosecode() {
  return diagnosecode_.Add();
}
inline void EcuAddrDTC::add_diagnosecode(const std::string& value) {
  diagnosecode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline void EcuAddrDTC::add_diagnosecode(std::string&& value) {
  diagnosecode_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline void EcuAddrDTC::add_diagnosecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  diagnosecode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline void EcuAddrDTC::add_diagnosecode(const char* value, size_t size) {
  diagnosecode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DiagnoseNS.EcuAddrDTC.diagnoseCode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EcuAddrDTC::diagnosecode() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.EcuAddrDTC.diagnoseCode)
  return diagnosecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EcuAddrDTC::mutable_diagnosecode() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.EcuAddrDTC.diagnoseCode)
  return &diagnosecode_;
}

// -------------------------------------------------------------------

// EcuAddr

// uint32 ecuAddrTx = 1;
inline void EcuAddr::clear_ecuaddrtx() {
  ecuaddrtx_ = 0u;
}
inline uint32_t EcuAddr::_internal_ecuaddrtx() const {
  return ecuaddrtx_;
}
inline uint32_t EcuAddr::ecuaddrtx() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.EcuAddr.ecuAddrTx)
  return _internal_ecuaddrtx();
}
inline void EcuAddr::_internal_set_ecuaddrtx(uint32_t value) {
  
  ecuaddrtx_ = value;
}
inline void EcuAddr::set_ecuaddrtx(uint32_t value) {
  _internal_set_ecuaddrtx(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.EcuAddr.ecuAddrTx)
}

// uint32 ecuAddrRx = 2;
inline void EcuAddr::clear_ecuaddrrx() {
  ecuaddrrx_ = 0u;
}
inline uint32_t EcuAddr::_internal_ecuaddrrx() const {
  return ecuaddrrx_;
}
inline uint32_t EcuAddr::ecuaddrrx() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.EcuAddr.ecuAddrRx)
  return _internal_ecuaddrrx();
}
inline void EcuAddr::_internal_set_ecuaddrrx(uint32_t value) {
  
  ecuaddrrx_ = value;
}
inline void EcuAddr::set_ecuaddrrx(uint32_t value) {
  _internal_set_ecuaddrrx(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.EcuAddr.ecuAddrRx)
}

// -------------------------------------------------------------------

// DIDContent

// .DiagnoseNS.Ecus ecu = 1;
inline void DIDContent::clear_ecu() {
  ecu_ = 0;
}
inline ::DiagnoseNS::Ecus DIDContent::_internal_ecu() const {
  return static_cast< ::DiagnoseNS::Ecus >(ecu_);
}
inline ::DiagnoseNS::Ecus DIDContent::ecu() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.DIDContent.ecu)
  return _internal_ecu();
}
inline void DIDContent::_internal_set_ecu(::DiagnoseNS::Ecus value) {
  
  ecu_ = value;
}
inline void DIDContent::set_ecu(::DiagnoseNS::Ecus value) {
  _internal_set_ecu(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.DIDContent.ecu)
}

// repeated .DiagnoseNS.DiagDID diagDID = 2;
inline int DIDContent::_internal_diagdid_size() const {
  return diagdid_.size();
}
inline int DIDContent::diagdid_size() const {
  return _internal_diagdid_size();
}
inline void DIDContent::clear_diagdid() {
  diagdid_.Clear();
}
inline ::DiagnoseNS::DiagDID* DIDContent::mutable_diagdid(int index) {
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.DIDContent.diagDID)
  return diagdid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DiagDID >*
DIDContent::mutable_diagdid() {
  // @@protoc_insertion_point(field_mutable_list:DiagnoseNS.DIDContent.diagDID)
  return &diagdid_;
}
inline const ::DiagnoseNS::DiagDID& DIDContent::_internal_diagdid(int index) const {
  return diagdid_.Get(index);
}
inline const ::DiagnoseNS::DiagDID& DIDContent::diagdid(int index) const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.DIDContent.diagDID)
  return _internal_diagdid(index);
}
inline ::DiagnoseNS::DiagDID* DIDContent::_internal_add_diagdid() {
  return diagdid_.Add();
}
inline ::DiagnoseNS::DiagDID* DIDContent::add_diagdid() {
  ::DiagnoseNS::DiagDID* _add = _internal_add_diagdid();
  // @@protoc_insertion_point(field_add:DiagnoseNS.DIDContent.diagDID)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DiagnoseNS::DiagDID >&
DIDContent::diagdid() const {
  // @@protoc_insertion_point(field_list:DiagnoseNS.DIDContent.diagDID)
  return diagdid_;
}

// -------------------------------------------------------------------

// DiagDID

// uint32 did = 1;
inline void DiagDID::clear_did() {
  did_ = 0u;
}
inline uint32_t DiagDID::_internal_did() const {
  return did_;
}
inline uint32_t DiagDID::did() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.DiagDID.did)
  return _internal_did();
}
inline void DiagDID::_internal_set_did(uint32_t value) {
  
  did_ = value;
}
inline void DiagDID::set_did(uint32_t value) {
  _internal_set_did(value);
  // @@protoc_insertion_point(field_set:DiagnoseNS.DiagDID.did)
}

// bytes didValue = 2;
inline void DiagDID::clear_didvalue() {
  didvalue_.ClearToEmpty();
}
inline const std::string& DiagDID::didvalue() const {
  // @@protoc_insertion_point(field_get:DiagnoseNS.DiagDID.didValue)
  return _internal_didvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiagDID::set_didvalue(ArgT0&& arg0, ArgT... args) {
 
 didvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DiagnoseNS.DiagDID.didValue)
}
inline std::string* DiagDID::mutable_didvalue() {
  std::string* _s = _internal_mutable_didvalue();
  // @@protoc_insertion_point(field_mutable:DiagnoseNS.DiagDID.didValue)
  return _s;
}
inline const std::string& DiagDID::_internal_didvalue() const {
  return didvalue_.Get();
}
inline void DiagDID::_internal_set_didvalue(const std::string& value) {
  
  didvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiagDID::_internal_mutable_didvalue() {
  
  return didvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiagDID::release_didvalue() {
  // @@protoc_insertion_point(field_release:DiagnoseNS.DiagDID.didValue)
  return didvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiagDID::set_allocated_didvalue(std::string* didvalue) {
  if (didvalue != nullptr) {
    
  } else {
    
  }
  didvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), didvalue,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (didvalue_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    didvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DiagnoseNS.DiagDID.didValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DiagnoseNS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DiagnoseNS::DiagnoseOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DiagnoseNS::DiagnoseOpt>() {
  return ::DiagnoseNS::DiagnoseOpt_descriptor();
}
template <> struct is_proto_enum< ::DiagnoseNS::Ecus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DiagnoseNS::Ecus>() {
  return ::DiagnoseNS::Ecus_descriptor();
}
template <> struct is_proto_enum< ::DiagnoseNS::DiagnoseResultCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DiagnoseNS::DiagnoseResultCode>() {
  return ::DiagnoseNS::DiagnoseResultCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_diagnose_2eproto
