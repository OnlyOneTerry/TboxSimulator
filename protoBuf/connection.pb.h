// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connection_2eproto;
namespace ConnectionNS {
class Connection;
struct ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class VehicleSN;
struct VehicleSNDefaultTypeInternal;
extern VehicleSNDefaultTypeInternal _VehicleSN_default_instance_;
}  // namespace ConnectionNS
PROTOBUF_NAMESPACE_OPEN
template<> ::ConnectionNS::Connection* Arena::CreateMaybeMessage<::ConnectionNS::Connection>(Arena*);
template<> ::ConnectionNS::VehicleSN* Arena::CreateMaybeMessage<::ConnectionNS::VehicleSN>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ConnectionNS {

enum ConnectionOption : int {
  LOGIN_REQ = 0,
  LOGOUT_REQ = 1,
  BEAT_HEART = 2,
  LOGIN_RESP = 3,
  LOGOUT_RESP = 4,
  ConnectionOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectionOption_IsValid(int value);
constexpr ConnectionOption ConnectionOption_MIN = LOGIN_REQ;
constexpr ConnectionOption ConnectionOption_MAX = LOGOUT_RESP;
constexpr int ConnectionOption_ARRAYSIZE = ConnectionOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionOption_descriptor();
template<typename T>
inline const std::string& ConnectionOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionOption_descriptor(), enum_t_value);
}
inline bool ConnectionOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionOption>(
    ConnectionOption_descriptor(), name, value);
}
enum ConnectionResult : int {
  LOGIN_SUCCESS = 0,
  LOGIN_FAILURE = 1,
  LOGIN_CERTIFY_ERROR = 2,
  LOGIN_VIN_ERROR = 3,
  LOGIN_ICCID_ERROR = 4,
  LOGIN_SN_ERROR = 5,
  LOGIN_IMSI_ERROR = 6,
  LOGIN_IMEI_ERROR = 7,
  LOGOUT_SUCCESS = 8,
  LOGOUT_FAILURE = 9,
  ConnectionResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectionResult_IsValid(int value);
constexpr ConnectionResult ConnectionResult_MIN = LOGIN_SUCCESS;
constexpr ConnectionResult ConnectionResult_MAX = LOGOUT_FAILURE;
constexpr int ConnectionResult_ARRAYSIZE = ConnectionResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionResult_descriptor();
template<typename T>
inline const std::string& ConnectionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionResult_descriptor(), enum_t_value);
}
inline bool ConnectionResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionResult>(
    ConnectionResult_descriptor(), name, value);
}
// ===================================================================

class Connection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionNS.Connection) */ {
 public:
  inline Connection() : Connection(nullptr) {}
  ~Connection() override;
  explicit constexpr Connection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Connection(const Connection& from);
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connection& operator=(Connection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(Connection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Connection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Connection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionNS.Connection";
  }
  protected:
  explicit Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIDFieldNumber = 1,
    kTokenFieldNumber = 2,
    kConnectionInfoFieldNumber = 6,
    kVehicleSNFieldNumber = 5,
    kConnectionOptionFieldNumber = 3,
    kConnectionResultFieldNumber = 4,
  };
  // string taskID = 1;
  void clear_taskid();
  const std::string& taskid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_taskid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_taskid();
  PROTOBUF_NODISCARD std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string connectionInfo = 6;
  void clear_connectioninfo();
  const std::string& connectioninfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connectioninfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connectioninfo();
  PROTOBUF_NODISCARD std::string* release_connectioninfo();
  void set_allocated_connectioninfo(std::string* connectioninfo);
  private:
  const std::string& _internal_connectioninfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connectioninfo(const std::string& value);
  std::string* _internal_mutable_connectioninfo();
  public:

  // .ConnectionNS.VehicleSN vehicleSN = 5;
  bool has_vehiclesn() const;
  private:
  bool _internal_has_vehiclesn() const;
  public:
  void clear_vehiclesn();
  const ::ConnectionNS::VehicleSN& vehiclesn() const;
  PROTOBUF_NODISCARD ::ConnectionNS::VehicleSN* release_vehiclesn();
  ::ConnectionNS::VehicleSN* mutable_vehiclesn();
  void set_allocated_vehiclesn(::ConnectionNS::VehicleSN* vehiclesn);
  private:
  const ::ConnectionNS::VehicleSN& _internal_vehiclesn() const;
  ::ConnectionNS::VehicleSN* _internal_mutable_vehiclesn();
  public:
  void unsafe_arena_set_allocated_vehiclesn(
      ::ConnectionNS::VehicleSN* vehiclesn);
  ::ConnectionNS::VehicleSN* unsafe_arena_release_vehiclesn();

  // .ConnectionNS.ConnectionOption connectionOption = 3;
  void clear_connectionoption();
  ::ConnectionNS::ConnectionOption connectionoption() const;
  void set_connectionoption(::ConnectionNS::ConnectionOption value);
  private:
  ::ConnectionNS::ConnectionOption _internal_connectionoption() const;
  void _internal_set_connectionoption(::ConnectionNS::ConnectionOption value);
  public:

  // .ConnectionNS.ConnectionResult connectionResult = 4;
  void clear_connectionresult();
  ::ConnectionNS::ConnectionResult connectionresult() const;
  void set_connectionresult(::ConnectionNS::ConnectionResult value);
  private:
  ::ConnectionNS::ConnectionResult _internal_connectionresult() const;
  void _internal_set_connectionresult(::ConnectionNS::ConnectionResult value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectionNS.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectioninfo_;
  ::ConnectionNS::VehicleSN* vehiclesn_;
  int connectionoption_;
  int connectionresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connection_2eproto;
};
// -------------------------------------------------------------------

class VehicleSN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionNS.VehicleSN) */ {
 public:
  inline VehicleSN() : VehicleSN(nullptr) {}
  ~VehicleSN() override;
  explicit constexpr VehicleSN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleSN(const VehicleSN& from);
  VehicleSN(VehicleSN&& from) noexcept
    : VehicleSN() {
    *this = ::std::move(from);
  }

  inline VehicleSN& operator=(const VehicleSN& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleSN& operator=(VehicleSN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleSN& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleSN* internal_default_instance() {
    return reinterpret_cast<const VehicleSN*>(
               &_VehicleSN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleSN& a, VehicleSN& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleSN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleSN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleSN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleSN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleSN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleSN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleSN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionNS.VehicleSN";
  }
  protected:
  explicit VehicleSN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVidFieldNumber = 1,
    kTboxSnFieldNumber = 2,
    kImeiFieldNumber = 3,
    kIccidFieldNumber = 4,
  };
  // string vid = 1;
  void clear_vid();
  const std::string& vid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vid();
  PROTOBUF_NODISCARD std::string* release_vid();
  void set_allocated_vid(std::string* vid);
  private:
  const std::string& _internal_vid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vid(const std::string& value);
  std::string* _internal_mutable_vid();
  public:

  // string tboxSn = 2;
  void clear_tboxsn();
  const std::string& tboxsn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tboxsn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tboxsn();
  PROTOBUF_NODISCARD std::string* release_tboxsn();
  void set_allocated_tboxsn(std::string* tboxsn);
  private:
  const std::string& _internal_tboxsn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tboxsn(const std::string& value);
  std::string* _internal_mutable_tboxsn();
  public:

  // string imei = 3;
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // string iccid = 4;
  void clear_iccid();
  const std::string& iccid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iccid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iccid();
  PROTOBUF_NODISCARD std::string* release_iccid();
  void set_allocated_iccid(std::string* iccid);
  private:
  const std::string& _internal_iccid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iccid(const std::string& value);
  std::string* _internal_mutable_iccid();
  public:

  // @@protoc_insertion_point(class_scope:ConnectionNS.VehicleSN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tboxsn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iccid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_connection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Connection

// string taskID = 1;
inline void Connection::clear_taskid() {
  taskid_.ClearToEmpty();
}
inline const std::string& Connection::taskid() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.Connection.taskID)
  return _internal_taskid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connection::set_taskid(ArgT0&& arg0, ArgT... args) {
 
 taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectionNS.Connection.taskID)
}
inline std::string* Connection::mutable_taskid() {
  std::string* _s = _internal_mutable_taskid();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.Connection.taskID)
  return _s;
}
inline const std::string& Connection::_internal_taskid() const {
  return taskid_.Get();
}
inline void Connection::_internal_set_taskid(const std::string& value) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connection::_internal_mutable_taskid() {
  
  return taskid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connection::release_taskid() {
  // @@protoc_insertion_point(field_release:ConnectionNS.Connection.taskID)
  return taskid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connection::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (taskid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.Connection.taskID)
}

// string token = 2;
inline void Connection::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& Connection::token() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.Connection.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connection::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectionNS.Connection.token)
}
inline std::string* Connection::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.Connection.token)
  return _s;
}
inline const std::string& Connection::_internal_token() const {
  return token_.Get();
}
inline void Connection::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connection::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connection::release_token() {
  // @@protoc_insertion_point(field_release:ConnectionNS.Connection.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connection::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.Connection.token)
}

// .ConnectionNS.ConnectionOption connectionOption = 3;
inline void Connection::clear_connectionoption() {
  connectionoption_ = 0;
}
inline ::ConnectionNS::ConnectionOption Connection::_internal_connectionoption() const {
  return static_cast< ::ConnectionNS::ConnectionOption >(connectionoption_);
}
inline ::ConnectionNS::ConnectionOption Connection::connectionoption() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.Connection.connectionOption)
  return _internal_connectionoption();
}
inline void Connection::_internal_set_connectionoption(::ConnectionNS::ConnectionOption value) {
  
  connectionoption_ = value;
}
inline void Connection::set_connectionoption(::ConnectionNS::ConnectionOption value) {
  _internal_set_connectionoption(value);
  // @@protoc_insertion_point(field_set:ConnectionNS.Connection.connectionOption)
}

// .ConnectionNS.ConnectionResult connectionResult = 4;
inline void Connection::clear_connectionresult() {
  connectionresult_ = 0;
}
inline ::ConnectionNS::ConnectionResult Connection::_internal_connectionresult() const {
  return static_cast< ::ConnectionNS::ConnectionResult >(connectionresult_);
}
inline ::ConnectionNS::ConnectionResult Connection::connectionresult() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.Connection.connectionResult)
  return _internal_connectionresult();
}
inline void Connection::_internal_set_connectionresult(::ConnectionNS::ConnectionResult value) {
  
  connectionresult_ = value;
}
inline void Connection::set_connectionresult(::ConnectionNS::ConnectionResult value) {
  _internal_set_connectionresult(value);
  // @@protoc_insertion_point(field_set:ConnectionNS.Connection.connectionResult)
}

// .ConnectionNS.VehicleSN vehicleSN = 5;
inline bool Connection::_internal_has_vehiclesn() const {
  return this != internal_default_instance() && vehiclesn_ != nullptr;
}
inline bool Connection::has_vehiclesn() const {
  return _internal_has_vehiclesn();
}
inline void Connection::clear_vehiclesn() {
  if (GetArenaForAllocation() == nullptr && vehiclesn_ != nullptr) {
    delete vehiclesn_;
  }
  vehiclesn_ = nullptr;
}
inline const ::ConnectionNS::VehicleSN& Connection::_internal_vehiclesn() const {
  const ::ConnectionNS::VehicleSN* p = vehiclesn_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectionNS::VehicleSN&>(
      ::ConnectionNS::_VehicleSN_default_instance_);
}
inline const ::ConnectionNS::VehicleSN& Connection::vehiclesn() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.Connection.vehicleSN)
  return _internal_vehiclesn();
}
inline void Connection::unsafe_arena_set_allocated_vehiclesn(
    ::ConnectionNS::VehicleSN* vehiclesn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehiclesn_);
  }
  vehiclesn_ = vehiclesn;
  if (vehiclesn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConnectionNS.Connection.vehicleSN)
}
inline ::ConnectionNS::VehicleSN* Connection::release_vehiclesn() {
  
  ::ConnectionNS::VehicleSN* temp = vehiclesn_;
  vehiclesn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ConnectionNS::VehicleSN* Connection::unsafe_arena_release_vehiclesn() {
  // @@protoc_insertion_point(field_release:ConnectionNS.Connection.vehicleSN)
  
  ::ConnectionNS::VehicleSN* temp = vehiclesn_;
  vehiclesn_ = nullptr;
  return temp;
}
inline ::ConnectionNS::VehicleSN* Connection::_internal_mutable_vehiclesn() {
  
  if (vehiclesn_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectionNS::VehicleSN>(GetArenaForAllocation());
    vehiclesn_ = p;
  }
  return vehiclesn_;
}
inline ::ConnectionNS::VehicleSN* Connection::mutable_vehiclesn() {
  ::ConnectionNS::VehicleSN* _msg = _internal_mutable_vehiclesn();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.Connection.vehicleSN)
  return _msg;
}
inline void Connection::set_allocated_vehiclesn(::ConnectionNS::VehicleSN* vehiclesn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vehiclesn_;
  }
  if (vehiclesn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ConnectionNS::VehicleSN>::GetOwningArena(vehiclesn);
    if (message_arena != submessage_arena) {
      vehiclesn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehiclesn, submessage_arena);
    }
    
  } else {
    
  }
  vehiclesn_ = vehiclesn;
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.Connection.vehicleSN)
}

// string connectionInfo = 6;
inline void Connection::clear_connectioninfo() {
  connectioninfo_.ClearToEmpty();
}
inline const std::string& Connection::connectioninfo() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.Connection.connectionInfo)
  return _internal_connectioninfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connection::set_connectioninfo(ArgT0&& arg0, ArgT... args) {
 
 connectioninfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectionNS.Connection.connectionInfo)
}
inline std::string* Connection::mutable_connectioninfo() {
  std::string* _s = _internal_mutable_connectioninfo();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.Connection.connectionInfo)
  return _s;
}
inline const std::string& Connection::_internal_connectioninfo() const {
  return connectioninfo_.Get();
}
inline void Connection::_internal_set_connectioninfo(const std::string& value) {
  
  connectioninfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connection::_internal_mutable_connectioninfo() {
  
  return connectioninfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connection::release_connectioninfo() {
  // @@protoc_insertion_point(field_release:ConnectionNS.Connection.connectionInfo)
  return connectioninfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connection::set_allocated_connectioninfo(std::string* connectioninfo) {
  if (connectioninfo != nullptr) {
    
  } else {
    
  }
  connectioninfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectioninfo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connectioninfo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connectioninfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.Connection.connectionInfo)
}

// -------------------------------------------------------------------

// VehicleSN

// string vid = 1;
inline void VehicleSN::clear_vid() {
  vid_.ClearToEmpty();
}
inline const std::string& VehicleSN::vid() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.VehicleSN.vid)
  return _internal_vid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleSN::set_vid(ArgT0&& arg0, ArgT... args) {
 
 vid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectionNS.VehicleSN.vid)
}
inline std::string* VehicleSN::mutable_vid() {
  std::string* _s = _internal_mutable_vid();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.VehicleSN.vid)
  return _s;
}
inline const std::string& VehicleSN::_internal_vid() const {
  return vid_.Get();
}
inline void VehicleSN::_internal_set_vid(const std::string& value) {
  
  vid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VehicleSN::_internal_mutable_vid() {
  
  return vid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VehicleSN::release_vid() {
  // @@protoc_insertion_point(field_release:ConnectionNS.VehicleSN.vid)
  return vid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VehicleSN::set_allocated_vid(std::string* vid) {
  if (vid != nullptr) {
    
  } else {
    
  }
  vid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.VehicleSN.vid)
}

// string tboxSn = 2;
inline void VehicleSN::clear_tboxsn() {
  tboxsn_.ClearToEmpty();
}
inline const std::string& VehicleSN::tboxsn() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.VehicleSN.tboxSn)
  return _internal_tboxsn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleSN::set_tboxsn(ArgT0&& arg0, ArgT... args) {
 
 tboxsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectionNS.VehicleSN.tboxSn)
}
inline std::string* VehicleSN::mutable_tboxsn() {
  std::string* _s = _internal_mutable_tboxsn();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.VehicleSN.tboxSn)
  return _s;
}
inline const std::string& VehicleSN::_internal_tboxsn() const {
  return tboxsn_.Get();
}
inline void VehicleSN::_internal_set_tboxsn(const std::string& value) {
  
  tboxsn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VehicleSN::_internal_mutable_tboxsn() {
  
  return tboxsn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VehicleSN::release_tboxsn() {
  // @@protoc_insertion_point(field_release:ConnectionNS.VehicleSN.tboxSn)
  return tboxsn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VehicleSN::set_allocated_tboxsn(std::string* tboxsn) {
  if (tboxsn != nullptr) {
    
  } else {
    
  }
  tboxsn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tboxsn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tboxsn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tboxsn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.VehicleSN.tboxSn)
}

// string imei = 3;
inline void VehicleSN::clear_imei() {
  imei_.ClearToEmpty();
}
inline const std::string& VehicleSN::imei() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.VehicleSN.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleSN::set_imei(ArgT0&& arg0, ArgT... args) {
 
 imei_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectionNS.VehicleSN.imei)
}
inline std::string* VehicleSN::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.VehicleSN.imei)
  return _s;
}
inline const std::string& VehicleSN::_internal_imei() const {
  return imei_.Get();
}
inline void VehicleSN::_internal_set_imei(const std::string& value) {
  
  imei_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VehicleSN::_internal_mutable_imei() {
  
  return imei_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VehicleSN::release_imei() {
  // @@protoc_insertion_point(field_release:ConnectionNS.VehicleSN.imei)
  return imei_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VehicleSN::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imei_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.VehicleSN.imei)
}

// string iccid = 4;
inline void VehicleSN::clear_iccid() {
  iccid_.ClearToEmpty();
}
inline const std::string& VehicleSN::iccid() const {
  // @@protoc_insertion_point(field_get:ConnectionNS.VehicleSN.iccid)
  return _internal_iccid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleSN::set_iccid(ArgT0&& arg0, ArgT... args) {
 
 iccid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectionNS.VehicleSN.iccid)
}
inline std::string* VehicleSN::mutable_iccid() {
  std::string* _s = _internal_mutable_iccid();
  // @@protoc_insertion_point(field_mutable:ConnectionNS.VehicleSN.iccid)
  return _s;
}
inline const std::string& VehicleSN::_internal_iccid() const {
  return iccid_.Get();
}
inline void VehicleSN::_internal_set_iccid(const std::string& value) {
  
  iccid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VehicleSN::_internal_mutable_iccid() {
  
  return iccid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VehicleSN::release_iccid() {
  // @@protoc_insertion_point(field_release:ConnectionNS.VehicleSN.iccid)
  return iccid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VehicleSN::set_allocated_iccid(std::string* iccid) {
  if (iccid != nullptr) {
    
  } else {
    
  }
  iccid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iccid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (iccid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    iccid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectionNS.VehicleSN.iccid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConnectionNS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ConnectionNS::ConnectionOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConnectionNS::ConnectionOption>() {
  return ::ConnectionNS::ConnectionOption_descriptor();
}
template <> struct is_proto_enum< ::ConnectionNS::ConnectionResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConnectionNS::ConnectionResult>() {
  return ::ConnectionNS::ConnectionResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connection_2eproto
