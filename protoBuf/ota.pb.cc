// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ota.proto

#include "ota.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace OTANS {
constexpr OTA::OTA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otarequest_(nullptr)
  , otareqack_(nullptr)
  , otaresponse_(nullptr)
  , timestamp_(int64_t{0}){}
struct OTADefaultTypeInternal {
  constexpr OTADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTADefaultTypeInternal() {}
  union {
    OTA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTADefaultTypeInternal _OTA_default_instance_;
constexpr OTARequest::OTARequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ecuinfo_()
  , totalsize_(0){}
struct OTARequestDefaultTypeInternal {
  constexpr OTARequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTARequestDefaultTypeInternal() {}
  union {
    OTARequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTARequestDefaultTypeInternal _OTARequest_default_instance_;
constexpr OTAReqAck::OTAReqAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct OTAReqAckDefaultTypeInternal {
  constexpr OTAReqAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTAReqAckDefaultTypeInternal() {}
  union {
    OTAReqAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTAReqAckDefaultTypeInternal _OTAReqAck_default_instance_;
constexpr EcuInfo::EcuInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : softver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fileurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , md5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0)
  , ecu_(0)

  , filesize_(0){}
struct EcuInfoDefaultTypeInternal {
  constexpr EcuInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EcuInfoDefaultTypeInternal() {}
  union {
    EcuInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EcuInfoDefaultTypeInternal _EcuInfo_default_instance_;
constexpr OTAResponse::OTAResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : otaresult_(){}
struct OTAResponseDefaultTypeInternal {
  constexpr OTAResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTAResponseDefaultTypeInternal() {}
  union {
    OTAResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTAResponseDefaultTypeInternal _OTAResponse_default_instance_;
constexpr OTAResult::OTAResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : softver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0)
  , ecu_(0)

  , updatestarttime_(int64_t{0})
  , updateendtime_(int64_t{0})
  , updateresult_(0){}
struct OTAResultDefaultTypeInternal {
  constexpr OTAResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTAResultDefaultTypeInternal() {}
  union {
    OTAResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTAResultDefaultTypeInternal _OTAResult_default_instance_;
constexpr OTAStep::OTAStep(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stepevent_()
  , taskid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OTAStepDefaultTypeInternal {
  constexpr OTAStepDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OTAStepDefaultTypeInternal() {}
  union {
    OTAStep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OTAStepDefaultTypeInternal _OTAStep_default_instance_;
constexpr StepEvent::StepEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ecu_(0)

  , step_(0){}
struct StepEventDefaultTypeInternal {
  constexpr StepEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StepEventDefaultTypeInternal() {}
  union {
    StepEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StepEventDefaultTypeInternal _StepEvent_default_instance_;
}  // namespace OTANS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ota_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ota_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ota_2eproto = nullptr;

const uint32_t TableStruct_ota_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTA, timestamp_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTA, taskid_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTA, otarequest_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTA, otareqack_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTA, otaresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTARequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTARequest, totalsize_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTARequest, ecuinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAReqAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAReqAck, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::EcuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::EcuInfo, index_),
  PROTOBUF_FIELD_OFFSET(::OTANS::EcuInfo, ecu_),
  PROTOBUF_FIELD_OFFSET(::OTANS::EcuInfo, softver_),
  PROTOBUF_FIELD_OFFSET(::OTANS::EcuInfo, fileurl_),
  PROTOBUF_FIELD_OFFSET(::OTANS::EcuInfo, filesize_),
  PROTOBUF_FIELD_OFFSET(::OTANS::EcuInfo, md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResponse, otaresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResult, index_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResult, ecu_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResult, softver_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResult, updateresult_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResult, updatestarttime_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAResult, updateendtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAStep, taskid_),
  PROTOBUF_FIELD_OFFSET(::OTANS::OTAStep, stepevent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OTANS::StepEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OTANS::StepEvent, ecu_),
  PROTOBUF_FIELD_OFFSET(::OTANS::StepEvent, step_),
  PROTOBUF_FIELD_OFFSET(::OTANS::StepEvent, desc_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::OTANS::OTA)},
  { 11, -1, -1, sizeof(::OTANS::OTARequest)},
  { 19, -1, -1, sizeof(::OTANS::OTAReqAck)},
  { 26, -1, -1, sizeof(::OTANS::EcuInfo)},
  { 38, -1, -1, sizeof(::OTANS::OTAResponse)},
  { 45, -1, -1, sizeof(::OTANS::OTAResult)},
  { 57, -1, -1, sizeof(::OTANS::OTAStep)},
  { 65, -1, -1, sizeof(::OTANS::StepEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_OTA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_OTARequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_OTAReqAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_EcuInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_OTAResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_OTAResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_OTAStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OTANS::_StepEvent_default_instance_),
};

const char descriptor_table_protodef_ota_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tota.proto\022\005OTANS\032\016diagnose.proto\"\235\001\n\003O"
  "TA\022\021\n\ttimestamp\030\001 \001(\003\022\016\n\006taskID\030\002 \001(\t\022%\n"
  "\notaRequest\030\003 \001(\0132\021.OTANS.OTARequest\022#\n\t"
  "otaReqAck\030\004 \001(\0132\020.OTANS.OTAReqAck\022\'\n\013ota"
  "Response\030\005 \001(\0132\022.OTANS.OTAResponse\"@\n\nOT"
  "ARequest\022\021\n\ttotalSize\030\001 \001(\005\022\037\n\007ecuInfo\030\002"
  " \003(\0132\016.OTANS.EcuInfo\"\033\n\tOTAReqAck\022\016\n\006res"
  "ult\030\001 \001(\r\"x\n\007EcuInfo\022\r\n\005index\030\001 \001(\005\022\035\n\003e"
  "cu\030\002 \001(\0162\020.DiagnoseNS.Ecus\022\017\n\007softVer\030\003 "
  "\001(\t\022\017\n\007fileUrl\030\004 \001(\t\022\020\n\010fileSize\030\005 \001(\005\022\013"
  "\n\003md5\030\006 \001(\t\"2\n\013OTAResponse\022#\n\totaResult\030"
  "\001 \003(\0132\020.OTANS.OTAResult\"\220\001\n\tOTAResult\022\r\n"
  "\005index\030\001 \001(\005\022\035\n\003ecu\030\002 \001(\0162\020.DiagnoseNS.E"
  "cus\022\017\n\007softVer\030\003 \001(\t\022\024\n\014updateResult\030\004 \001"
  "(\005\022\027\n\017updateStartTime\030\005 \001(\003\022\025\n\rupdateEnd"
  "Time\030\006 \001(\003\">\n\007OTAStep\022\016\n\006taskID\030\001 \001(\t\022#\n"
  "\tstepEvent\030\002 \003(\0132\020.OTANS.StepEvent\"F\n\tSt"
  "epEvent\022\035\n\003ecu\030\001 \001(\0162\020.DiagnoseNS.Ecus\022\014"
  "\n\004step\030\002 \001(\005\022\014\n\004desc\030\003 \001(\tB\031\n\rcom.iov.pr"
  "otoB\010OTAProtoP\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ota_2eproto_deps[1] = {
  &::descriptor_table_diagnose_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ota_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ota_2eproto = {
  false, false, 783, descriptor_table_protodef_ota_2eproto, "ota.proto", 
  &descriptor_table_ota_2eproto_once, descriptor_table_ota_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_ota_2eproto::offsets,
  file_level_metadata_ota_2eproto, file_level_enum_descriptors_ota_2eproto, file_level_service_descriptors_ota_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ota_2eproto_getter() {
  return &descriptor_table_ota_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ota_2eproto(&descriptor_table_ota_2eproto);
namespace OTANS {

// ===================================================================

class OTA::_Internal {
 public:
  static const ::OTANS::OTARequest& otarequest(const OTA* msg);
  static const ::OTANS::OTAReqAck& otareqack(const OTA* msg);
  static const ::OTANS::OTAResponse& otaresponse(const OTA* msg);
};

const ::OTANS::OTARequest&
OTA::_Internal::otarequest(const OTA* msg) {
  return *msg->otarequest_;
}
const ::OTANS::OTAReqAck&
OTA::_Internal::otareqack(const OTA* msg) {
  return *msg->otareqack_;
}
const ::OTANS::OTAResponse&
OTA::_Internal::otaresponse(const OTA* msg) {
  return *msg->otaresponse_;
}
OTA::OTA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.OTA)
}
OTA::OTA(const OTA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_otarequest()) {
    otarequest_ = new ::OTANS::OTARequest(*from.otarequest_);
  } else {
    otarequest_ = nullptr;
  }
  if (from._internal_has_otareqack()) {
    otareqack_ = new ::OTANS::OTAReqAck(*from.otareqack_);
  } else {
    otareqack_ = nullptr;
  }
  if (from._internal_has_otaresponse()) {
    otaresponse_ = new ::OTANS::OTAResponse(*from.otaresponse_);
  } else {
    otaresponse_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:OTANS.OTA)
}

inline void OTA::SharedCtor() {
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&otarequest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&otarequest_)) + sizeof(timestamp_));
}

OTA::~OTA() {
  // @@protoc_insertion_point(destructor:OTANS.OTA)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete otarequest_;
  if (this != internal_default_instance()) delete otareqack_;
  if (this != internal_default_instance()) delete otaresponse_;
}

void OTA::ArenaDtor(void* object) {
  OTA* _this = reinterpret_cast< OTA* >(object);
  (void)_this;
}
void OTA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTA::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.OTA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && otarequest_ != nullptr) {
    delete otarequest_;
  }
  otarequest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && otareqack_ != nullptr) {
    delete otareqack_;
  }
  otareqack_ = nullptr;
  if (GetArenaForAllocation() == nullptr && otaresponse_ != nullptr) {
    delete otaresponse_;
  }
  otaresponse_ = nullptr;
  timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string taskID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OTANS.OTA.taskID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OTANS.OTARequest otaRequest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_otarequest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OTANS.OTAReqAck otaReqAck = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_otareqack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OTANS.OTAResponse otaResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_otaresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OTA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.OTA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string taskID = 2;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OTANS.OTA.taskID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_taskid(), target);
  }

  // .OTANS.OTARequest otaRequest = 3;
  if (this->_internal_has_otarequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::otarequest(this), target, stream);
  }

  // .OTANS.OTAReqAck otaReqAck = 4;
  if (this->_internal_has_otareqack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::otareqack(this), target, stream);
  }

  // .OTANS.OTAResponse otaResponse = 5;
  if (this->_internal_has_otaresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::otaresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.OTA)
  return target;
}

size_t OTA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.OTA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taskID = 2;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  // .OTANS.OTARequest otaRequest = 3;
  if (this->_internal_has_otarequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *otarequest_);
  }

  // .OTANS.OTAReqAck otaReqAck = 4;
  if (this->_internal_has_otareqack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *otareqack_);
  }

  // .OTANS.OTAResponse otaResponse = 5;
  if (this->_internal_has_otaresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *otaresponse_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTA::GetClassData() const { return &_class_data_; }

void OTA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OTA *>(to)->MergeFrom(
      static_cast<const OTA &>(from));
}


void OTA::MergeFrom(const OTA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.OTA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_has_otarequest()) {
    _internal_mutable_otarequest()->::OTANS::OTARequest::MergeFrom(from._internal_otarequest());
  }
  if (from._internal_has_otareqack()) {
    _internal_mutable_otareqack()->::OTANS::OTAReqAck::MergeFrom(from._internal_otareqack());
  }
  if (from._internal_has_otaresponse()) {
    _internal_mutable_otaresponse()->::OTANS::OTAResponse::MergeFrom(from._internal_otaresponse());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTA::CopyFrom(const OTA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.OTA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTA::IsInitialized() const {
  return true;
}

void OTA::InternalSwap(OTA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OTA, timestamp_)
      + sizeof(OTA::timestamp_)
      - PROTOBUF_FIELD_OFFSET(OTA, otarequest_)>(
          reinterpret_cast<char*>(&otarequest_),
          reinterpret_cast<char*>(&other->otarequest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OTA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[0]);
}

// ===================================================================

class OTARequest::_Internal {
 public:
};

OTARequest::OTARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ecuinfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.OTARequest)
}
OTARequest::OTARequest(const OTARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ecuinfo_(from.ecuinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  totalsize_ = from.totalsize_;
  // @@protoc_insertion_point(copy_constructor:OTANS.OTARequest)
}

inline void OTARequest::SharedCtor() {
totalsize_ = 0;
}

OTARequest::~OTARequest() {
  // @@protoc_insertion_point(destructor:OTANS.OTARequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTARequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OTARequest::ArenaDtor(void* object) {
  OTARequest* _this = reinterpret_cast< OTARequest* >(object);
  (void)_this;
}
void OTARequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTARequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.OTARequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecuinfo_.Clear();
  totalsize_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTARequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 totalSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          totalsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OTANS.EcuInfo ecuInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ecuinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OTARequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.OTARequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 totalSize = 1;
  if (this->_internal_totalsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_totalsize(), target);
  }

  // repeated .OTANS.EcuInfo ecuInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ecuinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ecuinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.OTARequest)
  return target;
}

size_t OTARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.OTARequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OTANS.EcuInfo ecuInfo = 2;
  total_size += 1UL * this->_internal_ecuinfo_size();
  for (const auto& msg : this->ecuinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 totalSize = 1;
  if (this->_internal_totalsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_totalsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTARequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTARequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTARequest::GetClassData() const { return &_class_data_; }

void OTARequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OTARequest *>(to)->MergeFrom(
      static_cast<const OTARequest &>(from));
}


void OTARequest::MergeFrom(const OTARequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.OTARequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ecuinfo_.MergeFrom(from.ecuinfo_);
  if (from._internal_totalsize() != 0) {
    _internal_set_totalsize(from._internal_totalsize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTARequest::CopyFrom(const OTARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.OTARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTARequest::IsInitialized() const {
  return true;
}

void OTARequest::InternalSwap(OTARequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ecuinfo_.InternalSwap(&other->ecuinfo_);
  swap(totalsize_, other->totalsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OTARequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[1]);
}

// ===================================================================

class OTAReqAck::_Internal {
 public:
};

OTAReqAck::OTAReqAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.OTAReqAck)
}
OTAReqAck::OTAReqAck(const OTAReqAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:OTANS.OTAReqAck)
}

inline void OTAReqAck::SharedCtor() {
result_ = 0u;
}

OTAReqAck::~OTAReqAck() {
  // @@protoc_insertion_point(destructor:OTANS.OTAReqAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTAReqAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OTAReqAck::ArenaDtor(void* object) {
  OTAReqAck* _this = reinterpret_cast< OTAReqAck* >(object);
  (void)_this;
}
void OTAReqAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTAReqAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTAReqAck::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.OTAReqAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTAReqAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OTAReqAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.OTAReqAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.OTAReqAck)
  return target;
}

size_t OTAReqAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.OTAReqAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTAReqAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTAReqAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTAReqAck::GetClassData() const { return &_class_data_; }

void OTAReqAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OTAReqAck *>(to)->MergeFrom(
      static_cast<const OTAReqAck &>(from));
}


void OTAReqAck::MergeFrom(const OTAReqAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.OTAReqAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTAReqAck::CopyFrom(const OTAReqAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.OTAReqAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTAReqAck::IsInitialized() const {
  return true;
}

void OTAReqAck::InternalSwap(OTAReqAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OTAReqAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[2]);
}

// ===================================================================

class EcuInfo::_Internal {
 public:
};

EcuInfo::EcuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.EcuInfo)
}
EcuInfo::EcuInfo(const EcuInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  softver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    softver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_softver().empty()) {
    softver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_softver(), 
      GetArenaForAllocation());
  }
  fileurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fileurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fileurl().empty()) {
    fileurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fileurl(), 
      GetArenaForAllocation());
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5().empty()) {
    md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_md5(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&filesize_) -
    reinterpret_cast<char*>(&index_)) + sizeof(filesize_));
  // @@protoc_insertion_point(copy_constructor:OTANS.EcuInfo)
}

inline void EcuInfo::SharedCtor() {
softver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  softver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fileurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fileurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filesize_) -
    reinterpret_cast<char*>(&index_)) + sizeof(filesize_));
}

EcuInfo::~EcuInfo() {
  // @@protoc_insertion_point(destructor:OTANS.EcuInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EcuInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  softver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fileurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EcuInfo::ArenaDtor(void* object) {
  EcuInfo* _this = reinterpret_cast< EcuInfo* >(object);
  (void)_this;
}
void EcuInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EcuInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EcuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.EcuInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  softver_.ClearToEmpty();
  fileurl_.ClearToEmpty();
  md5_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filesize_) -
      reinterpret_cast<char*>(&index_)) + sizeof(filesize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EcuInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.Ecus ecu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // string softVer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_softver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OTANS.EcuInfo.softVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fileUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fileurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OTANS.EcuInfo.fileUrl"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fileSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string md5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OTANS.EcuInfo.md5"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EcuInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.EcuInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .DiagnoseNS.Ecus ecu = 2;
  if (this->_internal_ecu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ecu(), target);
  }

  // string softVer = 3;
  if (!this->_internal_softver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_softver().data(), static_cast<int>(this->_internal_softver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OTANS.EcuInfo.softVer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_softver(), target);
  }

  // string fileUrl = 4;
  if (!this->_internal_fileurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fileurl().data(), static_cast<int>(this->_internal_fileurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OTANS.EcuInfo.fileUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fileurl(), target);
  }

  // int32 fileSize = 5;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_filesize(), target);
  }

  // string md5 = 6;
  if (!this->_internal_md5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5().data(), static_cast<int>(this->_internal_md5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OTANS.EcuInfo.md5");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.EcuInfo)
  return target;
}

size_t EcuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.EcuInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string softVer = 3;
  if (!this->_internal_softver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_softver());
  }

  // string fileUrl = 4;
  if (!this->_internal_fileurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fileurl());
  }

  // string md5 = 6;
  if (!this->_internal_md5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // .DiagnoseNS.Ecus ecu = 2;
  if (this->_internal_ecu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecu());
  }

  // int32 fileSize = 5;
  if (this->_internal_filesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_filesize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EcuInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EcuInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EcuInfo::GetClassData() const { return &_class_data_; }

void EcuInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EcuInfo *>(to)->MergeFrom(
      static_cast<const EcuInfo &>(from));
}


void EcuInfo::MergeFrom(const EcuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.EcuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_softver().empty()) {
    _internal_set_softver(from._internal_softver());
  }
  if (!from._internal_fileurl().empty()) {
    _internal_set_fileurl(from._internal_fileurl());
  }
  if (!from._internal_md5().empty()) {
    _internal_set_md5(from._internal_md5());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_ecu() != 0) {
    _internal_set_ecu(from._internal_ecu());
  }
  if (from._internal_filesize() != 0) {
    _internal_set_filesize(from._internal_filesize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EcuInfo::CopyFrom(const EcuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.EcuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuInfo::IsInitialized() const {
  return true;
}

void EcuInfo::InternalSwap(EcuInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &softver_, lhs_arena,
      &other->softver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fileurl_, lhs_arena,
      &other->fileurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &md5_, lhs_arena,
      &other->md5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EcuInfo, filesize_)
      + sizeof(EcuInfo::filesize_)
      - PROTOBUF_FIELD_OFFSET(EcuInfo, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EcuInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[3]);
}

// ===================================================================

class OTAResponse::_Internal {
 public:
};

OTAResponse::OTAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  otaresult_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.OTAResponse)
}
OTAResponse::OTAResponse(const OTAResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      otaresult_(from.otaresult_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OTANS.OTAResponse)
}

inline void OTAResponse::SharedCtor() {
}

OTAResponse::~OTAResponse() {
  // @@protoc_insertion_point(destructor:OTANS.OTAResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTAResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OTAResponse::ArenaDtor(void* object) {
  OTAResponse* _this = reinterpret_cast< OTAResponse* >(object);
  (void)_this;
}
void OTAResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTAResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTAResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.OTAResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  otaresult_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTAResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .OTANS.OTAResult otaResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_otaresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OTAResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.OTAResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OTANS.OTAResult otaResult = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_otaresult_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_otaresult(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.OTAResponse)
  return target;
}

size_t OTAResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.OTAResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OTANS.OTAResult otaResult = 1;
  total_size += 1UL * this->_internal_otaresult_size();
  for (const auto& msg : this->otaresult_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTAResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTAResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTAResponse::GetClassData() const { return &_class_data_; }

void OTAResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OTAResponse *>(to)->MergeFrom(
      static_cast<const OTAResponse &>(from));
}


void OTAResponse::MergeFrom(const OTAResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.OTAResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  otaresult_.MergeFrom(from.otaresult_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTAResponse::CopyFrom(const OTAResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.OTAResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTAResponse::IsInitialized() const {
  return true;
}

void OTAResponse::InternalSwap(OTAResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  otaresult_.InternalSwap(&other->otaresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OTAResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[4]);
}

// ===================================================================

class OTAResult::_Internal {
 public:
};

OTAResult::OTAResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.OTAResult)
}
OTAResult::OTAResult(const OTAResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  softver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    softver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_softver().empty()) {
    softver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_softver(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&updateresult_) -
    reinterpret_cast<char*>(&index_)) + sizeof(updateresult_));
  // @@protoc_insertion_point(copy_constructor:OTANS.OTAResult)
}

inline void OTAResult::SharedCtor() {
softver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  softver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updateresult_) -
    reinterpret_cast<char*>(&index_)) + sizeof(updateresult_));
}

OTAResult::~OTAResult() {
  // @@protoc_insertion_point(destructor:OTANS.OTAResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTAResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  softver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OTAResult::ArenaDtor(void* object) {
  OTAResult* _this = reinterpret_cast< OTAResult* >(object);
  (void)_this;
}
void OTAResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTAResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTAResult::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.OTAResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  softver_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updateresult_) -
      reinterpret_cast<char*>(&index_)) + sizeof(updateresult_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTAResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DiagnoseNS.Ecus ecu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // string softVer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_softver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OTANS.OTAResult.softVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 updateResult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          updateresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updateStartTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          updatestarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 updateEndTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          updateendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OTAResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.OTAResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .DiagnoseNS.Ecus ecu = 2;
  if (this->_internal_ecu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ecu(), target);
  }

  // string softVer = 3;
  if (!this->_internal_softver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_softver().data(), static_cast<int>(this->_internal_softver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OTANS.OTAResult.softVer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_softver(), target);
  }

  // int32 updateResult = 4;
  if (this->_internal_updateresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_updateresult(), target);
  }

  // int64 updateStartTime = 5;
  if (this->_internal_updatestarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_updatestarttime(), target);
  }

  // int64 updateEndTime = 6;
  if (this->_internal_updateendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_updateendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.OTAResult)
  return target;
}

size_t OTAResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.OTAResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string softVer = 3;
  if (!this->_internal_softver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_softver());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // .DiagnoseNS.Ecus ecu = 2;
  if (this->_internal_ecu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecu());
  }

  // int64 updateStartTime = 5;
  if (this->_internal_updatestarttime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_updatestarttime());
  }

  // int64 updateEndTime = 6;
  if (this->_internal_updateendtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_updateendtime());
  }

  // int32 updateResult = 4;
  if (this->_internal_updateresult() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_updateresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTAResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTAResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTAResult::GetClassData() const { return &_class_data_; }

void OTAResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OTAResult *>(to)->MergeFrom(
      static_cast<const OTAResult &>(from));
}


void OTAResult::MergeFrom(const OTAResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.OTAResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_softver().empty()) {
    _internal_set_softver(from._internal_softver());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_ecu() != 0) {
    _internal_set_ecu(from._internal_ecu());
  }
  if (from._internal_updatestarttime() != 0) {
    _internal_set_updatestarttime(from._internal_updatestarttime());
  }
  if (from._internal_updateendtime() != 0) {
    _internal_set_updateendtime(from._internal_updateendtime());
  }
  if (from._internal_updateresult() != 0) {
    _internal_set_updateresult(from._internal_updateresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTAResult::CopyFrom(const OTAResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.OTAResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTAResult::IsInitialized() const {
  return true;
}

void OTAResult::InternalSwap(OTAResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &softver_, lhs_arena,
      &other->softver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OTAResult, updateresult_)
      + sizeof(OTAResult::updateresult_)
      - PROTOBUF_FIELD_OFFSET(OTAResult, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OTAResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[5]);
}

// ===================================================================

class OTAStep::_Internal {
 public:
};

OTAStep::OTAStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stepevent_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.OTAStep)
}
OTAStep::OTAStep(const OTAStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stepevent_(from.stepevent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskid().empty()) {
    taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:OTANS.OTAStep)
}

inline void OTAStep::SharedCtor() {
taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  taskid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OTAStep::~OTAStep() {
  // @@protoc_insertion_point(destructor:OTANS.OTAStep)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OTAStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OTAStep::ArenaDtor(void* object) {
  OTAStep* _this = reinterpret_cast< OTAStep* >(object);
  (void)_this;
}
void OTAStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OTAStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OTAStep::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.OTAStep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stepevent_.Clear();
  taskid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OTAStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taskID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OTANS.OTAStep.taskID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OTANS.StepEvent stepEvent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stepevent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OTAStep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.OTAStep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OTANS.OTAStep.taskID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskid(), target);
  }

  // repeated .OTANS.StepEvent stepEvent = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stepevent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stepevent(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.OTAStep)
  return target;
}

size_t OTAStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.OTAStep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OTANS.StepEvent stepEvent = 2;
  total_size += 1UL * this->_internal_stepevent_size();
  for (const auto& msg : this->stepevent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string taskID = 1;
  if (!this->_internal_taskid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OTAStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OTAStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OTAStep::GetClassData() const { return &_class_data_; }

void OTAStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OTAStep *>(to)->MergeFrom(
      static_cast<const OTAStep &>(from));
}


void OTAStep::MergeFrom(const OTAStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.OTAStep)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stepevent_.MergeFrom(from.stepevent_);
  if (!from._internal_taskid().empty()) {
    _internal_set_taskid(from._internal_taskid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OTAStep::CopyFrom(const OTAStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.OTAStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OTAStep::IsInitialized() const {
  return true;
}

void OTAStep::InternalSwap(OTAStep* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stepevent_.InternalSwap(&other->stepevent_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &taskid_, lhs_arena,
      &other->taskid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OTAStep::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[6]);
}

// ===================================================================

class StepEvent::_Internal {
 public:
};

StepEvent::StepEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OTANS.StepEvent)
}
StepEvent::StepEvent(const StepEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ecu_, &from.ecu_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&ecu_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:OTANS.StepEvent)
}

inline void StepEvent::SharedCtor() {
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ecu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&ecu_)) + sizeof(step_));
}

StepEvent::~StepEvent() {
  // @@protoc_insertion_point(destructor:OTANS.StepEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StepEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StepEvent::ArenaDtor(void* object) {
  StepEvent* _this = reinterpret_cast< StepEvent* >(object);
  (void)_this;
}
void StepEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StepEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StepEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:OTANS.StepEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmpty();
  ::memset(&ecu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&ecu_)) + sizeof(step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DiagnoseNS.Ecus ecu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecu(static_cast<::DiagnoseNS::Ecus>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OTANS.StepEvent.desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OTANS.StepEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ecu(), target);
  }

  // int32 step = 2;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_step(), target);
  }

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OTANS.StepEvent.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OTANS.StepEvent)
  return target;
}

size_t StepEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OTANS.StepEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string desc = 3;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // .DiagnoseNS.Ecus ecu = 1;
  if (this->_internal_ecu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecu());
  }

  // int32 step = 2;
  if (this->_internal_step() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StepEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepEvent::GetClassData() const { return &_class_data_; }

void StepEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StepEvent *>(to)->MergeFrom(
      static_cast<const StepEvent &>(from));
}


void StepEvent::MergeFrom(const StepEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OTANS.StepEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_ecu() != 0) {
    _internal_set_ecu(from._internal_ecu());
  }
  if (from._internal_step() != 0) {
    _internal_set_step(from._internal_step());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepEvent::CopyFrom(const StepEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OTANS.StepEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepEvent::IsInitialized() const {
  return true;
}

void StepEvent::InternalSwap(StepEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StepEvent, step_)
      + sizeof(StepEvent::step_)
      - PROTOBUF_FIELD_OFFSET(StepEvent, ecu_)>(
          reinterpret_cast<char*>(&ecu_),
          reinterpret_cast<char*>(&other->ecu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StepEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ota_2eproto_getter, &descriptor_table_ota_2eproto_once,
      file_level_metadata_ota_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace OTANS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OTANS::OTA* Arena::CreateMaybeMessage< ::OTANS::OTA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::OTA >(arena);
}
template<> PROTOBUF_NOINLINE ::OTANS::OTARequest* Arena::CreateMaybeMessage< ::OTANS::OTARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::OTARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::OTANS::OTAReqAck* Arena::CreateMaybeMessage< ::OTANS::OTAReqAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::OTAReqAck >(arena);
}
template<> PROTOBUF_NOINLINE ::OTANS::EcuInfo* Arena::CreateMaybeMessage< ::OTANS::EcuInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::EcuInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OTANS::OTAResponse* Arena::CreateMaybeMessage< ::OTANS::OTAResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::OTAResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::OTANS::OTAResult* Arena::CreateMaybeMessage< ::OTANS::OTAResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::OTAResult >(arena);
}
template<> PROTOBUF_NOINLINE ::OTANS::OTAStep* Arena::CreateMaybeMessage< ::OTANS::OTAStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::OTAStep >(arena);
}
template<> PROTOBUF_NOINLINE ::OTANS::StepEvent* Arena::CreateMaybeMessage< ::OTANS::StepEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OTANS::StepEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
