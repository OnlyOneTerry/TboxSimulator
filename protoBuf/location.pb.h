// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_location_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_location_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_location_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_location_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_location_2eproto;
namespace LocationNS {
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
}  // namespace LocationNS
PROTOBUF_NAMESPACE_OPEN
template<> ::LocationNS::Location* Arena::CreateMaybeMessage<::LocationNS::Location>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LocationNS {

// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LocationNS.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LocationNS.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kAltitudeFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kAngleFieldNumber = 6,
    kSatNumberFieldNumber = 7,
    kHemisphereFieldNumber = 8,
    kTimestampFieldNumber = 9,
  };
  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // uint32 latitude = 2;
  void clear_latitude();
  uint32_t latitude() const;
  void set_latitude(uint32_t value);
  private:
  uint32_t _internal_latitude() const;
  void _internal_set_latitude(uint32_t value);
  public:

  // uint32 longitude = 3;
  void clear_longitude();
  uint32_t longitude() const;
  void set_longitude(uint32_t value);
  private:
  uint32_t _internal_longitude() const;
  void _internal_set_longitude(uint32_t value);
  public:

  // int32 altitude = 4;
  void clear_altitude();
  int32_t altitude() const;
  void set_altitude(int32_t value);
  private:
  int32_t _internal_altitude() const;
  void _internal_set_altitude(int32_t value);
  public:

  // uint32 speed = 5;
  void clear_speed();
  uint32_t speed() const;
  void set_speed(uint32_t value);
  private:
  uint32_t _internal_speed() const;
  void _internal_set_speed(uint32_t value);
  public:

  // uint32 angle = 6;
  void clear_angle();
  uint32_t angle() const;
  void set_angle(uint32_t value);
  private:
  uint32_t _internal_angle() const;
  void _internal_set_angle(uint32_t value);
  public:

  // uint32 satNumber = 7;
  void clear_satnumber();
  uint32_t satnumber() const;
  void set_satnumber(uint32_t value);
  private:
  uint32_t _internal_satnumber() const;
  void _internal_set_satnumber(uint32_t value);
  public:

  // int32 hemisphere = 8;
  void clear_hemisphere();
  int32_t hemisphere() const;
  void set_hemisphere(int32_t value);
  private:
  int32_t _internal_hemisphere() const;
  void _internal_set_hemisphere(int32_t value);
  public:

  // int64 timestamp = 9;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:LocationNS.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool valid_;
  uint32_t latitude_;
  uint32_t longitude_;
  int32_t altitude_;
  uint32_t speed_;
  uint32_t angle_;
  uint32_t satnumber_;
  int32_t hemisphere_;
  int64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_location_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// bool valid = 1;
inline void Location::clear_valid() {
  valid_ = false;
}
inline bool Location::_internal_valid() const {
  return valid_;
}
inline bool Location::valid() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.valid)
  return _internal_valid();
}
inline void Location::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void Location::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.valid)
}

// uint32 latitude = 2;
inline void Location::clear_latitude() {
  latitude_ = 0u;
}
inline uint32_t Location::_internal_latitude() const {
  return latitude_;
}
inline uint32_t Location::latitude() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(uint32_t value) {
  
  latitude_ = value;
}
inline void Location::set_latitude(uint32_t value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.latitude)
}

// uint32 longitude = 3;
inline void Location::clear_longitude() {
  longitude_ = 0u;
}
inline uint32_t Location::_internal_longitude() const {
  return longitude_;
}
inline uint32_t Location::longitude() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(uint32_t value) {
  
  longitude_ = value;
}
inline void Location::set_longitude(uint32_t value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.longitude)
}

// int32 altitude = 4;
inline void Location::clear_altitude() {
  altitude_ = 0;
}
inline int32_t Location::_internal_altitude() const {
  return altitude_;
}
inline int32_t Location::altitude() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.altitude)
  return _internal_altitude();
}
inline void Location::_internal_set_altitude(int32_t value) {
  
  altitude_ = value;
}
inline void Location::set_altitude(int32_t value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.altitude)
}

// uint32 speed = 5;
inline void Location::clear_speed() {
  speed_ = 0u;
}
inline uint32_t Location::_internal_speed() const {
  return speed_;
}
inline uint32_t Location::speed() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.speed)
  return _internal_speed();
}
inline void Location::_internal_set_speed(uint32_t value) {
  
  speed_ = value;
}
inline void Location::set_speed(uint32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.speed)
}

// uint32 angle = 6;
inline void Location::clear_angle() {
  angle_ = 0u;
}
inline uint32_t Location::_internal_angle() const {
  return angle_;
}
inline uint32_t Location::angle() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.angle)
  return _internal_angle();
}
inline void Location::_internal_set_angle(uint32_t value) {
  
  angle_ = value;
}
inline void Location::set_angle(uint32_t value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.angle)
}

// uint32 satNumber = 7;
inline void Location::clear_satnumber() {
  satnumber_ = 0u;
}
inline uint32_t Location::_internal_satnumber() const {
  return satnumber_;
}
inline uint32_t Location::satnumber() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.satNumber)
  return _internal_satnumber();
}
inline void Location::_internal_set_satnumber(uint32_t value) {
  
  satnumber_ = value;
}
inline void Location::set_satnumber(uint32_t value) {
  _internal_set_satnumber(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.satNumber)
}

// int32 hemisphere = 8;
inline void Location::clear_hemisphere() {
  hemisphere_ = 0;
}
inline int32_t Location::_internal_hemisphere() const {
  return hemisphere_;
}
inline int32_t Location::hemisphere() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.hemisphere)
  return _internal_hemisphere();
}
inline void Location::_internal_set_hemisphere(int32_t value) {
  
  hemisphere_ = value;
}
inline void Location::set_hemisphere(int32_t value) {
  _internal_set_hemisphere(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.hemisphere)
}

// int64 timestamp = 9;
inline void Location::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t Location::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t Location::timestamp() const {
  // @@protoc_insertion_point(field_get:LocationNS.Location.timestamp)
  return _internal_timestamp();
}
inline void Location::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void Location::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:LocationNS.Location.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LocationNS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_location_2eproto
