// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fault.proto

#include "fault.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace FaultNS {
constexpr Fault::Fault(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : faultmsg_()
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FaultDefaultTypeInternal {
  constexpr FaultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaultDefaultTypeInternal() {}
  union {
    Fault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaultDefaultTypeInternal _Fault_default_instance_;
constexpr FaultMsg::FaultMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : faultitem_(nullptr)
  , status_(false){}
struct FaultMsgDefaultTypeInternal {
  constexpr FaultMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaultMsgDefaultTypeInternal() {}
  union {
    FaultMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaultMsgDefaultTypeInternal _FaultMsg_default_instance_;
constexpr FaultItem::FaultItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spn_(0u)
  , fmi_(0u)
  , model_(0u)
  , counter_(0u){}
struct FaultItemDefaultTypeInternal {
  constexpr FaultItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaultItemDefaultTypeInternal() {}
  union {
    FaultItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaultItemDefaultTypeInternal _FaultItem_default_instance_;
}  // namespace FaultNS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fault_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fault_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fault_2eproto = nullptr;

const uint32_t TableStruct_fault_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaultNS::Fault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FaultNS::Fault, faultmsg_),
  PROTOBUF_FIELD_OFFSET(::FaultNS::Fault, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultMsg, faultitem_),
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultMsg, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultItem, spn_),
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultItem, fmi_),
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultItem, model_),
  PROTOBUF_FIELD_OFFSET(::FaultNS::FaultItem, counter_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FaultNS::Fault)},
  { 8, -1, -1, sizeof(::FaultNS::FaultMsg)},
  { 16, -1, -1, sizeof(::FaultNS::FaultItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FaultNS::_Fault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FaultNS::_FaultMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FaultNS::_FaultItem_default_instance_),
};

const char descriptor_table_protodef_fault_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013fault.proto\022\007FaultNS\">\n\005Fault\022#\n\010fault"
  "Msg\030\001 \003(\0132\021.FaultNS.FaultMsg\022\020\n\010location"
  "\030\002 \001(\014\"A\n\010FaultMsg\022%\n\tfaultItem\030\001 \001(\0132\022."
  "FaultNS.FaultItem\022\016\n\006status\030\002 \001(\010\"E\n\tFau"
  "ltItem\022\013\n\003spn\030\001 \001(\r\022\013\n\003fmi\030\002 \001(\r\022\r\n\005mode"
  "l\030\003 \001(\r\022\017\n\007counter\030\004 \001(\rB\033\n\rcom.iov.prot"
  "oB\nFaultProtob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fault_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fault_2eproto = {
  false, false, 261, descriptor_table_protodef_fault_2eproto, "fault.proto", 
  &descriptor_table_fault_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_fault_2eproto::offsets,
  file_level_metadata_fault_2eproto, file_level_enum_descriptors_fault_2eproto, file_level_service_descriptors_fault_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_fault_2eproto_getter() {
  return &descriptor_table_fault_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_fault_2eproto(&descriptor_table_fault_2eproto);
namespace FaultNS {

// ===================================================================

class Fault::_Internal {
 public:
};

Fault::Fault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  faultmsg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FaultNS.Fault)
}
Fault::Fault(const Fault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      faultmsg_(from.faultmsg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FaultNS.Fault)
}

inline void Fault::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Fault::~Fault() {
  // @@protoc_insertion_point(destructor:FaultNS.Fault)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Fault::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fault::ArenaDtor(void* object) {
  Fault* _this = reinterpret_cast< Fault* >(object);
  (void)_this;
}
void Fault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fault::Clear() {
// @@protoc_insertion_point(message_clear_start:FaultNS.Fault)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faultmsg_.Clear();
  location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .FaultNS.FaultMsg faultMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faultmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fault::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaultNS.Fault)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FaultNS.FaultMsg faultMsg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faultmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_faultmsg(i), target, stream);
  }

  // bytes location = 2;
  if (!this->_internal_location().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaultNS.Fault)
  return target;
}

size_t Fault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaultNS.Fault)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FaultNS.FaultMsg faultMsg = 1;
  total_size += 1UL * this->_internal_faultmsg_size();
  for (const auto& msg : this->faultmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes location = 2;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fault::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fault::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fault::GetClassData() const { return &_class_data_; }

void Fault::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fault *>(to)->MergeFrom(
      static_cast<const Fault &>(from));
}


void Fault::MergeFrom(const Fault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaultNS.Fault)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  faultmsg_.MergeFrom(from.faultmsg_);
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fault::CopyFrom(const Fault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaultNS.Fault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fault::IsInitialized() const {
  return true;
}

void Fault::InternalSwap(Fault* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  faultmsg_.InternalSwap(&other->faultmsg_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Fault::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fault_2eproto_getter, &descriptor_table_fault_2eproto_once,
      file_level_metadata_fault_2eproto[0]);
}

// ===================================================================

class FaultMsg::_Internal {
 public:
  static const ::FaultNS::FaultItem& faultitem(const FaultMsg* msg);
};

const ::FaultNS::FaultItem&
FaultMsg::_Internal::faultitem(const FaultMsg* msg) {
  return *msg->faultitem_;
}
FaultMsg::FaultMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FaultNS.FaultMsg)
}
FaultMsg::FaultMsg(const FaultMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_faultitem()) {
    faultitem_ = new ::FaultNS::FaultItem(*from.faultitem_);
  } else {
    faultitem_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:FaultNS.FaultMsg)
}

inline void FaultMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&faultitem_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&faultitem_)) + sizeof(status_));
}

FaultMsg::~FaultMsg() {
  // @@protoc_insertion_point(destructor:FaultNS.FaultMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaultMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete faultitem_;
}

void FaultMsg::ArenaDtor(void* object) {
  FaultMsg* _this = reinterpret_cast< FaultMsg* >(object);
  (void)_this;
}
void FaultMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaultMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaultMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FaultNS.FaultMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && faultitem_ != nullptr) {
    delete faultitem_;
  }
  faultitem_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaultMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FaultNS.FaultItem faultItem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_faultitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaultMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaultNS.FaultMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FaultNS.FaultItem faultItem = 1;
  if (this->_internal_has_faultitem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::faultitem(this), target, stream);
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaultNS.FaultMsg)
  return target;
}

size_t FaultMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaultNS.FaultMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FaultNS.FaultItem faultItem = 1;
  if (this->_internal_has_faultitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *faultitem_);
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaultMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaultMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaultMsg::GetClassData() const { return &_class_data_; }

void FaultMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaultMsg *>(to)->MergeFrom(
      static_cast<const FaultMsg &>(from));
}


void FaultMsg::MergeFrom(const FaultMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaultNS.FaultMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_faultitem()) {
    _internal_mutable_faultitem()->::FaultNS::FaultItem::MergeFrom(from._internal_faultitem());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaultMsg::CopyFrom(const FaultMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaultNS.FaultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultMsg::IsInitialized() const {
  return true;
}

void FaultMsg::InternalSwap(FaultMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaultMsg, status_)
      + sizeof(FaultMsg::status_)
      - PROTOBUF_FIELD_OFFSET(FaultMsg, faultitem_)>(
          reinterpret_cast<char*>(&faultitem_),
          reinterpret_cast<char*>(&other->faultitem_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaultMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fault_2eproto_getter, &descriptor_table_fault_2eproto_once,
      file_level_metadata_fault_2eproto[1]);
}

// ===================================================================

class FaultItem::_Internal {
 public:
};

FaultItem::FaultItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FaultNS.FaultItem)
}
FaultItem::FaultItem(const FaultItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&spn_, &from.spn_,
    static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&spn_)) + sizeof(counter_));
  // @@protoc_insertion_point(copy_constructor:FaultNS.FaultItem)
}

inline void FaultItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&spn_)) + sizeof(counter_));
}

FaultItem::~FaultItem() {
  // @@protoc_insertion_point(destructor:FaultNS.FaultItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaultItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FaultItem::ArenaDtor(void* object) {
  FaultItem* _this = reinterpret_cast< FaultItem* >(object);
  (void)_this;
}
void FaultItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaultItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaultItem::Clear() {
// @@protoc_insertion_point(message_clear_start:FaultNS.FaultItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&spn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counter_) -
      reinterpret_cast<char*>(&spn_)) + sizeof(counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaultItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 spn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          spn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fmi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fmi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaultItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FaultNS.FaultItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spn = 1;
  if (this->_internal_spn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spn(), target);
  }

  // uint32 fmi = 2;
  if (this->_internal_fmi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fmi(), target);
  }

  // uint32 model = 3;
  if (this->_internal_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_model(), target);
  }

  // uint32 counter = 4;
  if (this->_internal_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FaultNS.FaultItem)
  return target;
}

size_t FaultItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FaultNS.FaultItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 spn = 1;
  if (this->_internal_spn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_spn());
  }

  // uint32 fmi = 2;
  if (this->_internal_fmi() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fmi());
  }

  // uint32 model = 3;
  if (this->_internal_model() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_model());
  }

  // uint32 counter = 4;
  if (this->_internal_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaultItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaultItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaultItem::GetClassData() const { return &_class_data_; }

void FaultItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaultItem *>(to)->MergeFrom(
      static_cast<const FaultItem &>(from));
}


void FaultItem::MergeFrom(const FaultItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FaultNS.FaultItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_spn() != 0) {
    _internal_set_spn(from._internal_spn());
  }
  if (from._internal_fmi() != 0) {
    _internal_set_fmi(from._internal_fmi());
  }
  if (from._internal_model() != 0) {
    _internal_set_model(from._internal_model());
  }
  if (from._internal_counter() != 0) {
    _internal_set_counter(from._internal_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaultItem::CopyFrom(const FaultItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FaultNS.FaultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultItem::IsInitialized() const {
  return true;
}

void FaultItem::InternalSwap(FaultItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaultItem, counter_)
      + sizeof(FaultItem::counter_)
      - PROTOBUF_FIELD_OFFSET(FaultItem, spn_)>(
          reinterpret_cast<char*>(&spn_),
          reinterpret_cast<char*>(&other->spn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaultItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fault_2eproto_getter, &descriptor_table_fault_2eproto_once,
      file_level_metadata_fault_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace FaultNS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FaultNS::Fault* Arena::CreateMaybeMessage< ::FaultNS::Fault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FaultNS::Fault >(arena);
}
template<> PROTOBUF_NOINLINE ::FaultNS::FaultMsg* Arena::CreateMaybeMessage< ::FaultNS::FaultMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FaultNS::FaultMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::FaultNS::FaultItem* Arena::CreateMaybeMessage< ::FaultNS::FaultItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FaultNS::FaultItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
